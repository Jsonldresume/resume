{"ast":null,"code":"'use strict';\n\nvar markdownSpace = require('../character/markdown-space.js');\n\nvar factorySpace = require('./factory-space.js');\n\nvar partialBlankLine = require('./partial-blank-line.js');\n\nvar sizeChunks = require('../util/size-chunks.js');\n\nvar prefixSize = require('../util/prefix-size.js');\n\nvar asciiDigit = require('../character/ascii-digit.js');\n\nvar thematicBreak = require('./thematic-break.js');\n\nvar list = {\n  name: 'list',\n  tokenize: tokenizeListStart,\n  continuation: {\n    tokenize: tokenizeListContinuation\n  },\n  exit: tokenizeListEnd\n};\nvar listItemPrefixWhitespaceConstruct = {\n  tokenize: tokenizeListItemPrefixWhitespace,\n  partial: true\n};\nvar indentConstruct = {\n  tokenize: tokenizeIndent,\n  partial: true\n};\n\nfunction tokenizeListStart(effects, ok, nok) {\n  var self = this;\n  var initialSize = prefixSize(self.events, 'linePrefix');\n  var size = 0;\n  return start;\n\n  function start(code) {\n    var kind = self.containerState.type || (code === 42 || code === 43 || code === 45 ? 'listUnordered' : 'listOrdered');\n\n    if (kind === 'listUnordered' ? !self.containerState.marker || code === self.containerState.marker : asciiDigit(code)) {\n      if (!self.containerState.type) {\n        self.containerState.type = kind;\n        effects.enter(kind, {\n          _container: true\n        });\n      }\n\n      if (kind === 'listUnordered') {\n        effects.enter('listItemPrefix');\n        return code === 42 || code === 45 ? effects.check(thematicBreak, nok, atMarker)(code) : atMarker(code);\n      }\n\n      if (!self.interrupt || code === 49) {\n        effects.enter('listItemPrefix');\n        effects.enter('listItemValue');\n        return inside(code);\n      }\n    }\n\n    return nok(code);\n  }\n\n  function inside(code) {\n    if (asciiDigit(code) && ++size < 10) {\n      effects.consume(code);\n      return inside;\n    }\n\n    if ((!self.interrupt || size < 2) && (self.containerState.marker ? code === self.containerState.marker : code === 41 || code === 46)) {\n      effects.exit('listItemValue');\n      return atMarker(code);\n    }\n\n    return nok(code);\n  }\n\n  function atMarker(code) {\n    effects.enter('listItemMarker');\n    effects.consume(code);\n    effects.exit('listItemMarker');\n    self.containerState.marker = self.containerState.marker || code;\n    return effects.check(partialBlankLine, // Can’t be empty when interrupting.\n    self.interrupt ? nok : onBlank, effects.attempt(listItemPrefixWhitespaceConstruct, endOfPrefix, otherPrefix));\n  }\n\n  function onBlank(code) {\n    self.containerState.initialBlankLine = true;\n    initialSize++;\n    return endOfPrefix(code);\n  }\n\n  function otherPrefix(code) {\n    if (markdownSpace(code)) {\n      effects.enter('listItemPrefixWhitespace');\n      effects.consume(code);\n      effects.exit('listItemPrefixWhitespace');\n      return endOfPrefix;\n    }\n\n    return nok(code);\n  }\n\n  function endOfPrefix(code) {\n    self.containerState.size = initialSize + sizeChunks(self.sliceStream(effects.exit('listItemPrefix')));\n    return ok(code);\n  }\n}\n\nfunction tokenizeListContinuation(effects, ok, nok) {\n  var self = this;\n  self.containerState._closeFlow = undefined;\n  return effects.check(partialBlankLine, onBlank, notBlank);\n\n  function onBlank(code) {\n    self.containerState.furtherBlankLines = self.containerState.furtherBlankLines || self.containerState.initialBlankLine;\n    return ok(code);\n  }\n\n  function notBlank(code) {\n    if (self.containerState.furtherBlankLines || !markdownSpace(code)) {\n      self.containerState.furtherBlankLines = self.containerState.initialBlankLine = undefined;\n      return notInCurrentItem(code);\n    }\n\n    self.containerState.furtherBlankLines = self.containerState.initialBlankLine = undefined;\n    return effects.attempt(indentConstruct, ok, notInCurrentItem)(code);\n  }\n\n  function notInCurrentItem(code) {\n    // While we do continue, we signal that the flow should be closed.\n    self.containerState._closeFlow = true; // As we’re closing flow, we’re no longer interrupting.\n\n    self.interrupt = undefined;\n    return factorySpace(effects, effects.attempt(list, ok, nok), 'linePrefix', self.parser.constructs.disable.null.indexOf('codeIndented') > -1 ? undefined : 4)(code);\n  }\n}\n\nfunction tokenizeIndent(effects, ok, nok) {\n  var self = this;\n  return factorySpace(effects, afterPrefix, 'listItemIndent', self.containerState.size + 1);\n\n  function afterPrefix(code) {\n    return prefixSize(self.events, 'listItemIndent') === self.containerState.size ? ok(code) : nok(code);\n  }\n}\n\nfunction tokenizeListEnd(effects) {\n  effects.exit(this.containerState.type);\n}\n\nfunction tokenizeListItemPrefixWhitespace(effects, ok, nok) {\n  var self = this;\n  return factorySpace(effects, afterPrefix, 'listItemPrefixWhitespace', self.parser.constructs.disable.null.indexOf('codeIndented') > -1 ? undefined : 4 + 1);\n\n  function afterPrefix(code) {\n    return markdownSpace(code) || !prefixSize(self.events, 'listItemPrefixWhitespace') ? nok(code) : ok(code);\n  }\n}\n\nmodule.exports = list;","map":{"version":3,"sources":["D:/github/jsonldresume/my-app/node_modules/micromark/dist/tokenize/list.js"],"names":["markdownSpace","require","factorySpace","partialBlankLine","sizeChunks","prefixSize","asciiDigit","thematicBreak","list","name","tokenize","tokenizeListStart","continuation","tokenizeListContinuation","exit","tokenizeListEnd","listItemPrefixWhitespaceConstruct","tokenizeListItemPrefixWhitespace","partial","indentConstruct","tokenizeIndent","effects","ok","nok","self","initialSize","events","size","start","code","kind","containerState","type","marker","enter","_container","check","atMarker","interrupt","inside","consume","onBlank","attempt","endOfPrefix","otherPrefix","initialBlankLine","sliceStream","_closeFlow","undefined","notBlank","furtherBlankLines","notInCurrentItem","parser","constructs","disable","null","indexOf","afterPrefix","module","exports"],"mappings":"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","sourcesContent":["'use strict'\n\nvar markdownSpace = require('../character/markdown-space.js')\nvar factorySpace = require('./factory-space.js')\nvar partialBlankLine = require('./partial-blank-line.js')\nvar sizeChunks = require('../util/size-chunks.js')\nvar prefixSize = require('../util/prefix-size.js')\nvar asciiDigit = require('../character/ascii-digit.js')\nvar thematicBreak = require('./thematic-break.js')\n\nvar list = {\n  name: 'list',\n  tokenize: tokenizeListStart,\n  continuation: {\n    tokenize: tokenizeListContinuation\n  },\n  exit: tokenizeListEnd\n}\nvar listItemPrefixWhitespaceConstruct = {\n  tokenize: tokenizeListItemPrefixWhitespace,\n  partial: true\n}\nvar indentConstruct = {\n  tokenize: tokenizeIndent,\n  partial: true\n}\n\nfunction tokenizeListStart(effects, ok, nok) {\n  var self = this\n  var initialSize = prefixSize(self.events, 'linePrefix')\n  var size = 0\n  return start\n\n  function start(code) {\n    var kind =\n      self.containerState.type ||\n      (code === 42 || code === 43 || code === 45\n        ? 'listUnordered'\n        : 'listOrdered')\n\n    if (\n      kind === 'listUnordered'\n        ? !self.containerState.marker || code === self.containerState.marker\n        : asciiDigit(code)\n    ) {\n      if (!self.containerState.type) {\n        self.containerState.type = kind\n        effects.enter(kind, {\n          _container: true\n        })\n      }\n\n      if (kind === 'listUnordered') {\n        effects.enter('listItemPrefix')\n        return code === 42 || code === 45\n          ? effects.check(thematicBreak, nok, atMarker)(code)\n          : atMarker(code)\n      }\n\n      if (!self.interrupt || code === 49) {\n        effects.enter('listItemPrefix')\n        effects.enter('listItemValue')\n        return inside(code)\n      }\n    }\n\n    return nok(code)\n  }\n\n  function inside(code) {\n    if (asciiDigit(code) && ++size < 10) {\n      effects.consume(code)\n      return inside\n    }\n\n    if (\n      (!self.interrupt || size < 2) &&\n      (self.containerState.marker\n        ? code === self.containerState.marker\n        : code === 41 || code === 46)\n    ) {\n      effects.exit('listItemValue')\n      return atMarker(code)\n    }\n\n    return nok(code)\n  }\n\n  function atMarker(code) {\n    effects.enter('listItemMarker')\n    effects.consume(code)\n    effects.exit('listItemMarker')\n    self.containerState.marker = self.containerState.marker || code\n    return effects.check(\n      partialBlankLine, // Can’t be empty when interrupting.\n      self.interrupt ? nok : onBlank,\n      effects.attempt(\n        listItemPrefixWhitespaceConstruct,\n        endOfPrefix,\n        otherPrefix\n      )\n    )\n  }\n\n  function onBlank(code) {\n    self.containerState.initialBlankLine = true\n    initialSize++\n    return endOfPrefix(code)\n  }\n\n  function otherPrefix(code) {\n    if (markdownSpace(code)) {\n      effects.enter('listItemPrefixWhitespace')\n      effects.consume(code)\n      effects.exit('listItemPrefixWhitespace')\n      return endOfPrefix\n    }\n\n    return nok(code)\n  }\n\n  function endOfPrefix(code) {\n    self.containerState.size =\n      initialSize + sizeChunks(self.sliceStream(effects.exit('listItemPrefix')))\n    return ok(code)\n  }\n}\n\nfunction tokenizeListContinuation(effects, ok, nok) {\n  var self = this\n  self.containerState._closeFlow = undefined\n  return effects.check(partialBlankLine, onBlank, notBlank)\n\n  function onBlank(code) {\n    self.containerState.furtherBlankLines =\n      self.containerState.furtherBlankLines ||\n      self.containerState.initialBlankLine\n    return ok(code)\n  }\n\n  function notBlank(code) {\n    if (self.containerState.furtherBlankLines || !markdownSpace(code)) {\n      self.containerState.furtherBlankLines = self.containerState.initialBlankLine = undefined\n      return notInCurrentItem(code)\n    }\n\n    self.containerState.furtherBlankLines = self.containerState.initialBlankLine = undefined\n    return effects.attempt(indentConstruct, ok, notInCurrentItem)(code)\n  }\n\n  function notInCurrentItem(code) {\n    // While we do continue, we signal that the flow should be closed.\n    self.containerState._closeFlow = true // As we’re closing flow, we’re no longer interrupting.\n\n    self.interrupt = undefined\n    return factorySpace(\n      effects,\n      effects.attempt(list, ok, nok),\n      'linePrefix',\n      self.parser.constructs.disable.null.indexOf('codeIndented') > -1\n        ? undefined\n        : 4\n    )(code)\n  }\n}\n\nfunction tokenizeIndent(effects, ok, nok) {\n  var self = this\n  return factorySpace(\n    effects,\n    afterPrefix,\n    'listItemIndent',\n    self.containerState.size + 1\n  )\n\n  function afterPrefix(code) {\n    return prefixSize(self.events, 'listItemIndent') ===\n      self.containerState.size\n      ? ok(code)\n      : nok(code)\n  }\n}\n\nfunction tokenizeListEnd(effects) {\n  effects.exit(this.containerState.type)\n}\n\nfunction tokenizeListItemPrefixWhitespace(effects, ok, nok) {\n  var self = this\n  return factorySpace(\n    effects,\n    afterPrefix,\n    'listItemPrefixWhitespace',\n    self.parser.constructs.disable.null.indexOf('codeIndented') > -1\n      ? undefined\n      : 4 + 1\n  )\n\n  function afterPrefix(code) {\n    return markdownSpace(code) ||\n      !prefixSize(self.events, 'listItemPrefixWhitespace')\n      ? nok(code)\n      : ok(code)\n  }\n}\n\nmodule.exports = list\n"]},"metadata":{},"sourceType":"script"}