{"ast":null,"code":"'use strict';\n\nvar xtend = require('xtend');\n\nvar unified = require('unified');\n\nvar parse = require('remark-parse');\n\nvar PropTypes = require('prop-types');\n\nvar addListMetadata = require('mdast-add-list-metadata');\n\nvar naiveHtml = require('./plugins/naive-html');\n\nvar disallowNode = require('./plugins/disallow-node');\n\nvar astToReact = require('./ast-to-react');\n\nvar wrapTableRows = require('./wrap-table-rows');\n\nvar getDefinitions = require('./get-definitions');\n\nvar uriTransformer = require('./uri-transformer');\n\nvar defaultRenderers = require('./renderers');\n\nvar symbols = require('./symbols');\n\nvar allTypes = Object.keys(defaultRenderers);\n\nvar ReactMarkdown = function ReactMarkdown(props) {\n  // To do in next major: remove `source`.\n  var src = props.source || props.children || '';\n\n  if (props.allowedTypes && props.disallowedTypes) {\n    throw new Error('Only one of `allowedTypes` and `disallowedTypes` should be defined');\n  }\n\n  var renderers = xtend(defaultRenderers, props.renderers);\n  var processor = unified().use(parse).use(props.plugins || []); // eslint-disable-next-line no-sync\n\n  var tree = processor.runSync(processor.parse(src));\n  var renderProps = xtend(props, {\n    renderers: renderers,\n    definitions: getDefinitions(tree)\n  });\n  determineAstToReactTransforms(props).forEach(function (transform) {\n    tree = transform(tree, renderProps);\n  });\n  return tree;\n};\n\nfunction determineAstToReactTransforms(props) {\n  var transforms = [wrapTableRows, addListMetadata()];\n  var disallowedTypes = props.disallowedTypes;\n\n  if (props.allowedTypes) {\n    disallowedTypes = allTypes.filter(function (type) {\n      return type !== 'root' && props.allowedTypes.indexOf(type) === -1;\n    });\n  }\n\n  var removalMethod = props.unwrapDisallowed ? 'unwrap' : 'remove';\n\n  if (disallowedTypes && disallowedTypes.length > 0) {\n    transforms.push(disallowNode.ofType(disallowedTypes, removalMethod));\n  }\n\n  if (props.allowNode) {\n    transforms.push(disallowNode.ifNotMatch(props.allowNode, removalMethod));\n  } // To do in next major: remove `escapeHtml`.\n\n\n  var renderHtml = (props.allowDangerousHtml || props.escapeHtml === false) && !props.skipHtml;\n  var hasHtmlParser = (props.astPlugins || []).some(function (transform) {\n    return transform.identity === symbols.HtmlParser;\n  });\n\n  if (renderHtml && !hasHtmlParser) {\n    transforms.push(naiveHtml);\n  }\n\n  if (props.astPlugins) {\n    transforms = transforms.concat(props.astPlugins);\n  } // Add the final transform to turn everything into React.\n\n\n  transforms.push(astToReact);\n  return transforms;\n}\n\nReactMarkdown.defaultProps = {\n  transformLinkUri: uriTransformer\n};\nReactMarkdown.propTypes = {\n  className: PropTypes.string,\n  source: PropTypes.string,\n  children: PropTypes.string,\n  sourcePos: PropTypes.bool,\n  rawSourcePos: PropTypes.bool,\n  escapeHtml: PropTypes.bool,\n  allowDangerousHtml: PropTypes.bool,\n  skipHtml: PropTypes.bool,\n  allowNode: PropTypes.func,\n  allowedTypes: PropTypes.arrayOf(PropTypes.oneOf(allTypes)),\n  disallowedTypes: PropTypes.arrayOf(PropTypes.oneOf(allTypes)),\n  transformLinkUri: PropTypes.oneOfType([PropTypes.func, PropTypes.bool]),\n  linkTarget: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  transformImageUri: PropTypes.func,\n  astPlugins: PropTypes.arrayOf(PropTypes.func),\n  unwrapDisallowed: PropTypes.bool,\n  renderers: PropTypes.object,\n  plugins: PropTypes.array\n};\nReactMarkdown.types = allTypes;\nReactMarkdown.renderers = defaultRenderers;\nReactMarkdown.uriTransformer = uriTransformer;\nmodule.exports = ReactMarkdown;","map":{"version":3,"sources":["D:/github/jsonldresume/resume/node_modules/react-markdown/lib/react-markdown.js"],"names":["xtend","require","unified","parse","PropTypes","addListMetadata","naiveHtml","disallowNode","astToReact","wrapTableRows","getDefinitions","uriTransformer","defaultRenderers","symbols","allTypes","Object","keys","ReactMarkdown","props","src","source","children","allowedTypes","disallowedTypes","Error","renderers","processor","use","plugins","tree","runSync","renderProps","definitions","determineAstToReactTransforms","forEach","transform","transforms","filter","type","indexOf","removalMethod","unwrapDisallowed","length","push","ofType","allowNode","ifNotMatch","renderHtml","allowDangerousHtml","escapeHtml","skipHtml","hasHtmlParser","astPlugins","some","identity","HtmlParser","concat","defaultProps","transformLinkUri","propTypes","className","string","sourcePos","bool","rawSourcePos","func","arrayOf","oneOf","oneOfType","linkTarget","transformImageUri","object","array","types","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nvar xtend = require('xtend');\n\nvar unified = require('unified');\n\nvar parse = require('remark-parse');\n\nvar PropTypes = require('prop-types');\n\nvar addListMetadata = require('mdast-add-list-metadata');\n\nvar naiveHtml = require('./plugins/naive-html');\n\nvar disallowNode = require('./plugins/disallow-node');\n\nvar astToReact = require('./ast-to-react');\n\nvar wrapTableRows = require('./wrap-table-rows');\n\nvar getDefinitions = require('./get-definitions');\n\nvar uriTransformer = require('./uri-transformer');\n\nvar defaultRenderers = require('./renderers');\n\nvar symbols = require('./symbols');\n\nvar allTypes = Object.keys(defaultRenderers);\n\nvar ReactMarkdown = function ReactMarkdown(props) {\n  // To do in next major: remove `source`.\n  var src = props.source || props.children || '';\n\n  if (props.allowedTypes && props.disallowedTypes) {\n    throw new Error('Only one of `allowedTypes` and `disallowedTypes` should be defined');\n  }\n\n  var renderers = xtend(defaultRenderers, props.renderers);\n  var processor = unified().use(parse).use(props.plugins || []); // eslint-disable-next-line no-sync\n\n  var tree = processor.runSync(processor.parse(src));\n  var renderProps = xtend(props, {\n    renderers: renderers,\n    definitions: getDefinitions(tree)\n  });\n  determineAstToReactTransforms(props).forEach(function (transform) {\n    tree = transform(tree, renderProps);\n  });\n  return tree;\n};\n\nfunction determineAstToReactTransforms(props) {\n  var transforms = [wrapTableRows, addListMetadata()];\n  var disallowedTypes = props.disallowedTypes;\n\n  if (props.allowedTypes) {\n    disallowedTypes = allTypes.filter(function (type) {\n      return type !== 'root' && props.allowedTypes.indexOf(type) === -1;\n    });\n  }\n\n  var removalMethod = props.unwrapDisallowed ? 'unwrap' : 'remove';\n\n  if (disallowedTypes && disallowedTypes.length > 0) {\n    transforms.push(disallowNode.ofType(disallowedTypes, removalMethod));\n  }\n\n  if (props.allowNode) {\n    transforms.push(disallowNode.ifNotMatch(props.allowNode, removalMethod));\n  } // To do in next major: remove `escapeHtml`.\n\n\n  var renderHtml = (props.allowDangerousHtml || props.escapeHtml === false) && !props.skipHtml;\n  var hasHtmlParser = (props.astPlugins || []).some(function (transform) {\n    return transform.identity === symbols.HtmlParser;\n  });\n\n  if (renderHtml && !hasHtmlParser) {\n    transforms.push(naiveHtml);\n  }\n\n  if (props.astPlugins) {\n    transforms = transforms.concat(props.astPlugins);\n  } // Add the final transform to turn everything into React.\n\n\n  transforms.push(astToReact);\n  return transforms;\n}\n\nReactMarkdown.defaultProps = {\n  transformLinkUri: uriTransformer\n};\nReactMarkdown.propTypes = {\n  className: PropTypes.string,\n  source: PropTypes.string,\n  children: PropTypes.string,\n  sourcePos: PropTypes.bool,\n  rawSourcePos: PropTypes.bool,\n  escapeHtml: PropTypes.bool,\n  allowDangerousHtml: PropTypes.bool,\n  skipHtml: PropTypes.bool,\n  allowNode: PropTypes.func,\n  allowedTypes: PropTypes.arrayOf(PropTypes.oneOf(allTypes)),\n  disallowedTypes: PropTypes.arrayOf(PropTypes.oneOf(allTypes)),\n  transformLinkUri: PropTypes.oneOfType([PropTypes.func, PropTypes.bool]),\n  linkTarget: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  transformImageUri: PropTypes.func,\n  astPlugins: PropTypes.arrayOf(PropTypes.func),\n  unwrapDisallowed: PropTypes.bool,\n  renderers: PropTypes.object,\n  plugins: PropTypes.array\n};\nReactMarkdown.types = allTypes;\nReactMarkdown.renderers = defaultRenderers;\nReactMarkdown.uriTransformer = uriTransformer;\nmodule.exports = ReactMarkdown;"]},"metadata":{},"sourceType":"script"}