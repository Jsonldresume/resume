{"ast":null,"code":"'use strict';\n\nvar markdownLineEnding = require('../character/markdown-line-ending.js');\n\nvar factorySpace = require('./factory-space.js');\n\nvar prefixSize = require('../util/prefix-size.js');\n\nvar markdownLineEndingOrSpace = require('../character/markdown-line-ending-or-space.js');\n\nvar codeFenced = {\n  name: 'codeFenced',\n  tokenize: tokenizeCodeFenced,\n  concrete: true\n};\n\nfunction tokenizeCodeFenced(effects, ok, nok) {\n  var self = this;\n  var closingFenceConstruct = {\n    tokenize: tokenizeClosingFence,\n    partial: true\n  };\n  var initialPrefix = prefixSize(this.events, 'linePrefix');\n  var sizeOpen = 0;\n  var marker;\n  return start;\n\n  function start(code) {\n    effects.enter('codeFenced');\n    effects.enter('codeFencedFence');\n    effects.enter('codeFencedFenceSequence');\n    marker = code;\n    return sequenceOpen(code);\n  }\n\n  function sequenceOpen(code) {\n    if (code === marker) {\n      effects.consume(code);\n      sizeOpen++;\n      return sequenceOpen;\n    }\n\n    effects.exit('codeFencedFenceSequence');\n    return sizeOpen < 3 ? nok(code) : factorySpace(effects, infoOpen, 'whitespace')(code);\n  }\n\n  function infoOpen(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return openAfter(code);\n    }\n\n    effects.enter('codeFencedFenceInfo');\n    effects.enter('chunkString', {\n      contentType: 'string'\n    });\n    return info(code);\n  }\n\n  function info(code) {\n    if (code === null || markdownLineEndingOrSpace(code)) {\n      effects.exit('chunkString');\n      effects.exit('codeFencedFenceInfo');\n      return factorySpace(effects, infoAfter, 'whitespace')(code);\n    }\n\n    if (code === 96 && code === marker) return nok(code);\n    effects.consume(code);\n    return info;\n  }\n\n  function infoAfter(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return openAfter(code);\n    }\n\n    effects.enter('codeFencedFenceMeta');\n    effects.enter('chunkString', {\n      contentType: 'string'\n    });\n    return meta(code);\n  }\n\n  function meta(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString');\n      effects.exit('codeFencedFenceMeta');\n      return openAfter(code);\n    }\n\n    if (code === 96 && code === marker) return nok(code);\n    effects.consume(code);\n    return meta;\n  }\n\n  function openAfter(code) {\n    effects.exit('codeFencedFence');\n    return self.interrupt ? ok(code) : content(code);\n  }\n\n  function content(code) {\n    if (code === null) {\n      return after(code);\n    }\n\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding');\n      effects.consume(code);\n      effects.exit('lineEnding');\n      return effects.attempt(closingFenceConstruct, after, initialPrefix ? factorySpace(effects, content, 'linePrefix', initialPrefix + 1) : content);\n    }\n\n    effects.enter('codeFlowValue');\n    return contentContinue(code);\n  }\n\n  function contentContinue(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('codeFlowValue');\n      return content(code);\n    }\n\n    effects.consume(code);\n    return contentContinue;\n  }\n\n  function after(code) {\n    effects.exit('codeFenced');\n    return ok(code);\n  }\n\n  function tokenizeClosingFence(effects, ok, nok) {\n    var size = 0;\n    return factorySpace(effects, closingSequenceStart, 'linePrefix', this.parser.constructs.disable.null.indexOf('codeIndented') > -1 ? undefined : 4);\n\n    function closingSequenceStart(code) {\n      effects.enter('codeFencedFence');\n      effects.enter('codeFencedFenceSequence');\n      return closingSequence(code);\n    }\n\n    function closingSequence(code) {\n      if (code === marker) {\n        effects.consume(code);\n        size++;\n        return closingSequence;\n      }\n\n      if (size < sizeOpen) return nok(code);\n      effects.exit('codeFencedFenceSequence');\n      return factorySpace(effects, closingSequenceEnd, 'whitespace')(code);\n    }\n\n    function closingSequenceEnd(code) {\n      if (code === null || markdownLineEnding(code)) {\n        effects.exit('codeFencedFence');\n        return ok(code);\n      }\n\n      return nok(code);\n    }\n  }\n}\n\nmodule.exports = codeFenced;","map":{"version":3,"sources":["D:/github/jsonldresume/resume/node_modules/micromark/dist/tokenize/code-fenced.js"],"names":["markdownLineEnding","require","factorySpace","prefixSize","markdownLineEndingOrSpace","codeFenced","name","tokenize","tokenizeCodeFenced","concrete","effects","ok","nok","self","closingFenceConstruct","tokenizeClosingFence","partial","initialPrefix","events","sizeOpen","marker","start","code","enter","sequenceOpen","consume","exit","infoOpen","openAfter","contentType","info","infoAfter","meta","interrupt","content","after","attempt","contentContinue","size","closingSequenceStart","parser","constructs","disable","null","indexOf","undefined","closingSequence","closingSequenceEnd","module","exports"],"mappings":"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","sourcesContent":["'use strict'\n\nvar markdownLineEnding = require('../character/markdown-line-ending.js')\nvar factorySpace = require('./factory-space.js')\nvar prefixSize = require('../util/prefix-size.js')\nvar markdownLineEndingOrSpace = require('../character/markdown-line-ending-or-space.js')\n\nvar codeFenced = {\n  name: 'codeFenced',\n  tokenize: tokenizeCodeFenced,\n  concrete: true\n}\n\nfunction tokenizeCodeFenced(effects, ok, nok) {\n  var self = this\n  var closingFenceConstruct = {\n    tokenize: tokenizeClosingFence,\n    partial: true\n  }\n  var initialPrefix = prefixSize(this.events, 'linePrefix')\n  var sizeOpen = 0\n  var marker\n  return start\n\n  function start(code) {\n    effects.enter('codeFenced')\n    effects.enter('codeFencedFence')\n    effects.enter('codeFencedFenceSequence')\n    marker = code\n    return sequenceOpen(code)\n  }\n\n  function sequenceOpen(code) {\n    if (code === marker) {\n      effects.consume(code)\n      sizeOpen++\n      return sequenceOpen\n    }\n\n    effects.exit('codeFencedFenceSequence')\n    return sizeOpen < 3\n      ? nok(code)\n      : factorySpace(effects, infoOpen, 'whitespace')(code)\n  }\n\n  function infoOpen(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return openAfter(code)\n    }\n\n    effects.enter('codeFencedFenceInfo')\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return info(code)\n  }\n\n  function info(code) {\n    if (code === null || markdownLineEndingOrSpace(code)) {\n      effects.exit('chunkString')\n      effects.exit('codeFencedFenceInfo')\n      return factorySpace(effects, infoAfter, 'whitespace')(code)\n    }\n\n    if (code === 96 && code === marker) return nok(code)\n    effects.consume(code)\n    return info\n  }\n\n  function infoAfter(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return openAfter(code)\n    }\n\n    effects.enter('codeFencedFenceMeta')\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return meta(code)\n  }\n\n  function meta(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString')\n      effects.exit('codeFencedFenceMeta')\n      return openAfter(code)\n    }\n\n    if (code === 96 && code === marker) return nok(code)\n    effects.consume(code)\n    return meta\n  }\n\n  function openAfter(code) {\n    effects.exit('codeFencedFence')\n    return self.interrupt ? ok(code) : content(code)\n  }\n\n  function content(code) {\n    if (code === null) {\n      return after(code)\n    }\n\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return effects.attempt(\n        closingFenceConstruct,\n        after,\n        initialPrefix\n          ? factorySpace(effects, content, 'linePrefix', initialPrefix + 1)\n          : content\n      )\n    }\n\n    effects.enter('codeFlowValue')\n    return contentContinue(code)\n  }\n\n  function contentContinue(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('codeFlowValue')\n      return content(code)\n    }\n\n    effects.consume(code)\n    return contentContinue\n  }\n\n  function after(code) {\n    effects.exit('codeFenced')\n    return ok(code)\n  }\n\n  function tokenizeClosingFence(effects, ok, nok) {\n    var size = 0\n    return factorySpace(\n      effects,\n      closingSequenceStart,\n      'linePrefix',\n      this.parser.constructs.disable.null.indexOf('codeIndented') > -1\n        ? undefined\n        : 4\n    )\n\n    function closingSequenceStart(code) {\n      effects.enter('codeFencedFence')\n      effects.enter('codeFencedFenceSequence')\n      return closingSequence(code)\n    }\n\n    function closingSequence(code) {\n      if (code === marker) {\n        effects.consume(code)\n        size++\n        return closingSequence\n      }\n\n      if (size < sizeOpen) return nok(code)\n      effects.exit('codeFencedFenceSequence')\n      return factorySpace(effects, closingSequenceEnd, 'whitespace')(code)\n    }\n\n    function closingSequenceEnd(code) {\n      if (code === null || markdownLineEnding(code)) {\n        effects.exit('codeFencedFence')\n        return ok(code)\n      }\n\n      return nok(code)\n    }\n  }\n}\n\nmodule.exports = codeFenced\n"]},"metadata":{},"sourceType":"script"}