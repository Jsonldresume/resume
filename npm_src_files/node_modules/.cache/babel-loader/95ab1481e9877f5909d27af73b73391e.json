{"ast":null,"code":"'use strict';\n\nvar markdownLineEnding = require('../character/markdown-line-ending.js');\n\nvar markdownSpace = require('../character/markdown-space.js');\n\nvar factorySpace = require('./factory-space.js');\n\nfunction whitespaceFactory(effects, ok) {\n  var seen;\n  return start;\n\n  function start(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding');\n      effects.consume(code);\n      effects.exit('lineEnding');\n      seen = true;\n      return start;\n    }\n\n    if (markdownSpace(code)) {\n      return factorySpace(effects, start, seen ? 'linePrefix' : 'lineSuffix')(code);\n    }\n\n    return ok(code);\n  }\n}\n\nmodule.exports = whitespaceFactory;","map":{"version":3,"sources":["D:/github/jsonldresume/my-app/node_modules/micromark/dist/tokenize/factory-whitespace.js"],"names":["markdownLineEnding","require","markdownSpace","factorySpace","whitespaceFactory","effects","ok","seen","start","code","enter","consume","exit","module","exports"],"mappings":"AAAA;;AAEA,IAAIA,kBAAkB,GAAGC,OAAO,CAAC,sCAAD,CAAhC;;AACA,IAAIC,aAAa,GAAGD,OAAO,CAAC,gCAAD,CAA3B;;AACA,IAAIE,YAAY,GAAGF,OAAO,CAAC,oBAAD,CAA1B;;AAEA,SAASG,iBAAT,CAA2BC,OAA3B,EAAoCC,EAApC,EAAwC;AACtC,MAAIC,IAAJ;AACA,SAAOC,KAAP;;AAEA,WAASA,KAAT,CAAeC,IAAf,EAAqB;AACnB,QAAIT,kBAAkB,CAACS,IAAD,CAAtB,EAA8B;AAC5BJ,MAAAA,OAAO,CAACK,KAAR,CAAc,YAAd;AACAL,MAAAA,OAAO,CAACM,OAAR,CAAgBF,IAAhB;AACAJ,MAAAA,OAAO,CAACO,IAAR,CAAa,YAAb;AACAL,MAAAA,IAAI,GAAG,IAAP;AACA,aAAOC,KAAP;AACD;;AAED,QAAIN,aAAa,CAACO,IAAD,CAAjB,EAAyB;AACvB,aAAON,YAAY,CACjBE,OADiB,EAEjBG,KAFiB,EAGjBD,IAAI,GAAG,YAAH,GAAkB,YAHL,CAAZ,CAILE,IAJK,CAAP;AAKD;;AAED,WAAOH,EAAE,CAACG,IAAD,CAAT;AACD;AACF;;AAEDI,MAAM,CAACC,OAAP,GAAiBV,iBAAjB","sourcesContent":["'use strict'\n\nvar markdownLineEnding = require('../character/markdown-line-ending.js')\nvar markdownSpace = require('../character/markdown-space.js')\nvar factorySpace = require('./factory-space.js')\n\nfunction whitespaceFactory(effects, ok) {\n  var seen\n  return start\n\n  function start(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      seen = true\n      return start\n    }\n\n    if (markdownSpace(code)) {\n      return factorySpace(\n        effects,\n        start,\n        seen ? 'linePrefix' : 'lineSuffix'\n      )(code)\n    }\n\n    return ok(code)\n  }\n}\n\nmodule.exports = whitespaceFactory\n"]},"metadata":{},"sourceType":"script"}