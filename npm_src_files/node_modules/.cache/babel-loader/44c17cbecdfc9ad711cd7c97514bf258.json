{"ast":null,"code":"/*! @license DOMPurify | (c) Cure53 and other contributors | Released under the Apache license 2.0 and Mozilla Public License 2.0 | github.com/cure53/DOMPurify/blob/2.2.2/LICENSE */\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() : typeof define === 'function' && define.amd ? define(factory) : (global = global || self, global.DOMPurify = factory());\n})(this, function () {\n  'use strict';\n\n  function _toConsumableArray(arr) {\n    if (Array.isArray(arr)) {\n      for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {\n        arr2[i] = arr[i];\n      }\n\n      return arr2;\n    } else {\n      return Array.from(arr);\n    }\n  }\n\n  var hasOwnProperty = Object.hasOwnProperty,\n      setPrototypeOf = Object.setPrototypeOf,\n      isFrozen = Object.isFrozen,\n      getPrototypeOf = Object.getPrototypeOf,\n      getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;\n  var freeze = Object.freeze,\n      seal = Object.seal,\n      create = Object.create; // eslint-disable-line import/no-mutable-exports\n\n  var _ref = typeof Reflect !== 'undefined' && Reflect,\n      apply = _ref.apply,\n      construct = _ref.construct;\n\n  if (!apply) {\n    apply = function apply(fun, thisValue, args) {\n      return fun.apply(thisValue, args);\n    };\n  }\n\n  if (!freeze) {\n    freeze = function freeze(x) {\n      return x;\n    };\n  }\n\n  if (!seal) {\n    seal = function seal(x) {\n      return x;\n    };\n  }\n\n  if (!construct) {\n    construct = function construct(Func, args) {\n      return new (Function.prototype.bind.apply(Func, [null].concat(_toConsumableArray(args))))();\n    };\n  }\n\n  var arrayForEach = unapply(Array.prototype.forEach);\n  var arrayPop = unapply(Array.prototype.pop);\n  var arrayPush = unapply(Array.prototype.push);\n  var stringToLowerCase = unapply(String.prototype.toLowerCase);\n  var stringMatch = unapply(String.prototype.match);\n  var stringReplace = unapply(String.prototype.replace);\n  var stringIndexOf = unapply(String.prototype.indexOf);\n  var stringTrim = unapply(String.prototype.trim);\n  var regExpTest = unapply(RegExp.prototype.test);\n  var typeErrorCreate = unconstruct(TypeError);\n\n  function unapply(func) {\n    return function (thisArg) {\n      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      return apply(func, thisArg, args);\n    };\n  }\n\n  function unconstruct(func) {\n    return function () {\n      for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n\n      return construct(func, args);\n    };\n  }\n  /* Add properties to a lookup table */\n\n\n  function addToSet(set, array) {\n    if (setPrototypeOf) {\n      // Make 'in' and truthy checks like Boolean(set.constructor)\n      // independent of any properties defined on Object.prototype.\n      // Prevent prototype setters from intercepting set as a this value.\n      setPrototypeOf(set, null);\n    }\n\n    var l = array.length;\n\n    while (l--) {\n      var element = array[l];\n\n      if (typeof element === 'string') {\n        var lcElement = stringToLowerCase(element);\n\n        if (lcElement !== element) {\n          // Config presets (e.g. tags.js, attrs.js) are immutable.\n          if (!isFrozen(array)) {\n            array[l] = lcElement;\n          }\n\n          element = lcElement;\n        }\n      }\n\n      set[element] = true;\n    }\n\n    return set;\n  }\n  /* Shallow clone an object */\n\n\n  function clone(object) {\n    var newObject = create(null);\n    var property = void 0;\n\n    for (property in object) {\n      if (apply(hasOwnProperty, object, [property])) {\n        newObject[property] = object[property];\n      }\n    }\n\n    return newObject;\n  }\n  /* IE10 doesn't support __lookupGetter__ so lets'\n   * simulate it. It also automatically checks\n   * if the prop is function or getter and behaves\n   * accordingly. */\n\n\n  function lookupGetter(object, prop) {\n    while (object !== null) {\n      var desc = getOwnPropertyDescriptor(object, prop);\n\n      if (desc) {\n        if (desc.get) {\n          return unapply(desc.get);\n        }\n\n        if (typeof desc.value === 'function') {\n          return unapply(desc.value);\n        }\n      }\n\n      object = getPrototypeOf(object);\n    }\n\n    return null;\n  }\n\n  var html = freeze(['a', 'abbr', 'acronym', 'address', 'area', 'article', 'aside', 'audio', 'b', 'bdi', 'bdo', 'big', 'blink', 'blockquote', 'body', 'br', 'button', 'canvas', 'caption', 'center', 'cite', 'code', 'col', 'colgroup', 'content', 'data', 'datalist', 'dd', 'decorator', 'del', 'details', 'dfn', 'dialog', 'dir', 'div', 'dl', 'dt', 'element', 'em', 'fieldset', 'figcaption', 'figure', 'font', 'footer', 'form', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'i', 'img', 'input', 'ins', 'kbd', 'label', 'legend', 'li', 'main', 'map', 'mark', 'marquee', 'menu', 'menuitem', 'meter', 'nav', 'nobr', 'ol', 'optgroup', 'option', 'output', 'p', 'picture', 'pre', 'progress', 'q', 'rp', 'rt', 'ruby', 's', 'samp', 'section', 'select', 'shadow', 'small', 'source', 'spacer', 'span', 'strike', 'strong', 'style', 'sub', 'summary', 'sup', 'table', 'tbody', 'td', 'template', 'textarea', 'tfoot', 'th', 'thead', 'time', 'tr', 'track', 'tt', 'u', 'ul', 'var', 'video', 'wbr']); // SVG\n\n  var svg = freeze(['svg', 'a', 'altglyph', 'altglyphdef', 'altglyphitem', 'animatecolor', 'animatemotion', 'animatetransform', 'circle', 'clippath', 'defs', 'desc', 'ellipse', 'filter', 'font', 'g', 'glyph', 'glyphref', 'hkern', 'image', 'line', 'lineargradient', 'marker', 'mask', 'metadata', 'mpath', 'path', 'pattern', 'polygon', 'polyline', 'radialgradient', 'rect', 'stop', 'style', 'switch', 'symbol', 'text', 'textpath', 'title', 'tref', 'tspan', 'view', 'vkern']);\n  var svgFilters = freeze(['feBlend', 'feColorMatrix', 'feComponentTransfer', 'feComposite', 'feConvolveMatrix', 'feDiffuseLighting', 'feDisplacementMap', 'feDistantLight', 'feFlood', 'feFuncA', 'feFuncB', 'feFuncG', 'feFuncR', 'feGaussianBlur', 'feMerge', 'feMergeNode', 'feMorphology', 'feOffset', 'fePointLight', 'feSpecularLighting', 'feSpotLight', 'feTile', 'feTurbulence']); // List of SVG elements that are disallowed by default.\n  // We still need to know them so that we can do namespace\n  // checks properly in case one wants to add them to\n  // allow-list.\n\n  var svgDisallowed = freeze(['animate', 'color-profile', 'cursor', 'discard', 'fedropshadow', 'feimage', 'font-face', 'font-face-format', 'font-face-name', 'font-face-src', 'font-face-uri', 'foreignobject', 'hatch', 'hatchpath', 'mesh', 'meshgradient', 'meshpatch', 'meshrow', 'missing-glyph', 'script', 'set', 'solidcolor', 'unknown', 'use']);\n  var mathMl = freeze(['math', 'menclose', 'merror', 'mfenced', 'mfrac', 'mglyph', 'mi', 'mlabeledtr', 'mmultiscripts', 'mn', 'mo', 'mover', 'mpadded', 'mphantom', 'mroot', 'mrow', 'ms', 'mspace', 'msqrt', 'mstyle', 'msub', 'msup', 'msubsup', 'mtable', 'mtd', 'mtext', 'mtr', 'munder', 'munderover']); // Similarly to SVG, we want to know all MathML elements,\n  // even those that we disallow by default.\n\n  var mathMlDisallowed = freeze(['maction', 'maligngroup', 'malignmark', 'mlongdiv', 'mscarries', 'mscarry', 'msgroup', 'mstack', 'msline', 'msrow', 'semantics', 'annotation', 'annotation-xml', 'mprescripts', 'none']);\n  var text = freeze(['#text']);\n  var html$1 = freeze(['accept', 'action', 'align', 'alt', 'autocapitalize', 'autocomplete', 'autopictureinpicture', 'autoplay', 'background', 'bgcolor', 'border', 'capture', 'cellpadding', 'cellspacing', 'checked', 'cite', 'class', 'clear', 'color', 'cols', 'colspan', 'controls', 'controlslist', 'coords', 'crossorigin', 'datetime', 'decoding', 'default', 'dir', 'disabled', 'disablepictureinpicture', 'disableremoteplayback', 'download', 'draggable', 'enctype', 'enterkeyhint', 'face', 'for', 'headers', 'height', 'hidden', 'high', 'href', 'hreflang', 'id', 'inputmode', 'integrity', 'ismap', 'kind', 'label', 'lang', 'list', 'loading', 'loop', 'low', 'max', 'maxlength', 'media', 'method', 'min', 'minlength', 'multiple', 'muted', 'name', 'noshade', 'novalidate', 'nowrap', 'open', 'optimum', 'pattern', 'placeholder', 'playsinline', 'poster', 'preload', 'pubdate', 'radiogroup', 'readonly', 'rel', 'required', 'rev', 'reversed', 'role', 'rows', 'rowspan', 'spellcheck', 'scope', 'selected', 'shape', 'size', 'sizes', 'span', 'srclang', 'start', 'src', 'srcset', 'step', 'style', 'summary', 'tabindex', 'title', 'translate', 'type', 'usemap', 'valign', 'value', 'width', 'xmlns']);\n  var svg$1 = freeze(['accent-height', 'accumulate', 'additive', 'alignment-baseline', 'ascent', 'attributename', 'attributetype', 'azimuth', 'basefrequency', 'baseline-shift', 'begin', 'bias', 'by', 'class', 'clip', 'clippathunits', 'clip-path', 'clip-rule', 'color', 'color-interpolation', 'color-interpolation-filters', 'color-profile', 'color-rendering', 'cx', 'cy', 'd', 'dx', 'dy', 'diffuseconstant', 'direction', 'display', 'divisor', 'dur', 'edgemode', 'elevation', 'end', 'fill', 'fill-opacity', 'fill-rule', 'filter', 'filterunits', 'flood-color', 'flood-opacity', 'font-family', 'font-size', 'font-size-adjust', 'font-stretch', 'font-style', 'font-variant', 'font-weight', 'fx', 'fy', 'g1', 'g2', 'glyph-name', 'glyphref', 'gradientunits', 'gradienttransform', 'height', 'href', 'id', 'image-rendering', 'in', 'in2', 'k', 'k1', 'k2', 'k3', 'k4', 'kerning', 'keypoints', 'keysplines', 'keytimes', 'lang', 'lengthadjust', 'letter-spacing', 'kernelmatrix', 'kernelunitlength', 'lighting-color', 'local', 'marker-end', 'marker-mid', 'marker-start', 'markerheight', 'markerunits', 'markerwidth', 'maskcontentunits', 'maskunits', 'max', 'mask', 'media', 'method', 'mode', 'min', 'name', 'numoctaves', 'offset', 'operator', 'opacity', 'order', 'orient', 'orientation', 'origin', 'overflow', 'paint-order', 'path', 'pathlength', 'patterncontentunits', 'patterntransform', 'patternunits', 'points', 'preservealpha', 'preserveaspectratio', 'primitiveunits', 'r', 'rx', 'ry', 'radius', 'refx', 'refy', 'repeatcount', 'repeatdur', 'restart', 'result', 'rotate', 'scale', 'seed', 'shape-rendering', 'specularconstant', 'specularexponent', 'spreadmethod', 'startoffset', 'stddeviation', 'stitchtiles', 'stop-color', 'stop-opacity', 'stroke-dasharray', 'stroke-dashoffset', 'stroke-linecap', 'stroke-linejoin', 'stroke-miterlimit', 'stroke-opacity', 'stroke', 'stroke-width', 'style', 'surfacescale', 'systemlanguage', 'tabindex', 'targetx', 'targety', 'transform', 'text-anchor', 'text-decoration', 'text-rendering', 'textlength', 'type', 'u1', 'u2', 'unicode', 'values', 'viewbox', 'visibility', 'version', 'vert-adv-y', 'vert-origin-x', 'vert-origin-y', 'width', 'word-spacing', 'wrap', 'writing-mode', 'xchannelselector', 'ychannelselector', 'x', 'x1', 'x2', 'xmlns', 'y', 'y1', 'y2', 'z', 'zoomandpan']);\n  var mathMl$1 = freeze(['accent', 'accentunder', 'align', 'bevelled', 'close', 'columnsalign', 'columnlines', 'columnspan', 'denomalign', 'depth', 'dir', 'display', 'displaystyle', 'encoding', 'fence', 'frame', 'height', 'href', 'id', 'largeop', 'length', 'linethickness', 'lspace', 'lquote', 'mathbackground', 'mathcolor', 'mathsize', 'mathvariant', 'maxsize', 'minsize', 'movablelimits', 'notation', 'numalign', 'open', 'rowalign', 'rowlines', 'rowspacing', 'rowspan', 'rspace', 'rquote', 'scriptlevel', 'scriptminsize', 'scriptsizemultiplier', 'selection', 'separator', 'separators', 'stretchy', 'subscriptshift', 'supscriptshift', 'symmetric', 'voffset', 'width', 'xmlns']);\n  var xml = freeze(['xlink:href', 'xml:id', 'xlink:title', 'xml:space', 'xmlns:xlink']); // eslint-disable-next-line unicorn/better-regex\n\n  var MUSTACHE_EXPR = seal(/\\{\\{[\\s\\S]*|[\\s\\S]*\\}\\}/gm); // Specify template detection regex for SAFE_FOR_TEMPLATES mode\n\n  var ERB_EXPR = seal(/<%[\\s\\S]*|[\\s\\S]*%>/gm);\n  var DATA_ATTR = seal(/^data-[\\-\\w.\\u00B7-\\uFFFF]/); // eslint-disable-line no-useless-escape\n\n  var ARIA_ATTR = seal(/^aria-[\\-\\w]+$/); // eslint-disable-line no-useless-escape\n\n  var IS_ALLOWED_URI = seal(/^(?:(?:(?:f|ht)tps?|mailto|tel|callto|cid|xmpp):|[^a-z]|[a-z+.\\-]+(?:[^a-z+.\\-:]|$))/i // eslint-disable-line no-useless-escape\n  );\n  var IS_SCRIPT_OR_DATA = seal(/^(?:\\w+script|data):/i);\n  var ATTR_WHITESPACE = seal(/[\\u0000-\\u0020\\u00A0\\u1680\\u180E\\u2000-\\u2029\\u205F\\u3000]/g // eslint-disable-line no-control-regex\n  );\n\n  var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  };\n\n  function _toConsumableArray$1(arr) {\n    if (Array.isArray(arr)) {\n      for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {\n        arr2[i] = arr[i];\n      }\n\n      return arr2;\n    } else {\n      return Array.from(arr);\n    }\n  }\n\n  var getGlobal = function getGlobal() {\n    return typeof window === 'undefined' ? null : window;\n  };\n  /**\n   * Creates a no-op policy for internal use only.\n   * Don't export this function outside this module!\n   * @param {?TrustedTypePolicyFactory} trustedTypes The policy factory.\n   * @param {Document} document The document object (to determine policy name suffix)\n   * @return {?TrustedTypePolicy} The policy created (or null, if Trusted Types\n   * are not supported).\n   */\n\n\n  var _createTrustedTypesPolicy = function _createTrustedTypesPolicy(trustedTypes, document) {\n    if ((typeof trustedTypes === 'undefined' ? 'undefined' : _typeof(trustedTypes)) !== 'object' || typeof trustedTypes.createPolicy !== 'function') {\n      return null;\n    } // Allow the callers to control the unique policy name\n    // by adding a data-tt-policy-suffix to the script element with the DOMPurify.\n    // Policy creation with duplicate names throws in Trusted Types.\n\n\n    var suffix = null;\n    var ATTR_NAME = 'data-tt-policy-suffix';\n\n    if (document.currentScript && document.currentScript.hasAttribute(ATTR_NAME)) {\n      suffix = document.currentScript.getAttribute(ATTR_NAME);\n    }\n\n    var policyName = 'dompurify' + (suffix ? '#' + suffix : '');\n\n    try {\n      return trustedTypes.createPolicy(policyName, {\n        createHTML: function createHTML(html$$1) {\n          return html$$1;\n        }\n      });\n    } catch (_) {\n      // Policy creation failed (most likely another DOMPurify script has\n      // already run). Skip creating the policy, as this will only cause errors\n      // if TT are enforced.\n      console.warn('TrustedTypes policy ' + policyName + ' could not be created.');\n      return null;\n    }\n  };\n\n  function createDOMPurify() {\n    var window = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : getGlobal();\n\n    var DOMPurify = function DOMPurify(root) {\n      return createDOMPurify(root);\n    };\n    /**\n     * Version label, exposed for easier checks\n     * if DOMPurify is up to date or not\n     */\n\n\n    DOMPurify.version = '2.2.6';\n    /**\n     * Array of elements that DOMPurify removed during sanitation.\n     * Empty if nothing was removed.\n     */\n\n    DOMPurify.removed = [];\n\n    if (!window || !window.document || window.document.nodeType !== 9) {\n      // Not running in a browser, provide a factory function\n      // so that you can pass your own Window\n      DOMPurify.isSupported = false;\n      return DOMPurify;\n    }\n\n    var originalDocument = window.document;\n    var document = window.document;\n    var DocumentFragment = window.DocumentFragment,\n        HTMLTemplateElement = window.HTMLTemplateElement,\n        Node = window.Node,\n        Element = window.Element,\n        NodeFilter = window.NodeFilter,\n        _window$NamedNodeMap = window.NamedNodeMap,\n        NamedNodeMap = _window$NamedNodeMap === undefined ? window.NamedNodeMap || window.MozNamedAttrMap : _window$NamedNodeMap,\n        Text = window.Text,\n        Comment = window.Comment,\n        DOMParser = window.DOMParser,\n        trustedTypes = window.trustedTypes;\n    var ElementPrototype = Element.prototype;\n    var cloneNode = lookupGetter(ElementPrototype, 'cloneNode');\n    var getNextSibling = lookupGetter(ElementPrototype, 'nextSibling');\n    var getChildNodes = lookupGetter(ElementPrototype, 'childNodes');\n    var getParentNode = lookupGetter(ElementPrototype, 'parentNode'); // As per issue #47, the web-components registry is inherited by a\n    // new document created via createHTMLDocument. As per the spec\n    // (http://w3c.github.io/webcomponents/spec/custom/#creating-and-passing-registries)\n    // a new empty registry is used when creating a template contents owner\n    // document, so we use that as our parent document to ensure nothing\n    // is inherited.\n\n    if (typeof HTMLTemplateElement === 'function') {\n      var template = document.createElement('template');\n\n      if (template.content && template.content.ownerDocument) {\n        document = template.content.ownerDocument;\n      }\n    }\n\n    var trustedTypesPolicy = _createTrustedTypesPolicy(trustedTypes, originalDocument);\n\n    var emptyHTML = trustedTypesPolicy && RETURN_TRUSTED_TYPE ? trustedTypesPolicy.createHTML('') : '';\n    var _document = document,\n        implementation = _document.implementation,\n        createNodeIterator = _document.createNodeIterator,\n        getElementsByTagName = _document.getElementsByTagName,\n        createDocumentFragment = _document.createDocumentFragment;\n    var importNode = originalDocument.importNode;\n    var documentMode = {};\n\n    try {\n      documentMode = clone(document).documentMode ? document.documentMode : {};\n    } catch (_) {}\n\n    var hooks = {};\n    /**\n     * Expose whether this browser supports running the full DOMPurify.\n     */\n\n    DOMPurify.isSupported = implementation && typeof implementation.createHTMLDocument !== 'undefined' && documentMode !== 9;\n    var MUSTACHE_EXPR$$1 = MUSTACHE_EXPR,\n        ERB_EXPR$$1 = ERB_EXPR,\n        DATA_ATTR$$1 = DATA_ATTR,\n        ARIA_ATTR$$1 = ARIA_ATTR,\n        IS_SCRIPT_OR_DATA$$1 = IS_SCRIPT_OR_DATA,\n        ATTR_WHITESPACE$$1 = ATTR_WHITESPACE;\n    var IS_ALLOWED_URI$$1 = IS_ALLOWED_URI;\n    /**\n     * We consider the elements and attributes below to be safe. Ideally\n     * don't add any new ones but feel free to remove unwanted ones.\n     */\n\n    /* allowed element names */\n\n    var ALLOWED_TAGS = null;\n    var DEFAULT_ALLOWED_TAGS = addToSet({}, [].concat(_toConsumableArray$1(html), _toConsumableArray$1(svg), _toConsumableArray$1(svgFilters), _toConsumableArray$1(mathMl), _toConsumableArray$1(text)));\n    /* Allowed attribute names */\n\n    var ALLOWED_ATTR = null;\n    var DEFAULT_ALLOWED_ATTR = addToSet({}, [].concat(_toConsumableArray$1(html$1), _toConsumableArray$1(svg$1), _toConsumableArray$1(mathMl$1), _toConsumableArray$1(xml)));\n    /* Explicitly forbidden tags (overrides ALLOWED_TAGS/ADD_TAGS) */\n\n    var FORBID_TAGS = null;\n    /* Explicitly forbidden attributes (overrides ALLOWED_ATTR/ADD_ATTR) */\n\n    var FORBID_ATTR = null;\n    /* Decide if ARIA attributes are okay */\n\n    var ALLOW_ARIA_ATTR = true;\n    /* Decide if custom data attributes are okay */\n\n    var ALLOW_DATA_ATTR = true;\n    /* Decide if unknown protocols are okay */\n\n    var ALLOW_UNKNOWN_PROTOCOLS = false;\n    /* Output should be safe for common template engines.\n     * This means, DOMPurify removes data attributes, mustaches and ERB\n     */\n\n    var SAFE_FOR_TEMPLATES = false;\n    /* Decide if document with <html>... should be returned */\n\n    var WHOLE_DOCUMENT = false;\n    /* Track whether config is already set on this instance of DOMPurify. */\n\n    var SET_CONFIG = false;\n    /* Decide if all elements (e.g. style, script) must be children of\n     * document.body. By default, browsers might move them to document.head */\n\n    var FORCE_BODY = false;\n    /* Decide if a DOM `HTMLBodyElement` should be returned, instead of a html\n     * string (or a TrustedHTML object if Trusted Types are supported).\n     * If `WHOLE_DOCUMENT` is enabled a `HTMLHtmlElement` will be returned instead\n     */\n\n    var RETURN_DOM = false;\n    /* Decide if a DOM `DocumentFragment` should be returned, instead of a html\n     * string  (or a TrustedHTML object if Trusted Types are supported) */\n\n    var RETURN_DOM_FRAGMENT = false;\n    /* If `RETURN_DOM` or `RETURN_DOM_FRAGMENT` is enabled, decide if the returned DOM\n     * `Node` is imported into the current `Document`. If this flag is not enabled the\n     * `Node` will belong (its ownerDocument) to a fresh `HTMLDocument`, created by\n     * DOMPurify.\n     *\n     * This defaults to `true` starting DOMPurify 2.2.0. Note that setting it to `false`\n     * might cause XSS from attacks hidden in closed shadowroots in case the browser\n     * supports Declarative Shadow: DOM https://web.dev/declarative-shadow-dom/\n     */\n\n    var RETURN_DOM_IMPORT = true;\n    /* Try to return a Trusted Type object instead of a string, return a string in\n     * case Trusted Types are not supported  */\n\n    var RETURN_TRUSTED_TYPE = false;\n    /* Output should be free from DOM clobbering attacks? */\n\n    var SANITIZE_DOM = true;\n    /* Keep element content when removing element? */\n\n    var KEEP_CONTENT = true;\n    /* If a `Node` is passed to sanitize(), then performs sanitization in-place instead\n     * of importing it into a new Document and returning a sanitized copy */\n\n    var IN_PLACE = false;\n    /* Allow usage of profiles like html, svg and mathMl */\n\n    var USE_PROFILES = {};\n    /* Tags to ignore content of when KEEP_CONTENT is true */\n\n    var FORBID_CONTENTS = addToSet({}, ['annotation-xml', 'audio', 'colgroup', 'desc', 'foreignobject', 'head', 'iframe', 'math', 'mi', 'mn', 'mo', 'ms', 'mtext', 'noembed', 'noframes', 'noscript', 'plaintext', 'script', 'style', 'svg', 'template', 'thead', 'title', 'video', 'xmp']);\n    /* Tags that are safe for data: URIs */\n\n    var DATA_URI_TAGS = null;\n    var DEFAULT_DATA_URI_TAGS = addToSet({}, ['audio', 'video', 'img', 'source', 'image', 'track']);\n    /* Attributes safe for values like \"javascript:\" */\n\n    var URI_SAFE_ATTRIBUTES = null;\n    var DEFAULT_URI_SAFE_ATTRIBUTES = addToSet({}, ['alt', 'class', 'for', 'id', 'label', 'name', 'pattern', 'placeholder', 'summary', 'title', 'value', 'style', 'xmlns']);\n    /* Keep a reference to config to pass to hooks */\n\n    var CONFIG = null;\n    /* Ideally, do not touch anything below this line */\n\n    /* ______________________________________________ */\n\n    var formElement = document.createElement('form');\n    /**\n     * _parseConfig\n     *\n     * @param  {Object} cfg optional config literal\n     */\n    // eslint-disable-next-line complexity\n\n    var _parseConfig = function _parseConfig(cfg) {\n      if (CONFIG && CONFIG === cfg) {\n        return;\n      }\n      /* Shield configuration object from tampering */\n\n\n      if (!cfg || (typeof cfg === 'undefined' ? 'undefined' : _typeof(cfg)) !== 'object') {\n        cfg = {};\n      }\n      /* Shield configuration object from prototype pollution */\n\n\n      cfg = clone(cfg);\n      /* Set configuration parameters */\n\n      ALLOWED_TAGS = 'ALLOWED_TAGS' in cfg ? addToSet({}, cfg.ALLOWED_TAGS) : DEFAULT_ALLOWED_TAGS;\n      ALLOWED_ATTR = 'ALLOWED_ATTR' in cfg ? addToSet({}, cfg.ALLOWED_ATTR) : DEFAULT_ALLOWED_ATTR;\n      URI_SAFE_ATTRIBUTES = 'ADD_URI_SAFE_ATTR' in cfg ? addToSet(clone(DEFAULT_URI_SAFE_ATTRIBUTES), cfg.ADD_URI_SAFE_ATTR) : DEFAULT_URI_SAFE_ATTRIBUTES;\n      DATA_URI_TAGS = 'ADD_DATA_URI_TAGS' in cfg ? addToSet(clone(DEFAULT_DATA_URI_TAGS), cfg.ADD_DATA_URI_TAGS) : DEFAULT_DATA_URI_TAGS;\n      FORBID_TAGS = 'FORBID_TAGS' in cfg ? addToSet({}, cfg.FORBID_TAGS) : {};\n      FORBID_ATTR = 'FORBID_ATTR' in cfg ? addToSet({}, cfg.FORBID_ATTR) : {};\n      USE_PROFILES = 'USE_PROFILES' in cfg ? cfg.USE_PROFILES : false;\n      ALLOW_ARIA_ATTR = cfg.ALLOW_ARIA_ATTR !== false; // Default true\n\n      ALLOW_DATA_ATTR = cfg.ALLOW_DATA_ATTR !== false; // Default true\n\n      ALLOW_UNKNOWN_PROTOCOLS = cfg.ALLOW_UNKNOWN_PROTOCOLS || false; // Default false\n\n      SAFE_FOR_TEMPLATES = cfg.SAFE_FOR_TEMPLATES || false; // Default false\n\n      WHOLE_DOCUMENT = cfg.WHOLE_DOCUMENT || false; // Default false\n\n      RETURN_DOM = cfg.RETURN_DOM || false; // Default false\n\n      RETURN_DOM_FRAGMENT = cfg.RETURN_DOM_FRAGMENT || false; // Default false\n\n      RETURN_DOM_IMPORT = cfg.RETURN_DOM_IMPORT !== false; // Default true\n\n      RETURN_TRUSTED_TYPE = cfg.RETURN_TRUSTED_TYPE || false; // Default false\n\n      FORCE_BODY = cfg.FORCE_BODY || false; // Default false\n\n      SANITIZE_DOM = cfg.SANITIZE_DOM !== false; // Default true\n\n      KEEP_CONTENT = cfg.KEEP_CONTENT !== false; // Default true\n\n      IN_PLACE = cfg.IN_PLACE || false; // Default false\n\n      IS_ALLOWED_URI$$1 = cfg.ALLOWED_URI_REGEXP || IS_ALLOWED_URI$$1;\n\n      if (SAFE_FOR_TEMPLATES) {\n        ALLOW_DATA_ATTR = false;\n      }\n\n      if (RETURN_DOM_FRAGMENT) {\n        RETURN_DOM = true;\n      }\n      /* Parse profile info */\n\n\n      if (USE_PROFILES) {\n        ALLOWED_TAGS = addToSet({}, [].concat(_toConsumableArray$1(text)));\n        ALLOWED_ATTR = [];\n\n        if (USE_PROFILES.html === true) {\n          addToSet(ALLOWED_TAGS, html);\n          addToSet(ALLOWED_ATTR, html$1);\n        }\n\n        if (USE_PROFILES.svg === true) {\n          addToSet(ALLOWED_TAGS, svg);\n          addToSet(ALLOWED_ATTR, svg$1);\n          addToSet(ALLOWED_ATTR, xml);\n        }\n\n        if (USE_PROFILES.svgFilters === true) {\n          addToSet(ALLOWED_TAGS, svgFilters);\n          addToSet(ALLOWED_ATTR, svg$1);\n          addToSet(ALLOWED_ATTR, xml);\n        }\n\n        if (USE_PROFILES.mathMl === true) {\n          addToSet(ALLOWED_TAGS, mathMl);\n          addToSet(ALLOWED_ATTR, mathMl$1);\n          addToSet(ALLOWED_ATTR, xml);\n        }\n      }\n      /* Merge configuration parameters */\n\n\n      if (cfg.ADD_TAGS) {\n        if (ALLOWED_TAGS === DEFAULT_ALLOWED_TAGS) {\n          ALLOWED_TAGS = clone(ALLOWED_TAGS);\n        }\n\n        addToSet(ALLOWED_TAGS, cfg.ADD_TAGS);\n      }\n\n      if (cfg.ADD_ATTR) {\n        if (ALLOWED_ATTR === DEFAULT_ALLOWED_ATTR) {\n          ALLOWED_ATTR = clone(ALLOWED_ATTR);\n        }\n\n        addToSet(ALLOWED_ATTR, cfg.ADD_ATTR);\n      }\n\n      if (cfg.ADD_URI_SAFE_ATTR) {\n        addToSet(URI_SAFE_ATTRIBUTES, cfg.ADD_URI_SAFE_ATTR);\n      }\n      /* Add #text in case KEEP_CONTENT is set to true */\n\n\n      if (KEEP_CONTENT) {\n        ALLOWED_TAGS['#text'] = true;\n      }\n      /* Add html, head and body to ALLOWED_TAGS in case WHOLE_DOCUMENT is true */\n\n\n      if (WHOLE_DOCUMENT) {\n        addToSet(ALLOWED_TAGS, ['html', 'head', 'body']);\n      }\n      /* Add tbody to ALLOWED_TAGS in case tables are permitted, see #286, #365 */\n\n\n      if (ALLOWED_TAGS.table) {\n        addToSet(ALLOWED_TAGS, ['tbody']);\n        delete FORBID_TAGS.tbody;\n      } // Prevent further manipulation of configuration.\n      // Not available in IE8, Safari 5, etc.\n\n\n      if (freeze) {\n        freeze(cfg);\n      }\n\n      CONFIG = cfg;\n    };\n\n    var MATHML_TEXT_INTEGRATION_POINTS = addToSet({}, ['mi', 'mo', 'mn', 'ms', 'mtext']);\n    var HTML_INTEGRATION_POINTS = addToSet({}, ['foreignobject', 'desc', 'title', 'annotation-xml']);\n    /* Keep track of all possible SVG and MathML tags\n     * so that we can perform the namespace checks\n     * correctly. */\n\n    var ALL_SVG_TAGS = addToSet({}, svg);\n    addToSet(ALL_SVG_TAGS, svgFilters);\n    addToSet(ALL_SVG_TAGS, svgDisallowed);\n    var ALL_MATHML_TAGS = addToSet({}, mathMl);\n    addToSet(ALL_MATHML_TAGS, mathMlDisallowed);\n    var MATHML_NAMESPACE = 'http://www.w3.org/1998/Math/MathML';\n    var SVG_NAMESPACE = 'http://www.w3.org/2000/svg';\n    var HTML_NAMESPACE = 'http://www.w3.org/1999/xhtml';\n    /**\n     *\n     *\n     * @param  {Element} element a DOM element whose namespace is being checked\n     * @returns {boolean} Return false if the element has a\n     *  namespace that a spec-compliant parser would never\n     *  return. Return true otherwise.\n     */\n\n    var _checkValidNamespace = function _checkValidNamespace(element) {\n      var parent = getParentNode(element); // In JSDOM, if we're inside shadow DOM, then parentNode\n      // can be null. We just simulate parent in this case.\n\n      if (!parent || !parent.tagName) {\n        parent = {\n          namespaceURI: HTML_NAMESPACE,\n          tagName: 'template'\n        };\n      }\n\n      var tagName = stringToLowerCase(element.tagName);\n      var parentTagName = stringToLowerCase(parent.tagName);\n\n      if (element.namespaceURI === SVG_NAMESPACE) {\n        // The only way to switch from HTML namespace to SVG\n        // is via <svg>. If it happens via any other tag, then\n        // it should be killed.\n        if (parent.namespaceURI === HTML_NAMESPACE) {\n          return tagName === 'svg';\n        } // The only way to switch from MathML to SVG is via\n        // svg if parent is either <annotation-xml> or MathML\n        // text integration points.\n\n\n        if (parent.namespaceURI === MATHML_NAMESPACE) {\n          return tagName === 'svg' && (parentTagName === 'annotation-xml' || MATHML_TEXT_INTEGRATION_POINTS[parentTagName]);\n        } // We only allow elements that are defined in SVG\n        // spec. All others are disallowed in SVG namespace.\n\n\n        return Boolean(ALL_SVG_TAGS[tagName]);\n      }\n\n      if (element.namespaceURI === MATHML_NAMESPACE) {\n        // The only way to switch from HTML namespace to MathML\n        // is via <math>. If it happens via any other tag, then\n        // it should be killed.\n        if (parent.namespaceURI === HTML_NAMESPACE) {\n          return tagName === 'math';\n        } // The only way to switch from SVG to MathML is via\n        // <math> and HTML integration points\n\n\n        if (parent.namespaceURI === SVG_NAMESPACE) {\n          return tagName === 'math' && HTML_INTEGRATION_POINTS[parentTagName];\n        } // We only allow elements that are defined in MathML\n        // spec. All others are disallowed in MathML namespace.\n\n\n        return Boolean(ALL_MATHML_TAGS[tagName]);\n      }\n\n      if (element.namespaceURI === HTML_NAMESPACE) {\n        // The only way to switch from SVG to HTML is via\n        // HTML integration points, and from MathML to HTML\n        // is via MathML text integration points\n        if (parent.namespaceURI === SVG_NAMESPACE && !HTML_INTEGRATION_POINTS[parentTagName]) {\n          return false;\n        }\n\n        if (parent.namespaceURI === MATHML_NAMESPACE && !MATHML_TEXT_INTEGRATION_POINTS[parentTagName]) {\n          return false;\n        } // Certain elements are allowed in both SVG and HTML\n        // namespace. We need to specify them explicitly\n        // so that they don't get erronously deleted from\n        // HTML namespace.\n\n\n        var commonSvgAndHTMLElements = addToSet({}, ['title', 'style', 'font', 'a', 'script']); // We disallow tags that are specific for MathML\n        // or SVG and should never appear in HTML namespace\n\n        return !ALL_MATHML_TAGS[tagName] && (commonSvgAndHTMLElements[tagName] || !ALL_SVG_TAGS[tagName]);\n      } // The code should never reach this place (this means\n      // that the element somehow got namespace that is not\n      // HTML, SVG or MathML). Return false just in case.\n\n\n      return false;\n    };\n    /**\n     * _forceRemove\n     *\n     * @param  {Node} node a DOM node\n     */\n\n\n    var _forceRemove = function _forceRemove(node) {\n      arrayPush(DOMPurify.removed, {\n        element: node\n      });\n\n      try {\n        node.parentNode.removeChild(node);\n      } catch (_) {\n        try {\n          node.outerHTML = emptyHTML;\n        } catch (_) {\n          node.remove();\n        }\n      }\n    };\n    /**\n     * _removeAttribute\n     *\n     * @param  {String} name an Attribute name\n     * @param  {Node} node a DOM node\n     */\n\n\n    var _removeAttribute = function _removeAttribute(name, node) {\n      try {\n        arrayPush(DOMPurify.removed, {\n          attribute: node.getAttributeNode(name),\n          from: node\n        });\n      } catch (_) {\n        arrayPush(DOMPurify.removed, {\n          attribute: null,\n          from: node\n        });\n      }\n\n      node.removeAttribute(name);\n    };\n    /**\n     * _initDocument\n     *\n     * @param  {String} dirty a string of dirty markup\n     * @return {Document} a DOM, filled with the dirty markup\n     */\n\n\n    var _initDocument = function _initDocument(dirty) {\n      /* Create a HTML document */\n      var doc = void 0;\n      var leadingWhitespace = void 0;\n\n      if (FORCE_BODY) {\n        dirty = '<remove></remove>' + dirty;\n      } else {\n        /* If FORCE_BODY isn't used, leading whitespace needs to be preserved manually */\n        var matches = stringMatch(dirty, /^[\\r\\n\\t ]+/);\n        leadingWhitespace = matches && matches[0];\n      }\n\n      var dirtyPayload = trustedTypesPolicy ? trustedTypesPolicy.createHTML(dirty) : dirty;\n      /* Use the DOMParser API by default, fallback later if needs be */\n\n      try {\n        doc = new DOMParser().parseFromString(dirtyPayload, 'text/html');\n      } catch (_) {}\n      /* Use createHTMLDocument in case DOMParser is not available */\n\n\n      if (!doc || !doc.documentElement) {\n        doc = implementation.createHTMLDocument('');\n        var _doc = doc,\n            body = _doc.body;\n        body.parentNode.removeChild(body.parentNode.firstElementChild);\n        body.outerHTML = dirtyPayload;\n      }\n\n      if (dirty && leadingWhitespace) {\n        doc.body.insertBefore(document.createTextNode(leadingWhitespace), doc.body.childNodes[0] || null);\n      }\n      /* Work on whole document or just its body */\n\n\n      return getElementsByTagName.call(doc, WHOLE_DOCUMENT ? 'html' : 'body')[0];\n    };\n    /**\n     * _createIterator\n     *\n     * @param  {Document} root document/fragment to create iterator for\n     * @return {Iterator} iterator instance\n     */\n\n\n    var _createIterator = function _createIterator(root) {\n      return createNodeIterator.call(root.ownerDocument || root, root, NodeFilter.SHOW_ELEMENT | NodeFilter.SHOW_COMMENT | NodeFilter.SHOW_TEXT, function () {\n        return NodeFilter.FILTER_ACCEPT;\n      }, false);\n    };\n    /**\n     * _isClobbered\n     *\n     * @param  {Node} elm element to check for clobbering attacks\n     * @return {Boolean} true if clobbered, false if safe\n     */\n\n\n    var _isClobbered = function _isClobbered(elm) {\n      if (elm instanceof Text || elm instanceof Comment) {\n        return false;\n      }\n\n      if (typeof elm.nodeName !== 'string' || typeof elm.textContent !== 'string' || typeof elm.removeChild !== 'function' || !(elm.attributes instanceof NamedNodeMap) || typeof elm.removeAttribute !== 'function' || typeof elm.setAttribute !== 'function' || typeof elm.namespaceURI !== 'string' || typeof elm.insertBefore !== 'function') {\n        return true;\n      }\n\n      return false;\n    };\n    /**\n     * _isNode\n     *\n     * @param  {Node} obj object to check whether it's a DOM node\n     * @return {Boolean} true is object is a DOM node\n     */\n\n\n    var _isNode = function _isNode(object) {\n      return (typeof Node === 'undefined' ? 'undefined' : _typeof(Node)) === 'object' ? object instanceof Node : object && (typeof object === 'undefined' ? 'undefined' : _typeof(object)) === 'object' && typeof object.nodeType === 'number' && typeof object.nodeName === 'string';\n    };\n    /**\n     * _executeHook\n     * Execute user configurable hooks\n     *\n     * @param  {String} entryPoint  Name of the hook's entry point\n     * @param  {Node} currentNode node to work on with the hook\n     * @param  {Object} data additional hook parameters\n     */\n\n\n    var _executeHook = function _executeHook(entryPoint, currentNode, data) {\n      if (!hooks[entryPoint]) {\n        return;\n      }\n\n      arrayForEach(hooks[entryPoint], function (hook) {\n        hook.call(DOMPurify, currentNode, data, CONFIG);\n      });\n    };\n    /**\n     * _sanitizeElements\n     *\n     * @protect nodeName\n     * @protect textContent\n     * @protect removeChild\n     *\n     * @param   {Node} currentNode to check for permission to exist\n     * @return  {Boolean} true if node was killed, false if left alive\n     */\n\n\n    var _sanitizeElements = function _sanitizeElements(currentNode) {\n      var content = void 0;\n      /* Execute a hook if present */\n\n      _executeHook('beforeSanitizeElements', currentNode, null);\n      /* Check if element is clobbered or can clobber */\n\n\n      if (_isClobbered(currentNode)) {\n        _forceRemove(currentNode);\n\n        return true;\n      }\n      /* Check if tagname contains Unicode */\n\n\n      if (stringMatch(currentNode.nodeName, /[\\u0080-\\uFFFF]/)) {\n        _forceRemove(currentNode);\n\n        return true;\n      }\n      /* Now let's check the element's type and name */\n\n\n      var tagName = stringToLowerCase(currentNode.nodeName);\n      /* Execute a hook if present */\n\n      _executeHook('uponSanitizeElement', currentNode, {\n        tagName: tagName,\n        allowedTags: ALLOWED_TAGS\n      });\n      /* Detect mXSS attempts abusing namespace confusion */\n\n\n      if (!_isNode(currentNode.firstElementChild) && (!_isNode(currentNode.content) || !_isNode(currentNode.content.firstElementChild)) && regExpTest(/<[/\\w]/g, currentNode.innerHTML) && regExpTest(/<[/\\w]/g, currentNode.textContent)) {\n        _forceRemove(currentNode);\n\n        return true;\n      }\n      /* Remove element if anything forbids its presence */\n\n\n      if (!ALLOWED_TAGS[tagName] || FORBID_TAGS[tagName]) {\n        /* Keep content except for bad-listed elements */\n        if (KEEP_CONTENT && !FORBID_CONTENTS[tagName]) {\n          var parentNode = getParentNode(currentNode);\n          var childNodes = getChildNodes(currentNode);\n          var childCount = childNodes.length;\n\n          for (var i = childCount - 1; i >= 0; --i) {\n            parentNode.insertBefore(cloneNode(childNodes[i], true), getNextSibling(currentNode));\n          }\n        }\n\n        _forceRemove(currentNode);\n\n        return true;\n      }\n      /* Check whether element has a valid namespace */\n\n\n      if (currentNode instanceof Element && !_checkValidNamespace(currentNode)) {\n        _forceRemove(currentNode);\n\n        return true;\n      }\n\n      if ((tagName === 'noscript' || tagName === 'noembed') && regExpTest(/<\\/no(script|embed)/i, currentNode.innerHTML)) {\n        _forceRemove(currentNode);\n\n        return true;\n      }\n      /* Sanitize element content to be template-safe */\n\n\n      if (SAFE_FOR_TEMPLATES && currentNode.nodeType === 3) {\n        /* Get the element's text content */\n        content = currentNode.textContent;\n        content = stringReplace(content, MUSTACHE_EXPR$$1, ' ');\n        content = stringReplace(content, ERB_EXPR$$1, ' ');\n\n        if (currentNode.textContent !== content) {\n          arrayPush(DOMPurify.removed, {\n            element: currentNode.cloneNode()\n          });\n          currentNode.textContent = content;\n        }\n      }\n      /* Execute a hook if present */\n\n\n      _executeHook('afterSanitizeElements', currentNode, null);\n\n      return false;\n    };\n    /**\n     * _isValidAttribute\n     *\n     * @param  {string} lcTag Lowercase tag name of containing element.\n     * @param  {string} lcName Lowercase attribute name.\n     * @param  {string} value Attribute value.\n     * @return {Boolean} Returns true if `value` is valid, otherwise false.\n     */\n    // eslint-disable-next-line complexity\n\n\n    var _isValidAttribute = function _isValidAttribute(lcTag, lcName, value) {\n      /* Make sure attribute cannot clobber */\n      if (SANITIZE_DOM && (lcName === 'id' || lcName === 'name') && (value in document || value in formElement)) {\n        return false;\n      }\n      /* Allow valid data-* attributes: At least one character after \"-\"\n          (https://html.spec.whatwg.org/multipage/dom.html#embedding-custom-non-visible-data-with-the-data-*-attributes)\n          XML-compatible (https://html.spec.whatwg.org/multipage/infrastructure.html#xml-compatible and http://www.w3.org/TR/xml/#d0e804)\n          We don't need to check the value; it's always URI safe. */\n\n\n      if (ALLOW_DATA_ATTR && regExpTest(DATA_ATTR$$1, lcName)) ;else if (ALLOW_ARIA_ATTR && regExpTest(ARIA_ATTR$$1, lcName)) ;else if (!ALLOWED_ATTR[lcName] || FORBID_ATTR[lcName]) {\n        return false;\n        /* Check value is safe. First, is attr inert? If so, is safe */\n      } else if (URI_SAFE_ATTRIBUTES[lcName]) ;else if (regExpTest(IS_ALLOWED_URI$$1, stringReplace(value, ATTR_WHITESPACE$$1, ''))) ;else if ((lcName === 'src' || lcName === 'xlink:href' || lcName === 'href') && lcTag !== 'script' && stringIndexOf(value, 'data:') === 0 && DATA_URI_TAGS[lcTag]) ;else if (ALLOW_UNKNOWN_PROTOCOLS && !regExpTest(IS_SCRIPT_OR_DATA$$1, stringReplace(value, ATTR_WHITESPACE$$1, ''))) ;else if (!value) ;else {\n        return false;\n      }\n      return true;\n    };\n    /**\n     * _sanitizeAttributes\n     *\n     * @protect attributes\n     * @protect nodeName\n     * @protect removeAttribute\n     * @protect setAttribute\n     *\n     * @param  {Node} currentNode to sanitize\n     */\n\n\n    var _sanitizeAttributes = function _sanitizeAttributes(currentNode) {\n      var attr = void 0;\n      var value = void 0;\n      var lcName = void 0;\n      var l = void 0;\n      /* Execute a hook if present */\n\n      _executeHook('beforeSanitizeAttributes', currentNode, null);\n\n      var attributes = currentNode.attributes;\n      /* Check if we have attributes; if not we might have a text node */\n\n      if (!attributes) {\n        return;\n      }\n\n      var hookEvent = {\n        attrName: '',\n        attrValue: '',\n        keepAttr: true,\n        allowedAttributes: ALLOWED_ATTR\n      };\n      l = attributes.length;\n      /* Go backwards over all attributes; safely remove bad ones */\n\n      while (l--) {\n        attr = attributes[l];\n        var _attr = attr,\n            name = _attr.name,\n            namespaceURI = _attr.namespaceURI;\n        value = stringTrim(attr.value);\n        lcName = stringToLowerCase(name);\n        /* Execute a hook if present */\n\n        hookEvent.attrName = lcName;\n        hookEvent.attrValue = value;\n        hookEvent.keepAttr = true;\n        hookEvent.forceKeepAttr = undefined; // Allows developers to see this is a property they can set\n\n        _executeHook('uponSanitizeAttribute', currentNode, hookEvent);\n\n        value = hookEvent.attrValue;\n        /* Did the hooks approve of the attribute? */\n\n        if (hookEvent.forceKeepAttr) {\n          continue;\n        }\n        /* Remove attribute */\n\n\n        _removeAttribute(name, currentNode);\n        /* Did the hooks approve of the attribute? */\n\n\n        if (!hookEvent.keepAttr) {\n          continue;\n        }\n        /* Work around a security issue in jQuery 3.0 */\n\n\n        if (regExpTest(/\\/>/i, value)) {\n          _removeAttribute(name, currentNode);\n\n          continue;\n        }\n        /* Sanitize attribute content to be template-safe */\n\n\n        if (SAFE_FOR_TEMPLATES) {\n          value = stringReplace(value, MUSTACHE_EXPR$$1, ' ');\n          value = stringReplace(value, ERB_EXPR$$1, ' ');\n        }\n        /* Is `value` valid for this attribute? */\n\n\n        var lcTag = currentNode.nodeName.toLowerCase();\n\n        if (!_isValidAttribute(lcTag, lcName, value)) {\n          continue;\n        }\n        /* Handle invalid data-* attribute set by try-catching it */\n\n\n        try {\n          if (namespaceURI) {\n            currentNode.setAttributeNS(namespaceURI, name, value);\n          } else {\n            /* Fallback to setAttribute() for browser-unrecognized namespaces e.g. \"x-schema\". */\n            currentNode.setAttribute(name, value);\n          }\n\n          arrayPop(DOMPurify.removed);\n        } catch (_) {}\n      }\n      /* Execute a hook if present */\n\n\n      _executeHook('afterSanitizeAttributes', currentNode, null);\n    };\n    /**\n     * _sanitizeShadowDOM\n     *\n     * @param  {DocumentFragment} fragment to iterate over recursively\n     */\n\n\n    var _sanitizeShadowDOM = function _sanitizeShadowDOM(fragment) {\n      var shadowNode = void 0;\n\n      var shadowIterator = _createIterator(fragment);\n      /* Execute a hook if present */\n\n\n      _executeHook('beforeSanitizeShadowDOM', fragment, null);\n\n      while (shadowNode = shadowIterator.nextNode()) {\n        /* Execute a hook if present */\n        _executeHook('uponSanitizeShadowNode', shadowNode, null);\n        /* Sanitize tags and elements */\n\n\n        if (_sanitizeElements(shadowNode)) {\n          continue;\n        }\n        /* Deep shadow DOM detected */\n\n\n        if (shadowNode.content instanceof DocumentFragment) {\n          _sanitizeShadowDOM(shadowNode.content);\n        }\n        /* Check attributes, sanitize if necessary */\n\n\n        _sanitizeAttributes(shadowNode);\n      }\n      /* Execute a hook if present */\n\n\n      _executeHook('afterSanitizeShadowDOM', fragment, null);\n    };\n    /**\n     * Sanitize\n     * Public method providing core sanitation functionality\n     *\n     * @param {String|Node} dirty string or DOM node\n     * @param {Object} configuration object\n     */\n    // eslint-disable-next-line complexity\n\n\n    DOMPurify.sanitize = function (dirty, cfg) {\n      var body = void 0;\n      var importedNode = void 0;\n      var currentNode = void 0;\n      var oldNode = void 0;\n      var returnNode = void 0;\n      /* Make sure we have a string to sanitize.\n        DO NOT return early, as this will return the wrong type if\n        the user has requested a DOM object rather than a string */\n\n      if (!dirty) {\n        dirty = '<!-->';\n      }\n      /* Stringify, in case dirty is an object */\n\n\n      if (typeof dirty !== 'string' && !_isNode(dirty)) {\n        // eslint-disable-next-line no-negated-condition\n        if (typeof dirty.toString !== 'function') {\n          throw typeErrorCreate('toString is not a function');\n        } else {\n          dirty = dirty.toString();\n\n          if (typeof dirty !== 'string') {\n            throw typeErrorCreate('dirty is not a string, aborting');\n          }\n        }\n      }\n      /* Check we can run. Otherwise fall back or ignore */\n\n\n      if (!DOMPurify.isSupported) {\n        if (_typeof(window.toStaticHTML) === 'object' || typeof window.toStaticHTML === 'function') {\n          if (typeof dirty === 'string') {\n            return window.toStaticHTML(dirty);\n          }\n\n          if (_isNode(dirty)) {\n            return window.toStaticHTML(dirty.outerHTML);\n          }\n        }\n\n        return dirty;\n      }\n      /* Assign config vars */\n\n\n      if (!SET_CONFIG) {\n        _parseConfig(cfg);\n      }\n      /* Clean up removed elements */\n\n\n      DOMPurify.removed = [];\n      /* Check if dirty is correctly typed for IN_PLACE */\n\n      if (typeof dirty === 'string') {\n        IN_PLACE = false;\n      }\n\n      if (IN_PLACE) ;else if (dirty instanceof Node) {\n        /* If dirty is a DOM element, append to an empty document to avoid\n           elements being stripped by the parser */\n        body = _initDocument('<!---->');\n        importedNode = body.ownerDocument.importNode(dirty, true);\n\n        if (importedNode.nodeType === 1 && importedNode.nodeName === 'BODY') {\n          /* Node is already a body, use as is */\n          body = importedNode;\n        } else if (importedNode.nodeName === 'HTML') {\n          body = importedNode;\n        } else {\n          // eslint-disable-next-line unicorn/prefer-node-append\n          body.appendChild(importedNode);\n        }\n      } else {\n        /* Exit directly if we have nothing to do */\n        if (!RETURN_DOM && !SAFE_FOR_TEMPLATES && !WHOLE_DOCUMENT && // eslint-disable-next-line unicorn/prefer-includes\n        dirty.indexOf('<') === -1) {\n          return trustedTypesPolicy && RETURN_TRUSTED_TYPE ? trustedTypesPolicy.createHTML(dirty) : dirty;\n        }\n        /* Initialize the document to work on */\n\n\n        body = _initDocument(dirty);\n        /* Check we have a DOM node from the data */\n\n        if (!body) {\n          return RETURN_DOM ? null : emptyHTML;\n        }\n      }\n      /* Remove first element node (ours) if FORCE_BODY is set */\n\n      if (body && FORCE_BODY) {\n        _forceRemove(body.firstChild);\n      }\n      /* Get node iterator */\n\n\n      var nodeIterator = _createIterator(IN_PLACE ? dirty : body);\n      /* Now start iterating over the created document */\n\n\n      while (currentNode = nodeIterator.nextNode()) {\n        /* Fix IE's strange behavior with manipulated textNodes #89 */\n        if (currentNode.nodeType === 3 && currentNode === oldNode) {\n          continue;\n        }\n        /* Sanitize tags and elements */\n\n\n        if (_sanitizeElements(currentNode)) {\n          continue;\n        }\n        /* Shadow DOM detected, sanitize it */\n\n\n        if (currentNode.content instanceof DocumentFragment) {\n          _sanitizeShadowDOM(currentNode.content);\n        }\n        /* Check attributes, sanitize if necessary */\n\n\n        _sanitizeAttributes(currentNode);\n\n        oldNode = currentNode;\n      }\n\n      oldNode = null;\n      /* If we sanitized `dirty` in-place, return it. */\n\n      if (IN_PLACE) {\n        return dirty;\n      }\n      /* Return sanitized string or DOM */\n\n\n      if (RETURN_DOM) {\n        if (RETURN_DOM_FRAGMENT) {\n          returnNode = createDocumentFragment.call(body.ownerDocument);\n\n          while (body.firstChild) {\n            // eslint-disable-next-line unicorn/prefer-node-append\n            returnNode.appendChild(body.firstChild);\n          }\n        } else {\n          returnNode = body;\n        }\n\n        if (RETURN_DOM_IMPORT) {\n          /*\n            AdoptNode() is not used because internal state is not reset\n            (e.g. the past names map of a HTMLFormElement), this is safe\n            in theory but we would rather not risk another attack vector.\n            The state that is cloned by importNode() is explicitly defined\n            by the specs.\n          */\n          returnNode = importNode.call(originalDocument, returnNode, true);\n        }\n\n        return returnNode;\n      }\n\n      var serializedHTML = WHOLE_DOCUMENT ? body.outerHTML : body.innerHTML;\n      /* Sanitize final string template-safe */\n\n      if (SAFE_FOR_TEMPLATES) {\n        serializedHTML = stringReplace(serializedHTML, MUSTACHE_EXPR$$1, ' ');\n        serializedHTML = stringReplace(serializedHTML, ERB_EXPR$$1, ' ');\n      }\n\n      return trustedTypesPolicy && RETURN_TRUSTED_TYPE ? trustedTypesPolicy.createHTML(serializedHTML) : serializedHTML;\n    };\n    /**\n     * Public method to set the configuration once\n     * setConfig\n     *\n     * @param {Object} cfg configuration object\n     */\n\n\n    DOMPurify.setConfig = function (cfg) {\n      _parseConfig(cfg);\n\n      SET_CONFIG = true;\n    };\n    /**\n     * Public method to remove the configuration\n     * clearConfig\n     *\n     */\n\n\n    DOMPurify.clearConfig = function () {\n      CONFIG = null;\n      SET_CONFIG = false;\n    };\n    /**\n     * Public method to check if an attribute value is valid.\n     * Uses last set config, if any. Otherwise, uses config defaults.\n     * isValidAttribute\n     *\n     * @param  {string} tag Tag name of containing element.\n     * @param  {string} attr Attribute name.\n     * @param  {string} value Attribute value.\n     * @return {Boolean} Returns true if `value` is valid. Otherwise, returns false.\n     */\n\n\n    DOMPurify.isValidAttribute = function (tag, attr, value) {\n      /* Initialize shared config vars if necessary. */\n      if (!CONFIG) {\n        _parseConfig({});\n      }\n\n      var lcTag = stringToLowerCase(tag);\n      var lcName = stringToLowerCase(attr);\n      return _isValidAttribute(lcTag, lcName, value);\n    };\n    /**\n     * AddHook\n     * Public method to add DOMPurify hooks\n     *\n     * @param {String} entryPoint entry point for the hook to add\n     * @param {Function} hookFunction function to execute\n     */\n\n\n    DOMPurify.addHook = function (entryPoint, hookFunction) {\n      if (typeof hookFunction !== 'function') {\n        return;\n      }\n\n      hooks[entryPoint] = hooks[entryPoint] || [];\n      arrayPush(hooks[entryPoint], hookFunction);\n    };\n    /**\n     * RemoveHook\n     * Public method to remove a DOMPurify hook at a given entryPoint\n     * (pops it from the stack of hooks if more are present)\n     *\n     * @param {String} entryPoint entry point for the hook to remove\n     */\n\n\n    DOMPurify.removeHook = function (entryPoint) {\n      if (hooks[entryPoint]) {\n        arrayPop(hooks[entryPoint]);\n      }\n    };\n    /**\n     * RemoveHooks\n     * Public method to remove all DOMPurify hooks at a given entryPoint\n     *\n     * @param  {String} entryPoint entry point for the hooks to remove\n     */\n\n\n    DOMPurify.removeHooks = function (entryPoint) {\n      if (hooks[entryPoint]) {\n        hooks[entryPoint] = [];\n      }\n    };\n    /**\n     * RemoveAllHooks\n     * Public method to remove all DOMPurify hooks\n     *\n     */\n\n\n    DOMPurify.removeAllHooks = function () {\n      hooks = {};\n    };\n\n    return DOMPurify;\n  }\n\n  var purify = createDOMPurify();\n  return purify;\n});","map":{"version":3,"sources":["../src/utils.js","../src/tags.js","../src/attrs.js","../src/regexp.js","../src/purify.js"],"names":["hasOwnProperty","setPrototypeOf","isFrozen","getPrototypeOf","getOwnPropertyDescriptor","Object","freeze","seal","create","apply","construct","Reflect","fun","arrayForEach","unapply","Array","arrayPop","arrayPush","stringToLowerCase","String","stringMatch","stringReplace","stringIndexOf","stringTrim","regExpTest","RegExp","typeErrorCreate","unconstruct","args","l","array","element","lcElement","set","newObject","property","object","desc","html","svg","svgFilters","svgDisallowed","mathMl","mathMlDisallowed","text","xml","MUSTACHE_EXPR","ERB_EXPR","DATA_ATTR","ARIA_ATTR","IS_ALLOWED_URI","IS_SCRIPT_OR_DATA","ATTR_WHITESPACE","getGlobal","_createTrustedTypesPolicy","trustedTypes","suffix","ATTR_NAME","document","policyName","createHTML","console","window","DOMPurify","createDOMPurify","originalDocument","DocumentFragment","HTMLTemplateElement","Node","Element","NodeFilter","NamedNodeMap","Text","Comment","DOMParser","ElementPrototype","cloneNode","lookupGetter","getNextSibling","getChildNodes","getParentNode","template","trustedTypesPolicy","emptyHTML","implementation","createNodeIterator","getElementsByTagName","createDocumentFragment","importNode","documentMode","clone","hooks","ALLOWED_TAGS","DEFAULT_ALLOWED_TAGS","addToSet","ALLOWED_ATTR","DEFAULT_ALLOWED_ATTR","FORBID_TAGS","FORBID_ATTR","ALLOW_ARIA_ATTR","ALLOW_DATA_ATTR","ALLOW_UNKNOWN_PROTOCOLS","SAFE_FOR_TEMPLATES","WHOLE_DOCUMENT","SET_CONFIG","FORCE_BODY","RETURN_DOM","RETURN_DOM_FRAGMENT","RETURN_DOM_IMPORT","RETURN_TRUSTED_TYPE","SANITIZE_DOM","KEEP_CONTENT","IN_PLACE","USE_PROFILES","FORBID_CONTENTS","DATA_URI_TAGS","DEFAULT_DATA_URI_TAGS","URI_SAFE_ATTRIBUTES","DEFAULT_URI_SAFE_ATTRIBUTES","CONFIG","formElement","_parseConfig","cfg","MATHML_TEXT_INTEGRATION_POINTS","HTML_INTEGRATION_POINTS","ALL_SVG_TAGS","ALL_MATHML_TAGS","MATHML_NAMESPACE","SVG_NAMESPACE","HTML_NAMESPACE","_checkValidNamespace","parent","namespaceURI","tagName","parentTagName","Boolean","commonSvgAndHTMLElements","_forceRemove","node","_removeAttribute","attribute","from","_initDocument","doc","leadingWhitespace","dirty","matches","dirtyPayload","body","_createIterator","root","_isClobbered","elm","_isNode","_executeHook","hook","_sanitizeElements","content","currentNode","allowedTags","parentNode","childNodes","childCount","i","_isValidAttribute","lcName","value","lcTag","_sanitizeAttributes","attr","attributes","hookEvent","attrName","attrValue","keepAttr","allowedAttributes","name","_sanitizeShadowDOM","shadowNode","shadowIterator","importedNode","oldNode","returnNode","nodeIterator","serializedHTML"],"mappings":"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","sourcesContent":["const {\n  hasOwnProperty,\n  setPrototypeOf,\n  isFrozen,\n  getPrototypeOf,\n  getOwnPropertyDescriptor,\n} = Object;\n\nlet { freeze, seal, create } = Object; // eslint-disable-line import/no-mutable-exports\nlet { apply, construct } = typeof Reflect !== 'undefined' && Reflect;\n\nif (!apply) {\n  apply = function (fun, thisValue, args) {\n    return fun.apply(thisValue, args);\n  };\n}\n\nif (!freeze) {\n  freeze = function (x) {\n    return x;\n  };\n}\n\nif (!seal) {\n  seal = function (x) {\n    return x;\n  };\n}\n\nif (!construct) {\n  construct = function (Func, args) {\n    return new Func(...args);\n  };\n}\n\nconst arrayForEach = unapply(Array.prototype.forEach);\nconst arrayIndexOf = unapply(Array.prototype.indexOf);\nconst arrayPop = unapply(Array.prototype.pop);\nconst arrayPush = unapply(Array.prototype.push);\nconst arraySlice = unapply(Array.prototype.slice);\n\nconst stringToLowerCase = unapply(String.prototype.toLowerCase);\nconst stringMatch = unapply(String.prototype.match);\nconst stringReplace = unapply(String.prototype.replace);\nconst stringIndexOf = unapply(String.prototype.indexOf);\nconst stringTrim = unapply(String.prototype.trim);\n\nconst regExpTest = unapply(RegExp.prototype.test);\n\nconst typeErrorCreate = unconstruct(TypeError);\n\nexport function unapply(func) {\n  return (thisArg, ...args) => apply(func, thisArg, args);\n}\n\nexport function unconstruct(func) {\n  return (...args) => construct(func, args);\n}\n\n/* Add properties to a lookup table */\nexport function addToSet(set, array) {\n  if (setPrototypeOf) {\n    // Make 'in' and truthy checks like Boolean(set.constructor)\n    // independent of any properties defined on Object.prototype.\n    // Prevent prototype setters from intercepting set as a this value.\n    setPrototypeOf(set, null);\n  }\n\n  let l = array.length;\n  while (l--) {\n    let element = array[l];\n    if (typeof element === 'string') {\n      const lcElement = stringToLowerCase(element);\n      if (lcElement !== element) {\n        // Config presets (e.g. tags.js, attrs.js) are immutable.\n        if (!isFrozen(array)) {\n          array[l] = lcElement;\n        }\n\n        element = lcElement;\n      }\n    }\n\n    set[element] = true;\n  }\n\n  return set;\n}\n\n/* Shallow clone an object */\nexport function clone(object) {\n  const newObject = create(null);\n\n  let property;\n  for (property in object) {\n    if (apply(hasOwnProperty, object, [property])) {\n      newObject[property] = object[property];\n    }\n  }\n\n  return newObject;\n}\n\n/* IE10 doesn't support __lookupGetter__ so lets'\n * simulate it. It also automatically checks\n * if the prop is function or getter and behaves\n * accordingly. */\nfunction lookupGetter(object, prop) {\n  while (object !== null) {\n    const desc = getOwnPropertyDescriptor(object, prop);\n    if (desc) {\n      if (desc.get) {\n        return unapply(desc.get);\n      }\n\n      if (typeof desc.value === 'function') {\n        return unapply(desc.value);\n      }\n    }\n\n    object = getPrototypeOf(object);\n  }\n\n  return null;\n}\n\nexport {\n  // Array\n  arrayForEach,\n  arrayIndexOf,\n  arrayPop,\n  arrayPush,\n  arraySlice,\n  // Object\n  freeze,\n  getPrototypeOf,\n  getOwnPropertyDescriptor,\n  hasOwnProperty,\n  isFrozen,\n  setPrototypeOf,\n  seal,\n  // RegExp\n  regExpTest,\n  // String\n  stringIndexOf,\n  stringMatch,\n  stringReplace,\n  stringToLowerCase,\n  stringTrim,\n  // Errors\n  typeErrorCreate,\n  // Other\n  lookupGetter,\n};\n","import { freeze } from './utils';\n\nexport const html = freeze([\n  'a',\n  'abbr',\n  'acronym',\n  'address',\n  'area',\n  'article',\n  'aside',\n  'audio',\n  'b',\n  'bdi',\n  'bdo',\n  'big',\n  'blink',\n  'blockquote',\n  'body',\n  'br',\n  'button',\n  'canvas',\n  'caption',\n  'center',\n  'cite',\n  'code',\n  'col',\n  'colgroup',\n  'content',\n  'data',\n  'datalist',\n  'dd',\n  'decorator',\n  'del',\n  'details',\n  'dfn',\n  'dialog',\n  'dir',\n  'div',\n  'dl',\n  'dt',\n  'element',\n  'em',\n  'fieldset',\n  'figcaption',\n  'figure',\n  'font',\n  'footer',\n  'form',\n  'h1',\n  'h2',\n  'h3',\n  'h4',\n  'h5',\n  'h6',\n  'head',\n  'header',\n  'hgroup',\n  'hr',\n  'html',\n  'i',\n  'img',\n  'input',\n  'ins',\n  'kbd',\n  'label',\n  'legend',\n  'li',\n  'main',\n  'map',\n  'mark',\n  'marquee',\n  'menu',\n  'menuitem',\n  'meter',\n  'nav',\n  'nobr',\n  'ol',\n  'optgroup',\n  'option',\n  'output',\n  'p',\n  'picture',\n  'pre',\n  'progress',\n  'q',\n  'rp',\n  'rt',\n  'ruby',\n  's',\n  'samp',\n  'section',\n  'select',\n  'shadow',\n  'small',\n  'source',\n  'spacer',\n  'span',\n  'strike',\n  'strong',\n  'style',\n  'sub',\n  'summary',\n  'sup',\n  'table',\n  'tbody',\n  'td',\n  'template',\n  'textarea',\n  'tfoot',\n  'th',\n  'thead',\n  'time',\n  'tr',\n  'track',\n  'tt',\n  'u',\n  'ul',\n  'var',\n  'video',\n  'wbr',\n]);\n\n// SVG\nexport const svg = freeze([\n  'svg',\n  'a',\n  'altglyph',\n  'altglyphdef',\n  'altglyphitem',\n  'animatecolor',\n  'animatemotion',\n  'animatetransform',\n  'circle',\n  'clippath',\n  'defs',\n  'desc',\n  'ellipse',\n  'filter',\n  'font',\n  'g',\n  'glyph',\n  'glyphref',\n  'hkern',\n  'image',\n  'line',\n  'lineargradient',\n  'marker',\n  'mask',\n  'metadata',\n  'mpath',\n  'path',\n  'pattern',\n  'polygon',\n  'polyline',\n  'radialgradient',\n  'rect',\n  'stop',\n  'style',\n  'switch',\n  'symbol',\n  'text',\n  'textpath',\n  'title',\n  'tref',\n  'tspan',\n  'view',\n  'vkern',\n]);\n\nexport const svgFilters = freeze([\n  'feBlend',\n  'feColorMatrix',\n  'feComponentTransfer',\n  'feComposite',\n  'feConvolveMatrix',\n  'feDiffuseLighting',\n  'feDisplacementMap',\n  'feDistantLight',\n  'feFlood',\n  'feFuncA',\n  'feFuncB',\n  'feFuncG',\n  'feFuncR',\n  'feGaussianBlur',\n  'feMerge',\n  'feMergeNode',\n  'feMorphology',\n  'feOffset',\n  'fePointLight',\n  'feSpecularLighting',\n  'feSpotLight',\n  'feTile',\n  'feTurbulence',\n]);\n\n// List of SVG elements that are disallowed by default.\n// We still need to know them so that we can do namespace\n// checks properly in case one wants to add them to\n// allow-list.\nexport const svgDisallowed = freeze([\n  'animate',\n  'color-profile',\n  'cursor',\n  'discard',\n  'fedropshadow',\n  'feimage',\n  'font-face',\n  'font-face-format',\n  'font-face-name',\n  'font-face-src',\n  'font-face-uri',\n  'foreignobject',\n  'hatch',\n  'hatchpath',\n  'mesh',\n  'meshgradient',\n  'meshpatch',\n  'meshrow',\n  'missing-glyph',\n  'script',\n  'set',\n  'solidcolor',\n  'unknown',\n  'use',\n]);\n\nexport const mathMl = freeze([\n  'math',\n  'menclose',\n  'merror',\n  'mfenced',\n  'mfrac',\n  'mglyph',\n  'mi',\n  'mlabeledtr',\n  'mmultiscripts',\n  'mn',\n  'mo',\n  'mover',\n  'mpadded',\n  'mphantom',\n  'mroot',\n  'mrow',\n  'ms',\n  'mspace',\n  'msqrt',\n  'mstyle',\n  'msub',\n  'msup',\n  'msubsup',\n  'mtable',\n  'mtd',\n  'mtext',\n  'mtr',\n  'munder',\n  'munderover',\n]);\n\n// Similarly to SVG, we want to know all MathML elements,\n// even those that we disallow by default.\nexport const mathMlDisallowed = freeze([\n  'maction',\n  'maligngroup',\n  'malignmark',\n  'mlongdiv',\n  'mscarries',\n  'mscarry',\n  'msgroup',\n  'mstack',\n  'msline',\n  'msrow',\n  'semantics',\n  'annotation',\n  'annotation-xml',\n  'mprescripts',\n  'none',\n]);\n\nexport const text = freeze(['#text']);\n","import { freeze } from './utils';\n\nexport const html = freeze([\n  'accept',\n  'action',\n  'align',\n  'alt',\n  'autocapitalize',\n  'autocomplete',\n  'autopictureinpicture',\n  'autoplay',\n  'background',\n  'bgcolor',\n  'border',\n  'capture',\n  'cellpadding',\n  'cellspacing',\n  'checked',\n  'cite',\n  'class',\n  'clear',\n  'color',\n  'cols',\n  'colspan',\n  'controls',\n  'controlslist',\n  'coords',\n  'crossorigin',\n  'datetime',\n  'decoding',\n  'default',\n  'dir',\n  'disabled',\n  'disablepictureinpicture',\n  'disableremoteplayback',\n  'download',\n  'draggable',\n  'enctype',\n  'enterkeyhint',\n  'face',\n  'for',\n  'headers',\n  'height',\n  'hidden',\n  'high',\n  'href',\n  'hreflang',\n  'id',\n  'inputmode',\n  'integrity',\n  'ismap',\n  'kind',\n  'label',\n  'lang',\n  'list',\n  'loading',\n  'loop',\n  'low',\n  'max',\n  'maxlength',\n  'media',\n  'method',\n  'min',\n  'minlength',\n  'multiple',\n  'muted',\n  'name',\n  'noshade',\n  'novalidate',\n  'nowrap',\n  'open',\n  'optimum',\n  'pattern',\n  'placeholder',\n  'playsinline',\n  'poster',\n  'preload',\n  'pubdate',\n  'radiogroup',\n  'readonly',\n  'rel',\n  'required',\n  'rev',\n  'reversed',\n  'role',\n  'rows',\n  'rowspan',\n  'spellcheck',\n  'scope',\n  'selected',\n  'shape',\n  'size',\n  'sizes',\n  'span',\n  'srclang',\n  'start',\n  'src',\n  'srcset',\n  'step',\n  'style',\n  'summary',\n  'tabindex',\n  'title',\n  'translate',\n  'type',\n  'usemap',\n  'valign',\n  'value',\n  'width',\n  'xmlns',\n]);\n\nexport const svg = freeze([\n  'accent-height',\n  'accumulate',\n  'additive',\n  'alignment-baseline',\n  'ascent',\n  'attributename',\n  'attributetype',\n  'azimuth',\n  'basefrequency',\n  'baseline-shift',\n  'begin',\n  'bias',\n  'by',\n  'class',\n  'clip',\n  'clippathunits',\n  'clip-path',\n  'clip-rule',\n  'color',\n  'color-interpolation',\n  'color-interpolation-filters',\n  'color-profile',\n  'color-rendering',\n  'cx',\n  'cy',\n  'd',\n  'dx',\n  'dy',\n  'diffuseconstant',\n  'direction',\n  'display',\n  'divisor',\n  'dur',\n  'edgemode',\n  'elevation',\n  'end',\n  'fill',\n  'fill-opacity',\n  'fill-rule',\n  'filter',\n  'filterunits',\n  'flood-color',\n  'flood-opacity',\n  'font-family',\n  'font-size',\n  'font-size-adjust',\n  'font-stretch',\n  'font-style',\n  'font-variant',\n  'font-weight',\n  'fx',\n  'fy',\n  'g1',\n  'g2',\n  'glyph-name',\n  'glyphref',\n  'gradientunits',\n  'gradienttransform',\n  'height',\n  'href',\n  'id',\n  'image-rendering',\n  'in',\n  'in2',\n  'k',\n  'k1',\n  'k2',\n  'k3',\n  'k4',\n  'kerning',\n  'keypoints',\n  'keysplines',\n  'keytimes',\n  'lang',\n  'lengthadjust',\n  'letter-spacing',\n  'kernelmatrix',\n  'kernelunitlength',\n  'lighting-color',\n  'local',\n  'marker-end',\n  'marker-mid',\n  'marker-start',\n  'markerheight',\n  'markerunits',\n  'markerwidth',\n  'maskcontentunits',\n  'maskunits',\n  'max',\n  'mask',\n  'media',\n  'method',\n  'mode',\n  'min',\n  'name',\n  'numoctaves',\n  'offset',\n  'operator',\n  'opacity',\n  'order',\n  'orient',\n  'orientation',\n  'origin',\n  'overflow',\n  'paint-order',\n  'path',\n  'pathlength',\n  'patterncontentunits',\n  'patterntransform',\n  'patternunits',\n  'points',\n  'preservealpha',\n  'preserveaspectratio',\n  'primitiveunits',\n  'r',\n  'rx',\n  'ry',\n  'radius',\n  'refx',\n  'refy',\n  'repeatcount',\n  'repeatdur',\n  'restart',\n  'result',\n  'rotate',\n  'scale',\n  'seed',\n  'shape-rendering',\n  'specularconstant',\n  'specularexponent',\n  'spreadmethod',\n  'startoffset',\n  'stddeviation',\n  'stitchtiles',\n  'stop-color',\n  'stop-opacity',\n  'stroke-dasharray',\n  'stroke-dashoffset',\n  'stroke-linecap',\n  'stroke-linejoin',\n  'stroke-miterlimit',\n  'stroke-opacity',\n  'stroke',\n  'stroke-width',\n  'style',\n  'surfacescale',\n  'systemlanguage',\n  'tabindex',\n  'targetx',\n  'targety',\n  'transform',\n  'text-anchor',\n  'text-decoration',\n  'text-rendering',\n  'textlength',\n  'type',\n  'u1',\n  'u2',\n  'unicode',\n  'values',\n  'viewbox',\n  'visibility',\n  'version',\n  'vert-adv-y',\n  'vert-origin-x',\n  'vert-origin-y',\n  'width',\n  'word-spacing',\n  'wrap',\n  'writing-mode',\n  'xchannelselector',\n  'ychannelselector',\n  'x',\n  'x1',\n  'x2',\n  'xmlns',\n  'y',\n  'y1',\n  'y2',\n  'z',\n  'zoomandpan',\n]);\n\nexport const mathMl = freeze([\n  'accent',\n  'accentunder',\n  'align',\n  'bevelled',\n  'close',\n  'columnsalign',\n  'columnlines',\n  'columnspan',\n  'denomalign',\n  'depth',\n  'dir',\n  'display',\n  'displaystyle',\n  'encoding',\n  'fence',\n  'frame',\n  'height',\n  'href',\n  'id',\n  'largeop',\n  'length',\n  'linethickness',\n  'lspace',\n  'lquote',\n  'mathbackground',\n  'mathcolor',\n  'mathsize',\n  'mathvariant',\n  'maxsize',\n  'minsize',\n  'movablelimits',\n  'notation',\n  'numalign',\n  'open',\n  'rowalign',\n  'rowlines',\n  'rowspacing',\n  'rowspan',\n  'rspace',\n  'rquote',\n  'scriptlevel',\n  'scriptminsize',\n  'scriptsizemultiplier',\n  'selection',\n  'separator',\n  'separators',\n  'stretchy',\n  'subscriptshift',\n  'supscriptshift',\n  'symmetric',\n  'voffset',\n  'width',\n  'xmlns',\n]);\n\nexport const xml = freeze([\n  'xlink:href',\n  'xml:id',\n  'xlink:title',\n  'xml:space',\n  'xmlns:xlink',\n]);\n","import { seal } from './utils';\n\n// eslint-disable-next-line unicorn/better-regex\nexport const MUSTACHE_EXPR = seal(/\\{\\{[\\s\\S]*|[\\s\\S]*\\}\\}/gm); // Specify template detection regex for SAFE_FOR_TEMPLATES mode\nexport const ERB_EXPR = seal(/<%[\\s\\S]*|[\\s\\S]*%>/gm);\nexport const DATA_ATTR = seal(/^data-[\\-\\w.\\u00B7-\\uFFFF]/); // eslint-disable-line no-useless-escape\nexport const ARIA_ATTR = seal(/^aria-[\\-\\w]+$/); // eslint-disable-line no-useless-escape\nexport const IS_ALLOWED_URI = seal(\n  /^(?:(?:(?:f|ht)tps?|mailto|tel|callto|cid|xmpp):|[^a-z]|[a-z+.\\-]+(?:[^a-z+.\\-:]|$))/i // eslint-disable-line no-useless-escape\n);\nexport const IS_SCRIPT_OR_DATA = seal(/^(?:\\w+script|data):/i);\nexport const ATTR_WHITESPACE = seal(\n  /[\\u0000-\\u0020\\u00A0\\u1680\\u180E\\u2000-\\u2029\\u205F\\u3000]/g // eslint-disable-line no-control-regex\n);\n","import * as TAGS from './tags';\nimport * as ATTRS from './attrs';\nimport * as EXPRESSIONS from './regexp';\nimport {\n  addToSet,\n  clone,\n  freeze,\n  arrayForEach,\n  arrayPop,\n  arrayPush,\n  stringMatch,\n  stringReplace,\n  stringToLowerCase,\n  stringIndexOf,\n  stringTrim,\n  regExpTest,\n  typeErrorCreate,\n  lookupGetter,\n} from './utils';\n\nconst getGlobal = () => (typeof window === 'undefined' ? null : window);\n\n/**\n * Creates a no-op policy for internal use only.\n * Don't export this function outside this module!\n * @param {?TrustedTypePolicyFactory} trustedTypes The policy factory.\n * @param {Document} document The document object (to determine policy name suffix)\n * @return {?TrustedTypePolicy} The policy created (or null, if Trusted Types\n * are not supported).\n */\nconst _createTrustedTypesPolicy = function (trustedTypes, document) {\n  if (\n    typeof trustedTypes !== 'object' ||\n    typeof trustedTypes.createPolicy !== 'function'\n  ) {\n    return null;\n  }\n\n  // Allow the callers to control the unique policy name\n  // by adding a data-tt-policy-suffix to the script element with the DOMPurify.\n  // Policy creation with duplicate names throws in Trusted Types.\n  let suffix = null;\n  const ATTR_NAME = 'data-tt-policy-suffix';\n  if (\n    document.currentScript &&\n    document.currentScript.hasAttribute(ATTR_NAME)\n  ) {\n    suffix = document.currentScript.getAttribute(ATTR_NAME);\n  }\n\n  const policyName = 'dompurify' + (suffix ? '#' + suffix : '');\n\n  try {\n    return trustedTypes.createPolicy(policyName, {\n      createHTML(html) {\n        return html;\n      },\n    });\n  } catch (_) {\n    // Policy creation failed (most likely another DOMPurify script has\n    // already run). Skip creating the policy, as this will only cause errors\n    // if TT are enforced.\n    console.warn(\n      'TrustedTypes policy ' + policyName + ' could not be created.'\n    );\n    return null;\n  }\n};\n\nfunction createDOMPurify(window = getGlobal()) {\n  const DOMPurify = (root) => createDOMPurify(root);\n\n  /**\n   * Version label, exposed for easier checks\n   * if DOMPurify is up to date or not\n   */\n  DOMPurify.version = VERSION;\n\n  /**\n   * Array of elements that DOMPurify removed during sanitation.\n   * Empty if nothing was removed.\n   */\n  DOMPurify.removed = [];\n\n  if (!window || !window.document || window.document.nodeType !== 9) {\n    // Not running in a browser, provide a factory function\n    // so that you can pass your own Window\n    DOMPurify.isSupported = false;\n\n    return DOMPurify;\n  }\n\n  const originalDocument = window.document;\n\n  let { document } = window;\n  const {\n    DocumentFragment,\n    HTMLTemplateElement,\n    Node,\n    Element,\n    NodeFilter,\n    NamedNodeMap = window.NamedNodeMap || window.MozNamedAttrMap,\n    Text,\n    Comment,\n    DOMParser,\n    trustedTypes,\n  } = window;\n\n  const ElementPrototype = Element.prototype;\n\n  const cloneNode = lookupGetter(ElementPrototype, 'cloneNode');\n  const getNextSibling = lookupGetter(ElementPrototype, 'nextSibling');\n  const getChildNodes = lookupGetter(ElementPrototype, 'childNodes');\n  const getParentNode = lookupGetter(ElementPrototype, 'parentNode');\n\n  // As per issue #47, the web-components registry is inherited by a\n  // new document created via createHTMLDocument. As per the spec\n  // (http://w3c.github.io/webcomponents/spec/custom/#creating-and-passing-registries)\n  // a new empty registry is used when creating a template contents owner\n  // document, so we use that as our parent document to ensure nothing\n  // is inherited.\n  if (typeof HTMLTemplateElement === 'function') {\n    const template = document.createElement('template');\n    if (template.content && template.content.ownerDocument) {\n      document = template.content.ownerDocument;\n    }\n  }\n\n  const trustedTypesPolicy = _createTrustedTypesPolicy(\n    trustedTypes,\n    originalDocument\n  );\n  const emptyHTML =\n    trustedTypesPolicy && RETURN_TRUSTED_TYPE\n      ? trustedTypesPolicy.createHTML('')\n      : '';\n\n  const {\n    implementation,\n    createNodeIterator,\n    getElementsByTagName,\n    createDocumentFragment,\n  } = document;\n  const { importNode } = originalDocument;\n\n  let documentMode = {};\n  try {\n    documentMode = clone(document).documentMode ? document.documentMode : {};\n  } catch (_) {}\n\n  let hooks = {};\n\n  /**\n   * Expose whether this browser supports running the full DOMPurify.\n   */\n  DOMPurify.isSupported =\n    implementation &&\n    typeof implementation.createHTMLDocument !== 'undefined' &&\n    documentMode !== 9;\n\n  const {\n    MUSTACHE_EXPR,\n    ERB_EXPR,\n    DATA_ATTR,\n    ARIA_ATTR,\n    IS_SCRIPT_OR_DATA,\n    ATTR_WHITESPACE,\n  } = EXPRESSIONS;\n\n  let { IS_ALLOWED_URI } = EXPRESSIONS;\n\n  /**\n   * We consider the elements and attributes below to be safe. Ideally\n   * don't add any new ones but feel free to remove unwanted ones.\n   */\n\n  /* allowed element names */\n  let ALLOWED_TAGS = null;\n  const DEFAULT_ALLOWED_TAGS = addToSet({}, [\n    ...TAGS.html,\n    ...TAGS.svg,\n    ...TAGS.svgFilters,\n    ...TAGS.mathMl,\n    ...TAGS.text,\n  ]);\n\n  /* Allowed attribute names */\n  let ALLOWED_ATTR = null;\n  const DEFAULT_ALLOWED_ATTR = addToSet({}, [\n    ...ATTRS.html,\n    ...ATTRS.svg,\n    ...ATTRS.mathMl,\n    ...ATTRS.xml,\n  ]);\n\n  /* Explicitly forbidden tags (overrides ALLOWED_TAGS/ADD_TAGS) */\n  let FORBID_TAGS = null;\n\n  /* Explicitly forbidden attributes (overrides ALLOWED_ATTR/ADD_ATTR) */\n  let FORBID_ATTR = null;\n\n  /* Decide if ARIA attributes are okay */\n  let ALLOW_ARIA_ATTR = true;\n\n  /* Decide if custom data attributes are okay */\n  let ALLOW_DATA_ATTR = true;\n\n  /* Decide if unknown protocols are okay */\n  let ALLOW_UNKNOWN_PROTOCOLS = false;\n\n  /* Output should be safe for common template engines.\n   * This means, DOMPurify removes data attributes, mustaches and ERB\n   */\n  let SAFE_FOR_TEMPLATES = false;\n\n  /* Decide if document with <html>... should be returned */\n  let WHOLE_DOCUMENT = false;\n\n  /* Track whether config is already set on this instance of DOMPurify. */\n  let SET_CONFIG = false;\n\n  /* Decide if all elements (e.g. style, script) must be children of\n   * document.body. By default, browsers might move them to document.head */\n  let FORCE_BODY = false;\n\n  /* Decide if a DOM `HTMLBodyElement` should be returned, instead of a html\n   * string (or a TrustedHTML object if Trusted Types are supported).\n   * If `WHOLE_DOCUMENT` is enabled a `HTMLHtmlElement` will be returned instead\n   */\n  let RETURN_DOM = false;\n\n  /* Decide if a DOM `DocumentFragment` should be returned, instead of a html\n   * string  (or a TrustedHTML object if Trusted Types are supported) */\n  let RETURN_DOM_FRAGMENT = false;\n\n  /* If `RETURN_DOM` or `RETURN_DOM_FRAGMENT` is enabled, decide if the returned DOM\n   * `Node` is imported into the current `Document`. If this flag is not enabled the\n   * `Node` will belong (its ownerDocument) to a fresh `HTMLDocument`, created by\n   * DOMPurify.\n   *\n   * This defaults to `true` starting DOMPurify 2.2.0. Note that setting it to `false`\n   * might cause XSS from attacks hidden in closed shadowroots in case the browser\n   * supports Declarative Shadow: DOM https://web.dev/declarative-shadow-dom/\n   */\n  let RETURN_DOM_IMPORT = true;\n\n  /* Try to return a Trusted Type object instead of a string, return a string in\n   * case Trusted Types are not supported  */\n  let RETURN_TRUSTED_TYPE = false;\n\n  /* Output should be free from DOM clobbering attacks? */\n  let SANITIZE_DOM = true;\n\n  /* Keep element content when removing element? */\n  let KEEP_CONTENT = true;\n\n  /* If a `Node` is passed to sanitize(), then performs sanitization in-place instead\n   * of importing it into a new Document and returning a sanitized copy */\n  let IN_PLACE = false;\n\n  /* Allow usage of profiles like html, svg and mathMl */\n  let USE_PROFILES = {};\n\n  /* Tags to ignore content of when KEEP_CONTENT is true */\n  const FORBID_CONTENTS = addToSet({}, [\n    'annotation-xml',\n    'audio',\n    'colgroup',\n    'desc',\n    'foreignobject',\n    'head',\n    'iframe',\n    'math',\n    'mi',\n    'mn',\n    'mo',\n    'ms',\n    'mtext',\n    'noembed',\n    'noframes',\n    'noscript',\n    'plaintext',\n    'script',\n    'style',\n    'svg',\n    'template',\n    'thead',\n    'title',\n    'video',\n    'xmp',\n  ]);\n\n  /* Tags that are safe for data: URIs */\n  let DATA_URI_TAGS = null;\n  const DEFAULT_DATA_URI_TAGS = addToSet({}, [\n    'audio',\n    'video',\n    'img',\n    'source',\n    'image',\n    'track',\n  ]);\n\n  /* Attributes safe for values like \"javascript:\" */\n  let URI_SAFE_ATTRIBUTES = null;\n  const DEFAULT_URI_SAFE_ATTRIBUTES = addToSet({}, [\n    'alt',\n    'class',\n    'for',\n    'id',\n    'label',\n    'name',\n    'pattern',\n    'placeholder',\n    'summary',\n    'title',\n    'value',\n    'style',\n    'xmlns',\n  ]);\n\n  /* Keep a reference to config to pass to hooks */\n  let CONFIG = null;\n\n  /* Ideally, do not touch anything below this line */\n  /* ______________________________________________ */\n\n  const formElement = document.createElement('form');\n\n  /**\n   * _parseConfig\n   *\n   * @param  {Object} cfg optional config literal\n   */\n  // eslint-disable-next-line complexity\n  const _parseConfig = function (cfg) {\n    if (CONFIG && CONFIG === cfg) {\n      return;\n    }\n\n    /* Shield configuration object from tampering */\n    if (!cfg || typeof cfg !== 'object') {\n      cfg = {};\n    }\n\n    /* Shield configuration object from prototype pollution */\n    cfg = clone(cfg);\n\n    /* Set configuration parameters */\n    ALLOWED_TAGS =\n      'ALLOWED_TAGS' in cfg\n        ? addToSet({}, cfg.ALLOWED_TAGS)\n        : DEFAULT_ALLOWED_TAGS;\n    ALLOWED_ATTR =\n      'ALLOWED_ATTR' in cfg\n        ? addToSet({}, cfg.ALLOWED_ATTR)\n        : DEFAULT_ALLOWED_ATTR;\n    URI_SAFE_ATTRIBUTES =\n      'ADD_URI_SAFE_ATTR' in cfg\n        ? addToSet(clone(DEFAULT_URI_SAFE_ATTRIBUTES), cfg.ADD_URI_SAFE_ATTR)\n        : DEFAULT_URI_SAFE_ATTRIBUTES;\n    DATA_URI_TAGS =\n      'ADD_DATA_URI_TAGS' in cfg\n        ? addToSet(clone(DEFAULT_DATA_URI_TAGS), cfg.ADD_DATA_URI_TAGS)\n        : DEFAULT_DATA_URI_TAGS;\n    FORBID_TAGS = 'FORBID_TAGS' in cfg ? addToSet({}, cfg.FORBID_TAGS) : {};\n    FORBID_ATTR = 'FORBID_ATTR' in cfg ? addToSet({}, cfg.FORBID_ATTR) : {};\n    USE_PROFILES = 'USE_PROFILES' in cfg ? cfg.USE_PROFILES : false;\n    ALLOW_ARIA_ATTR = cfg.ALLOW_ARIA_ATTR !== false; // Default true\n    ALLOW_DATA_ATTR = cfg.ALLOW_DATA_ATTR !== false; // Default true\n    ALLOW_UNKNOWN_PROTOCOLS = cfg.ALLOW_UNKNOWN_PROTOCOLS || false; // Default false\n    SAFE_FOR_TEMPLATES = cfg.SAFE_FOR_TEMPLATES || false; // Default false\n    WHOLE_DOCUMENT = cfg.WHOLE_DOCUMENT || false; // Default false\n    RETURN_DOM = cfg.RETURN_DOM || false; // Default false\n    RETURN_DOM_FRAGMENT = cfg.RETURN_DOM_FRAGMENT || false; // Default false\n    RETURN_DOM_IMPORT = cfg.RETURN_DOM_IMPORT !== false; // Default true\n    RETURN_TRUSTED_TYPE = cfg.RETURN_TRUSTED_TYPE || false; // Default false\n    FORCE_BODY = cfg.FORCE_BODY || false; // Default false\n    SANITIZE_DOM = cfg.SANITIZE_DOM !== false; // Default true\n    KEEP_CONTENT = cfg.KEEP_CONTENT !== false; // Default true\n    IN_PLACE = cfg.IN_PLACE || false; // Default false\n    IS_ALLOWED_URI = cfg.ALLOWED_URI_REGEXP || IS_ALLOWED_URI;\n    if (SAFE_FOR_TEMPLATES) {\n      ALLOW_DATA_ATTR = false;\n    }\n\n    if (RETURN_DOM_FRAGMENT) {\n      RETURN_DOM = true;\n    }\n\n    /* Parse profile info */\n    if (USE_PROFILES) {\n      ALLOWED_TAGS = addToSet({}, [...TAGS.text]);\n      ALLOWED_ATTR = [];\n      if (USE_PROFILES.html === true) {\n        addToSet(ALLOWED_TAGS, TAGS.html);\n        addToSet(ALLOWED_ATTR, ATTRS.html);\n      }\n\n      if (USE_PROFILES.svg === true) {\n        addToSet(ALLOWED_TAGS, TAGS.svg);\n        addToSet(ALLOWED_ATTR, ATTRS.svg);\n        addToSet(ALLOWED_ATTR, ATTRS.xml);\n      }\n\n      if (USE_PROFILES.svgFilters === true) {\n        addToSet(ALLOWED_TAGS, TAGS.svgFilters);\n        addToSet(ALLOWED_ATTR, ATTRS.svg);\n        addToSet(ALLOWED_ATTR, ATTRS.xml);\n      }\n\n      if (USE_PROFILES.mathMl === true) {\n        addToSet(ALLOWED_TAGS, TAGS.mathMl);\n        addToSet(ALLOWED_ATTR, ATTRS.mathMl);\n        addToSet(ALLOWED_ATTR, ATTRS.xml);\n      }\n    }\n\n    /* Merge configuration parameters */\n    if (cfg.ADD_TAGS) {\n      if (ALLOWED_TAGS === DEFAULT_ALLOWED_TAGS) {\n        ALLOWED_TAGS = clone(ALLOWED_TAGS);\n      }\n\n      addToSet(ALLOWED_TAGS, cfg.ADD_TAGS);\n    }\n\n    if (cfg.ADD_ATTR) {\n      if (ALLOWED_ATTR === DEFAULT_ALLOWED_ATTR) {\n        ALLOWED_ATTR = clone(ALLOWED_ATTR);\n      }\n\n      addToSet(ALLOWED_ATTR, cfg.ADD_ATTR);\n    }\n\n    if (cfg.ADD_URI_SAFE_ATTR) {\n      addToSet(URI_SAFE_ATTRIBUTES, cfg.ADD_URI_SAFE_ATTR);\n    }\n\n    /* Add #text in case KEEP_CONTENT is set to true */\n    if (KEEP_CONTENT) {\n      ALLOWED_TAGS['#text'] = true;\n    }\n\n    /* Add html, head and body to ALLOWED_TAGS in case WHOLE_DOCUMENT is true */\n    if (WHOLE_DOCUMENT) {\n      addToSet(ALLOWED_TAGS, ['html', 'head', 'body']);\n    }\n\n    /* Add tbody to ALLOWED_TAGS in case tables are permitted, see #286, #365 */\n    if (ALLOWED_TAGS.table) {\n      addToSet(ALLOWED_TAGS, ['tbody']);\n      delete FORBID_TAGS.tbody;\n    }\n\n    // Prevent further manipulation of configuration.\n    // Not available in IE8, Safari 5, etc.\n    if (freeze) {\n      freeze(cfg);\n    }\n\n    CONFIG = cfg;\n  };\n\n  const MATHML_TEXT_INTEGRATION_POINTS = addToSet({}, [\n    'mi',\n    'mo',\n    'mn',\n    'ms',\n    'mtext',\n  ]);\n\n  const HTML_INTEGRATION_POINTS = addToSet({}, [\n    'foreignobject',\n    'desc',\n    'title',\n    'annotation-xml',\n  ]);\n\n  /* Keep track of all possible SVG and MathML tags\n   * so that we can perform the namespace checks\n   * correctly. */\n  const ALL_SVG_TAGS = addToSet({}, TAGS.svg);\n  addToSet(ALL_SVG_TAGS, TAGS.svgFilters);\n  addToSet(ALL_SVG_TAGS, TAGS.svgDisallowed);\n\n  const ALL_MATHML_TAGS = addToSet({}, TAGS.mathMl);\n  addToSet(ALL_MATHML_TAGS, TAGS.mathMlDisallowed);\n\n  const MATHML_NAMESPACE = 'http://www.w3.org/1998/Math/MathML';\n  const SVG_NAMESPACE = 'http://www.w3.org/2000/svg';\n  const HTML_NAMESPACE = 'http://www.w3.org/1999/xhtml';\n\n  /**\n   *\n   *\n   * @param  {Element} element a DOM element whose namespace is being checked\n   * @returns {boolean} Return false if the element has a\n   *  namespace that a spec-compliant parser would never\n   *  return. Return true otherwise.\n   */\n  const _checkValidNamespace = function (element) {\n    let parent = getParentNode(element);\n\n    // In JSDOM, if we're inside shadow DOM, then parentNode\n    // can be null. We just simulate parent in this case.\n    if (!parent || !parent.tagName) {\n      parent = {\n        namespaceURI: HTML_NAMESPACE,\n        tagName: 'template',\n      };\n    }\n\n    const tagName = stringToLowerCase(element.tagName);\n    const parentTagName = stringToLowerCase(parent.tagName);\n\n    if (element.namespaceURI === SVG_NAMESPACE) {\n      // The only way to switch from HTML namespace to SVG\n      // is via <svg>. If it happens via any other tag, then\n      // it should be killed.\n      if (parent.namespaceURI === HTML_NAMESPACE) {\n        return tagName === 'svg';\n      }\n\n      // The only way to switch from MathML to SVG is via\n      // svg if parent is either <annotation-xml> or MathML\n      // text integration points.\n      if (parent.namespaceURI === MATHML_NAMESPACE) {\n        return (\n          tagName === 'svg' &&\n          (parentTagName === 'annotation-xml' ||\n            MATHML_TEXT_INTEGRATION_POINTS[parentTagName])\n        );\n      }\n\n      // We only allow elements that are defined in SVG\n      // spec. All others are disallowed in SVG namespace.\n      return Boolean(ALL_SVG_TAGS[tagName]);\n    }\n\n    if (element.namespaceURI === MATHML_NAMESPACE) {\n      // The only way to switch from HTML namespace to MathML\n      // is via <math>. If it happens via any other tag, then\n      // it should be killed.\n      if (parent.namespaceURI === HTML_NAMESPACE) {\n        return tagName === 'math';\n      }\n\n      // The only way to switch from SVG to MathML is via\n      // <math> and HTML integration points\n      if (parent.namespaceURI === SVG_NAMESPACE) {\n        return tagName === 'math' && HTML_INTEGRATION_POINTS[parentTagName];\n      }\n\n      // We only allow elements that are defined in MathML\n      // spec. All others are disallowed in MathML namespace.\n      return Boolean(ALL_MATHML_TAGS[tagName]);\n    }\n\n    if (element.namespaceURI === HTML_NAMESPACE) {\n      // The only way to switch from SVG to HTML is via\n      // HTML integration points, and from MathML to HTML\n      // is via MathML text integration points\n      if (\n        parent.namespaceURI === SVG_NAMESPACE &&\n        !HTML_INTEGRATION_POINTS[parentTagName]\n      ) {\n        return false;\n      }\n\n      if (\n        parent.namespaceURI === MATHML_NAMESPACE &&\n        !MATHML_TEXT_INTEGRATION_POINTS[parentTagName]\n      ) {\n        return false;\n      }\n\n      // Certain elements are allowed in both SVG and HTML\n      // namespace. We need to specify them explicitly\n      // so that they don't get erronously deleted from\n      // HTML namespace.\n      const commonSvgAndHTMLElements = addToSet({}, [\n        'title',\n        'style',\n        'font',\n        'a',\n        'script',\n      ]);\n\n      // We disallow tags that are specific for MathML\n      // or SVG and should never appear in HTML namespace\n      return (\n        !ALL_MATHML_TAGS[tagName] &&\n        (commonSvgAndHTMLElements[tagName] || !ALL_SVG_TAGS[tagName])\n      );\n    }\n\n    // The code should never reach this place (this means\n    // that the element somehow got namespace that is not\n    // HTML, SVG or MathML). Return false just in case.\n    return false;\n  };\n\n  /**\n   * _forceRemove\n   *\n   * @param  {Node} node a DOM node\n   */\n  const _forceRemove = function (node) {\n    arrayPush(DOMPurify.removed, { element: node });\n    try {\n      node.parentNode.removeChild(node);\n    } catch (_) {\n      try {\n        node.outerHTML = emptyHTML;\n      } catch (_) {\n        node.remove();\n      }\n    }\n  };\n\n  /**\n   * _removeAttribute\n   *\n   * @param  {String} name an Attribute name\n   * @param  {Node} node a DOM node\n   */\n  const _removeAttribute = function (name, node) {\n    try {\n      arrayPush(DOMPurify.removed, {\n        attribute: node.getAttributeNode(name),\n        from: node,\n      });\n    } catch (_) {\n      arrayPush(DOMPurify.removed, {\n        attribute: null,\n        from: node,\n      });\n    }\n\n    node.removeAttribute(name);\n  };\n\n  /**\n   * _initDocument\n   *\n   * @param  {String} dirty a string of dirty markup\n   * @return {Document} a DOM, filled with the dirty markup\n   */\n  const _initDocument = function (dirty) {\n    /* Create a HTML document */\n    let doc;\n    let leadingWhitespace;\n\n    if (FORCE_BODY) {\n      dirty = '<remove></remove>' + dirty;\n    } else {\n      /* If FORCE_BODY isn't used, leading whitespace needs to be preserved manually */\n      const matches = stringMatch(dirty, /^[\\r\\n\\t ]+/);\n      leadingWhitespace = matches && matches[0];\n    }\n\n    const dirtyPayload = trustedTypesPolicy\n      ? trustedTypesPolicy.createHTML(dirty)\n      : dirty;\n    /* Use the DOMParser API by default, fallback later if needs be */\n    try {\n      doc = new DOMParser().parseFromString(dirtyPayload, 'text/html');\n    } catch (_) {}\n\n    /* Use createHTMLDocument in case DOMParser is not available */\n    if (!doc || !doc.documentElement) {\n      doc = implementation.createHTMLDocument('');\n      const { body } = doc;\n      body.parentNode.removeChild(body.parentNode.firstElementChild);\n      body.outerHTML = dirtyPayload;\n    }\n\n    if (dirty && leadingWhitespace) {\n      doc.body.insertBefore(\n        document.createTextNode(leadingWhitespace),\n        doc.body.childNodes[0] || null\n      );\n    }\n\n    /* Work on whole document or just its body */\n    return getElementsByTagName.call(doc, WHOLE_DOCUMENT ? 'html' : 'body')[0];\n  };\n\n  /**\n   * _createIterator\n   *\n   * @param  {Document} root document/fragment to create iterator for\n   * @return {Iterator} iterator instance\n   */\n  const _createIterator = function (root) {\n    return createNodeIterator.call(\n      root.ownerDocument || root,\n      root,\n      NodeFilter.SHOW_ELEMENT | NodeFilter.SHOW_COMMENT | NodeFilter.SHOW_TEXT,\n      () => {\n        return NodeFilter.FILTER_ACCEPT;\n      },\n      false\n    );\n  };\n\n  /**\n   * _isClobbered\n   *\n   * @param  {Node} elm element to check for clobbering attacks\n   * @return {Boolean} true if clobbered, false if safe\n   */\n  const _isClobbered = function (elm) {\n    if (elm instanceof Text || elm instanceof Comment) {\n      return false;\n    }\n\n    if (\n      typeof elm.nodeName !== 'string' ||\n      typeof elm.textContent !== 'string' ||\n      typeof elm.removeChild !== 'function' ||\n      !(elm.attributes instanceof NamedNodeMap) ||\n      typeof elm.removeAttribute !== 'function' ||\n      typeof elm.setAttribute !== 'function' ||\n      typeof elm.namespaceURI !== 'string' ||\n      typeof elm.insertBefore !== 'function'\n    ) {\n      return true;\n    }\n\n    return false;\n  };\n\n  /**\n   * _isNode\n   *\n   * @param  {Node} obj object to check whether it's a DOM node\n   * @return {Boolean} true is object is a DOM node\n   */\n  const _isNode = function (object) {\n    return typeof Node === 'object'\n      ? object instanceof Node\n      : object &&\n          typeof object === 'object' &&\n          typeof object.nodeType === 'number' &&\n          typeof object.nodeName === 'string';\n  };\n\n  /**\n   * _executeHook\n   * Execute user configurable hooks\n   *\n   * @param  {String} entryPoint  Name of the hook's entry point\n   * @param  {Node} currentNode node to work on with the hook\n   * @param  {Object} data additional hook parameters\n   */\n  const _executeHook = function (entryPoint, currentNode, data) {\n    if (!hooks[entryPoint]) {\n      return;\n    }\n\n    arrayForEach(hooks[entryPoint], (hook) => {\n      hook.call(DOMPurify, currentNode, data, CONFIG);\n    });\n  };\n\n  /**\n   * _sanitizeElements\n   *\n   * @protect nodeName\n   * @protect textContent\n   * @protect removeChild\n   *\n   * @param   {Node} currentNode to check for permission to exist\n   * @return  {Boolean} true if node was killed, false if left alive\n   */\n  const _sanitizeElements = function (currentNode) {\n    let content;\n\n    /* Execute a hook if present */\n    _executeHook('beforeSanitizeElements', currentNode, null);\n\n    /* Check if element is clobbered or can clobber */\n    if (_isClobbered(currentNode)) {\n      _forceRemove(currentNode);\n      return true;\n    }\n\n    /* Check if tagname contains Unicode */\n    if (stringMatch(currentNode.nodeName, /[\\u0080-\\uFFFF]/)) {\n      _forceRemove(currentNode);\n      return true;\n    }\n\n    /* Now let's check the element's type and name */\n    const tagName = stringToLowerCase(currentNode.nodeName);\n\n    /* Execute a hook if present */\n    _executeHook('uponSanitizeElement', currentNode, {\n      tagName,\n      allowedTags: ALLOWED_TAGS,\n    });\n\n    /* Detect mXSS attempts abusing namespace confusion */\n    if (\n      !_isNode(currentNode.firstElementChild) &&\n      (!_isNode(currentNode.content) ||\n        !_isNode(currentNode.content.firstElementChild)) &&\n      regExpTest(/<[/\\w]/g, currentNode.innerHTML) &&\n      regExpTest(/<[/\\w]/g, currentNode.textContent)\n    ) {\n      _forceRemove(currentNode);\n      return true;\n    }\n\n    /* Remove element if anything forbids its presence */\n    if (!ALLOWED_TAGS[tagName] || FORBID_TAGS[tagName]) {\n      /* Keep content except for bad-listed elements */\n      if (KEEP_CONTENT && !FORBID_CONTENTS[tagName]) {\n        const parentNode = getParentNode(currentNode);\n        const childNodes = getChildNodes(currentNode);\n        const childCount = childNodes.length;\n        for (let i = childCount - 1; i >= 0; --i) {\n          parentNode.insertBefore(\n            cloneNode(childNodes[i], true),\n            getNextSibling(currentNode)\n          );\n        }\n      }\n\n      _forceRemove(currentNode);\n      return true;\n    }\n\n    /* Check whether element has a valid namespace */\n    if (currentNode instanceof Element && !_checkValidNamespace(currentNode)) {\n      _forceRemove(currentNode);\n      return true;\n    }\n\n    if (\n      (tagName === 'noscript' || tagName === 'noembed') &&\n      regExpTest(/<\\/no(script|embed)/i, currentNode.innerHTML)\n    ) {\n      _forceRemove(currentNode);\n      return true;\n    }\n\n    /* Sanitize element content to be template-safe */\n    if (SAFE_FOR_TEMPLATES && currentNode.nodeType === 3) {\n      /* Get the element's text content */\n      content = currentNode.textContent;\n      content = stringReplace(content, MUSTACHE_EXPR, ' ');\n      content = stringReplace(content, ERB_EXPR, ' ');\n      if (currentNode.textContent !== content) {\n        arrayPush(DOMPurify.removed, { element: currentNode.cloneNode() });\n        currentNode.textContent = content;\n      }\n    }\n\n    /* Execute a hook if present */\n    _executeHook('afterSanitizeElements', currentNode, null);\n\n    return false;\n  };\n\n  /**\n   * _isValidAttribute\n   *\n   * @param  {string} lcTag Lowercase tag name of containing element.\n   * @param  {string} lcName Lowercase attribute name.\n   * @param  {string} value Attribute value.\n   * @return {Boolean} Returns true if `value` is valid, otherwise false.\n   */\n  // eslint-disable-next-line complexity\n  const _isValidAttribute = function (lcTag, lcName, value) {\n    /* Make sure attribute cannot clobber */\n    if (\n      SANITIZE_DOM &&\n      (lcName === 'id' || lcName === 'name') &&\n      (value in document || value in formElement)\n    ) {\n      return false;\n    }\n\n    /* Allow valid data-* attributes: At least one character after \"-\"\n        (https://html.spec.whatwg.org/multipage/dom.html#embedding-custom-non-visible-data-with-the-data-*-attributes)\n        XML-compatible (https://html.spec.whatwg.org/multipage/infrastructure.html#xml-compatible and http://www.w3.org/TR/xml/#d0e804)\n        We don't need to check the value; it's always URI safe. */\n    if (ALLOW_DATA_ATTR && regExpTest(DATA_ATTR, lcName)) {\n      // This attribute is safe\n    } else if (ALLOW_ARIA_ATTR && regExpTest(ARIA_ATTR, lcName)) {\n      // This attribute is safe\n      /* Otherwise, check the name is permitted */\n    } else if (!ALLOWED_ATTR[lcName] || FORBID_ATTR[lcName]) {\n      return false;\n\n      /* Check value is safe. First, is attr inert? If so, is safe */\n    } else if (URI_SAFE_ATTRIBUTES[lcName]) {\n      // This attribute is safe\n      /* Check no script, data or unknown possibly unsafe URI\n        unless we know URI values are safe for that attribute */\n    } else if (\n      regExpTest(IS_ALLOWED_URI, stringReplace(value, ATTR_WHITESPACE, ''))\n    ) {\n      // This attribute is safe\n      /* Keep image data URIs alive if src/xlink:href is allowed */\n      /* Further prevent gadget XSS for dynamically built script tags */\n    } else if (\n      (lcName === 'src' || lcName === 'xlink:href' || lcName === 'href') &&\n      lcTag !== 'script' &&\n      stringIndexOf(value, 'data:') === 0 &&\n      DATA_URI_TAGS[lcTag]\n    ) {\n      // This attribute is safe\n      /* Allow unknown protocols: This provides support for links that\n        are handled by protocol handlers which may be unknown ahead of\n        time, e.g. fb:, spotify: */\n    } else if (\n      ALLOW_UNKNOWN_PROTOCOLS &&\n      !regExpTest(IS_SCRIPT_OR_DATA, stringReplace(value, ATTR_WHITESPACE, ''))\n    ) {\n      // This attribute is safe\n      /* Check for binary attributes */\n      // eslint-disable-next-line no-negated-condition\n    } else if (!value) {\n      // Binary attributes are safe at this point\n      /* Anything else, presume unsafe, do not add it back */\n    } else {\n      return false;\n    }\n\n    return true;\n  };\n\n  /**\n   * _sanitizeAttributes\n   *\n   * @protect attributes\n   * @protect nodeName\n   * @protect removeAttribute\n   * @protect setAttribute\n   *\n   * @param  {Node} currentNode to sanitize\n   */\n  const _sanitizeAttributes = function (currentNode) {\n    let attr;\n    let value;\n    let lcName;\n    let l;\n    /* Execute a hook if present */\n    _executeHook('beforeSanitizeAttributes', currentNode, null);\n\n    const { attributes } = currentNode;\n\n    /* Check if we have attributes; if not we might have a text node */\n    if (!attributes) {\n      return;\n    }\n\n    const hookEvent = {\n      attrName: '',\n      attrValue: '',\n      keepAttr: true,\n      allowedAttributes: ALLOWED_ATTR,\n    };\n    l = attributes.length;\n\n    /* Go backwards over all attributes; safely remove bad ones */\n    while (l--) {\n      attr = attributes[l];\n      const { name, namespaceURI } = attr;\n      value = stringTrim(attr.value);\n      lcName = stringToLowerCase(name);\n\n      /* Execute a hook if present */\n      hookEvent.attrName = lcName;\n      hookEvent.attrValue = value;\n      hookEvent.keepAttr = true;\n      hookEvent.forceKeepAttr = undefined; // Allows developers to see this is a property they can set\n      _executeHook('uponSanitizeAttribute', currentNode, hookEvent);\n      value = hookEvent.attrValue;\n      /* Did the hooks approve of the attribute? */\n      if (hookEvent.forceKeepAttr) {\n        continue;\n      }\n\n      /* Remove attribute */\n      _removeAttribute(name, currentNode);\n\n      /* Did the hooks approve of the attribute? */\n      if (!hookEvent.keepAttr) {\n        continue;\n      }\n\n      /* Work around a security issue in jQuery 3.0 */\n      if (regExpTest(/\\/>/i, value)) {\n        _removeAttribute(name, currentNode);\n        continue;\n      }\n\n      /* Sanitize attribute content to be template-safe */\n      if (SAFE_FOR_TEMPLATES) {\n        value = stringReplace(value, MUSTACHE_EXPR, ' ');\n        value = stringReplace(value, ERB_EXPR, ' ');\n      }\n\n      /* Is `value` valid for this attribute? */\n      const lcTag = currentNode.nodeName.toLowerCase();\n      if (!_isValidAttribute(lcTag, lcName, value)) {\n        continue;\n      }\n\n      /* Handle invalid data-* attribute set by try-catching it */\n      try {\n        if (namespaceURI) {\n          currentNode.setAttributeNS(namespaceURI, name, value);\n        } else {\n          /* Fallback to setAttribute() for browser-unrecognized namespaces e.g. \"x-schema\". */\n          currentNode.setAttribute(name, value);\n        }\n\n        arrayPop(DOMPurify.removed);\n      } catch (_) {}\n    }\n\n    /* Execute a hook if present */\n    _executeHook('afterSanitizeAttributes', currentNode, null);\n  };\n\n  /**\n   * _sanitizeShadowDOM\n   *\n   * @param  {DocumentFragment} fragment to iterate over recursively\n   */\n  const _sanitizeShadowDOM = function (fragment) {\n    let shadowNode;\n    const shadowIterator = _createIterator(fragment);\n\n    /* Execute a hook if present */\n    _executeHook('beforeSanitizeShadowDOM', fragment, null);\n\n    while ((shadowNode = shadowIterator.nextNode())) {\n      /* Execute a hook if present */\n      _executeHook('uponSanitizeShadowNode', shadowNode, null);\n\n      /* Sanitize tags and elements */\n      if (_sanitizeElements(shadowNode)) {\n        continue;\n      }\n\n      /* Deep shadow DOM detected */\n      if (shadowNode.content instanceof DocumentFragment) {\n        _sanitizeShadowDOM(shadowNode.content);\n      }\n\n      /* Check attributes, sanitize if necessary */\n      _sanitizeAttributes(shadowNode);\n    }\n\n    /* Execute a hook if present */\n    _executeHook('afterSanitizeShadowDOM', fragment, null);\n  };\n\n  /**\n   * Sanitize\n   * Public method providing core sanitation functionality\n   *\n   * @param {String|Node} dirty string or DOM node\n   * @param {Object} configuration object\n   */\n  // eslint-disable-next-line complexity\n  DOMPurify.sanitize = function (dirty, cfg) {\n    let body;\n    let importedNode;\n    let currentNode;\n    let oldNode;\n    let returnNode;\n    /* Make sure we have a string to sanitize.\n      DO NOT return early, as this will return the wrong type if\n      the user has requested a DOM object rather than a string */\n    if (!dirty) {\n      dirty = '<!-->';\n    }\n\n    /* Stringify, in case dirty is an object */\n    if (typeof dirty !== 'string' && !_isNode(dirty)) {\n      // eslint-disable-next-line no-negated-condition\n      if (typeof dirty.toString !== 'function') {\n        throw typeErrorCreate('toString is not a function');\n      } else {\n        dirty = dirty.toString();\n        if (typeof dirty !== 'string') {\n          throw typeErrorCreate('dirty is not a string, aborting');\n        }\n      }\n    }\n\n    /* Check we can run. Otherwise fall back or ignore */\n    if (!DOMPurify.isSupported) {\n      if (\n        typeof window.toStaticHTML === 'object' ||\n        typeof window.toStaticHTML === 'function'\n      ) {\n        if (typeof dirty === 'string') {\n          return window.toStaticHTML(dirty);\n        }\n\n        if (_isNode(dirty)) {\n          return window.toStaticHTML(dirty.outerHTML);\n        }\n      }\n\n      return dirty;\n    }\n\n    /* Assign config vars */\n    if (!SET_CONFIG) {\n      _parseConfig(cfg);\n    }\n\n    /* Clean up removed elements */\n    DOMPurify.removed = [];\n\n    /* Check if dirty is correctly typed for IN_PLACE */\n    if (typeof dirty === 'string') {\n      IN_PLACE = false;\n    }\n\n    if (IN_PLACE) {\n      /* No special handling necessary for in-place sanitization */\n    } else if (dirty instanceof Node) {\n      /* If dirty is a DOM element, append to an empty document to avoid\n         elements being stripped by the parser */\n      body = _initDocument('<!---->');\n      importedNode = body.ownerDocument.importNode(dirty, true);\n      if (importedNode.nodeType === 1 && importedNode.nodeName === 'BODY') {\n        /* Node is already a body, use as is */\n        body = importedNode;\n      } else if (importedNode.nodeName === 'HTML') {\n        body = importedNode;\n      } else {\n        // eslint-disable-next-line unicorn/prefer-node-append\n        body.appendChild(importedNode);\n      }\n    } else {\n      /* Exit directly if we have nothing to do */\n      if (\n        !RETURN_DOM &&\n        !SAFE_FOR_TEMPLATES &&\n        !WHOLE_DOCUMENT &&\n        // eslint-disable-next-line unicorn/prefer-includes\n        dirty.indexOf('<') === -1\n      ) {\n        return trustedTypesPolicy && RETURN_TRUSTED_TYPE\n          ? trustedTypesPolicy.createHTML(dirty)\n          : dirty;\n      }\n\n      /* Initialize the document to work on */\n      body = _initDocument(dirty);\n\n      /* Check we have a DOM node from the data */\n      if (!body) {\n        return RETURN_DOM ? null : emptyHTML;\n      }\n    }\n\n    /* Remove first element node (ours) if FORCE_BODY is set */\n    if (body && FORCE_BODY) {\n      _forceRemove(body.firstChild);\n    }\n\n    /* Get node iterator */\n    const nodeIterator = _createIterator(IN_PLACE ? dirty : body);\n\n    /* Now start iterating over the created document */\n    while ((currentNode = nodeIterator.nextNode())) {\n      /* Fix IE's strange behavior with manipulated textNodes #89 */\n      if (currentNode.nodeType === 3 && currentNode === oldNode) {\n        continue;\n      }\n\n      /* Sanitize tags and elements */\n      if (_sanitizeElements(currentNode)) {\n        continue;\n      }\n\n      /* Shadow DOM detected, sanitize it */\n      if (currentNode.content instanceof DocumentFragment) {\n        _sanitizeShadowDOM(currentNode.content);\n      }\n\n      /* Check attributes, sanitize if necessary */\n      _sanitizeAttributes(currentNode);\n\n      oldNode = currentNode;\n    }\n\n    oldNode = null;\n\n    /* If we sanitized `dirty` in-place, return it. */\n    if (IN_PLACE) {\n      return dirty;\n    }\n\n    /* Return sanitized string or DOM */\n    if (RETURN_DOM) {\n      if (RETURN_DOM_FRAGMENT) {\n        returnNode = createDocumentFragment.call(body.ownerDocument);\n\n        while (body.firstChild) {\n          // eslint-disable-next-line unicorn/prefer-node-append\n          returnNode.appendChild(body.firstChild);\n        }\n      } else {\n        returnNode = body;\n      }\n\n      if (RETURN_DOM_IMPORT) {\n        /*\n          AdoptNode() is not used because internal state is not reset\n          (e.g. the past names map of a HTMLFormElement), this is safe\n          in theory but we would rather not risk another attack vector.\n          The state that is cloned by importNode() is explicitly defined\n          by the specs.\n        */\n        returnNode = importNode.call(originalDocument, returnNode, true);\n      }\n\n      return returnNode;\n    }\n\n    let serializedHTML = WHOLE_DOCUMENT ? body.outerHTML : body.innerHTML;\n\n    /* Sanitize final string template-safe */\n    if (SAFE_FOR_TEMPLATES) {\n      serializedHTML = stringReplace(serializedHTML, MUSTACHE_EXPR, ' ');\n      serializedHTML = stringReplace(serializedHTML, ERB_EXPR, ' ');\n    }\n\n    return trustedTypesPolicy && RETURN_TRUSTED_TYPE\n      ? trustedTypesPolicy.createHTML(serializedHTML)\n      : serializedHTML;\n  };\n\n  /**\n   * Public method to set the configuration once\n   * setConfig\n   *\n   * @param {Object} cfg configuration object\n   */\n  DOMPurify.setConfig = function (cfg) {\n    _parseConfig(cfg);\n    SET_CONFIG = true;\n  };\n\n  /**\n   * Public method to remove the configuration\n   * clearConfig\n   *\n   */\n  DOMPurify.clearConfig = function () {\n    CONFIG = null;\n    SET_CONFIG = false;\n  };\n\n  /**\n   * Public method to check if an attribute value is valid.\n   * Uses last set config, if any. Otherwise, uses config defaults.\n   * isValidAttribute\n   *\n   * @param  {string} tag Tag name of containing element.\n   * @param  {string} attr Attribute name.\n   * @param  {string} value Attribute value.\n   * @return {Boolean} Returns true if `value` is valid. Otherwise, returns false.\n   */\n  DOMPurify.isValidAttribute = function (tag, attr, value) {\n    /* Initialize shared config vars if necessary. */\n    if (!CONFIG) {\n      _parseConfig({});\n    }\n\n    const lcTag = stringToLowerCase(tag);\n    const lcName = stringToLowerCase(attr);\n    return _isValidAttribute(lcTag, lcName, value);\n  };\n\n  /**\n   * AddHook\n   * Public method to add DOMPurify hooks\n   *\n   * @param {String} entryPoint entry point for the hook to add\n   * @param {Function} hookFunction function to execute\n   */\n  DOMPurify.addHook = function (entryPoint, hookFunction) {\n    if (typeof hookFunction !== 'function') {\n      return;\n    }\n\n    hooks[entryPoint] = hooks[entryPoint] || [];\n    arrayPush(hooks[entryPoint], hookFunction);\n  };\n\n  /**\n   * RemoveHook\n   * Public method to remove a DOMPurify hook at a given entryPoint\n   * (pops it from the stack of hooks if more are present)\n   *\n   * @param {String} entryPoint entry point for the hook to remove\n   */\n  DOMPurify.removeHook = function (entryPoint) {\n    if (hooks[entryPoint]) {\n      arrayPop(hooks[entryPoint]);\n    }\n  };\n\n  /**\n   * RemoveHooks\n   * Public method to remove all DOMPurify hooks at a given entryPoint\n   *\n   * @param  {String} entryPoint entry point for the hooks to remove\n   */\n  DOMPurify.removeHooks = function (entryPoint) {\n    if (hooks[entryPoint]) {\n      hooks[entryPoint] = [];\n    }\n  };\n\n  /**\n   * RemoveAllHooks\n   * Public method to remove all DOMPurify hooks\n   *\n   */\n  DOMPurify.removeAllHooks = function () {\n    hooks = {};\n  };\n\n  return DOMPurify;\n}\n\nexport default createDOMPurify();\n"]},"metadata":{},"sourceType":"script"}