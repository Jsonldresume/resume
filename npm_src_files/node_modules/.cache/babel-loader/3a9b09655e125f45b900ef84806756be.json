{"ast":null,"code":"'use strict';\n\nvar chunkedSplice = require('../util/chunked-splice.js');\n\nvar chunkedPush = require('../util/chunked-push.js');\n\nvar shallow = require('../util/shallow.js');\n\nvar resolveAll = require('../util/resolve-all.js');\n\nvar classifyCharacter = require('../util/classify-character.js');\n\nvar movePoint = require('../util/move-point.js');\n\nvar attention = {\n  name: 'attention',\n  tokenize: tokenizeAttention,\n  resolveAll: resolveAllAttention\n};\n\nfunction resolveAllAttention(events, context) {\n  var index = -1;\n  var open;\n  var group;\n  var text;\n  var openingSequence;\n  var closingSequence;\n  var use;\n  var nextEvents;\n  var offset; // Walk through all events.\n  //\n  // Note: performance of this is fine on an mb of normal markdown, but it’s\n  // a bottleneck for malicious stuff.\n\n  while (++index < events.length) {\n    // Find a token that can close.\n    if (events[index][0] === 'enter' && events[index][1].type === 'attentionSequence' && events[index][1]._close) {\n      open = index; // Now walk back to find an opener.\n\n      while (open--) {\n        // Find a token that can open the closer.\n        if (events[open][0] === 'exit' && events[open][1].type === 'attentionSequence' && events[open][1]._open && // If the markers are the same:\n        context.sliceSerialize(events[open][1]).charCodeAt(0) === context.sliceSerialize(events[index][1]).charCodeAt(0)) {\n          // If the opening can close or the closing can open,\n          // and the close size *is not* a multiple of three,\n          // but the sum of the opening and closing size *is* multiple of three,\n          // then don’t match.\n          if ((events[open][1]._close || events[index][1]._open) && (events[index][1].end.offset - events[index][1].start.offset) % 3 && !((events[open][1].end.offset - events[open][1].start.offset + events[index][1].end.offset - events[index][1].start.offset) % 3)) {\n            continue;\n          } // Number of markers to use from the sequence.\n\n\n          use = events[open][1].end.offset - events[open][1].start.offset > 1 && events[index][1].end.offset - events[index][1].start.offset > 1 ? 2 : 1;\n          openingSequence = {\n            type: use > 1 ? 'strongSequence' : 'emphasisSequence',\n            start: movePoint(shallow(events[open][1].end), -use),\n            end: shallow(events[open][1].end)\n          };\n          closingSequence = {\n            type: use > 1 ? 'strongSequence' : 'emphasisSequence',\n            start: shallow(events[index][1].start),\n            end: movePoint(shallow(events[index][1].start), use)\n          };\n          text = {\n            type: use > 1 ? 'strongText' : 'emphasisText',\n            start: shallow(events[open][1].end),\n            end: shallow(events[index][1].start)\n          };\n          group = {\n            type: use > 1 ? 'strong' : 'emphasis',\n            start: shallow(openingSequence.start),\n            end: shallow(closingSequence.end)\n          };\n          events[open][1].end = shallow(openingSequence.start);\n          events[index][1].start = shallow(closingSequence.end);\n          nextEvents = []; // If there are more markers in the opening, add them before.\n\n          if (events[open][1].end.offset - events[open][1].start.offset) {\n            nextEvents = chunkedPush(nextEvents, [['enter', events[open][1], context], ['exit', events[open][1], context]]);\n          } // Opening.\n\n\n          nextEvents = chunkedPush(nextEvents, [['enter', group, context], ['enter', openingSequence, context], ['exit', openingSequence, context], ['enter', text, context]]); // Between.\n\n          nextEvents = chunkedPush(nextEvents, resolveAll(context.parser.constructs.insideSpan.null, events.slice(open + 1, index), context)); // Closing.\n\n          nextEvents = chunkedPush(nextEvents, [['exit', text, context], ['enter', closingSequence, context], ['exit', closingSequence, context], ['exit', group, context]]); // If there are more markers in the closing, add them after.\n\n          if (events[index][1].end.offset - events[index][1].start.offset) {\n            offset = 2;\n            nextEvents = chunkedPush(nextEvents, [['enter', events[index][1], context], ['exit', events[index][1], context]]);\n          } else {\n            offset = 0;\n          }\n\n          chunkedSplice(events, open - 1, index - open + 3, nextEvents);\n          index = open + nextEvents.length - offset - 2;\n          break;\n        }\n      }\n    }\n  } // Remove remaining sequences.\n\n\n  index = -1;\n\n  while (++index < events.length) {\n    if (events[index][1].type === 'attentionSequence') {\n      events[index][1].type = 'data';\n    }\n  }\n\n  return events;\n}\n\nfunction tokenizeAttention(effects, ok) {\n  var before = classifyCharacter(this.previous);\n  var marker;\n  return start;\n\n  function start(code) {\n    effects.enter('attentionSequence');\n    marker = code;\n    return sequence(code);\n  }\n\n  function sequence(code) {\n    var token;\n    var after;\n    var open;\n    var close;\n\n    if (code === marker) {\n      effects.consume(code);\n      return sequence;\n    }\n\n    token = effects.exit('attentionSequence');\n    after = classifyCharacter(code);\n    open = !after || after === 2 && before;\n    close = !before || before === 2 && after;\n    token._open = marker === 42 ? open : open && (before || !close);\n    token._close = marker === 42 ? close : close && (after || !open);\n    return ok(code);\n  }\n}\n\nmodule.exports = attention;","map":{"version":3,"sources":["D:/github/jsonldresume/resume/node_modules/micromark/dist/tokenize/attention.js"],"names":["chunkedSplice","require","chunkedPush","shallow","resolveAll","classifyCharacter","movePoint","attention","name","tokenize","tokenizeAttention","resolveAllAttention","events","context","index","open","group","text","openingSequence","closingSequence","use","nextEvents","offset","length","type","_close","_open","sliceSerialize","charCodeAt","end","start","parser","constructs","insideSpan","null","slice","effects","ok","before","previous","marker","code","enter","sequence","token","after","close","consume","exit","module","exports"],"mappings":"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","sourcesContent":["'use strict'\n\nvar chunkedSplice = require('../util/chunked-splice.js')\nvar chunkedPush = require('../util/chunked-push.js')\nvar shallow = require('../util/shallow.js')\nvar resolveAll = require('../util/resolve-all.js')\nvar classifyCharacter = require('../util/classify-character.js')\nvar movePoint = require('../util/move-point.js')\n\nvar attention = {\n  name: 'attention',\n  tokenize: tokenizeAttention,\n  resolveAll: resolveAllAttention\n}\n\nfunction resolveAllAttention(events, context) {\n  var index = -1\n  var open\n  var group\n  var text\n  var openingSequence\n  var closingSequence\n  var use\n  var nextEvents\n  var offset // Walk through all events.\n  //\n  // Note: performance of this is fine on an mb of normal markdown, but it’s\n  // a bottleneck for malicious stuff.\n\n  while (++index < events.length) {\n    // Find a token that can close.\n    if (\n      events[index][0] === 'enter' &&\n      events[index][1].type === 'attentionSequence' &&\n      events[index][1]._close\n    ) {\n      open = index // Now walk back to find an opener.\n\n      while (open--) {\n        // Find a token that can open the closer.\n        if (\n          events[open][0] === 'exit' &&\n          events[open][1].type === 'attentionSequence' &&\n          events[open][1]._open && // If the markers are the same:\n          context.sliceSerialize(events[open][1]).charCodeAt(0) ===\n            context.sliceSerialize(events[index][1]).charCodeAt(0)\n        ) {\n          // If the opening can close or the closing can open,\n          // and the close size *is not* a multiple of three,\n          // but the sum of the opening and closing size *is* multiple of three,\n          // then don’t match.\n          if (\n            (events[open][1]._close || events[index][1]._open) &&\n            (events[index][1].end.offset - events[index][1].start.offset) % 3 &&\n            !(\n              (events[open][1].end.offset -\n                events[open][1].start.offset +\n                events[index][1].end.offset -\n                events[index][1].start.offset) %\n              3\n            )\n          ) {\n            continue\n          } // Number of markers to use from the sequence.\n\n          use =\n            events[open][1].end.offset - events[open][1].start.offset > 1 &&\n            events[index][1].end.offset - events[index][1].start.offset > 1\n              ? 2\n              : 1\n          openingSequence = {\n            type: use > 1 ? 'strongSequence' : 'emphasisSequence',\n            start: movePoint(shallow(events[open][1].end), -use),\n            end: shallow(events[open][1].end)\n          }\n          closingSequence = {\n            type: use > 1 ? 'strongSequence' : 'emphasisSequence',\n            start: shallow(events[index][1].start),\n            end: movePoint(shallow(events[index][1].start), use)\n          }\n          text = {\n            type: use > 1 ? 'strongText' : 'emphasisText',\n            start: shallow(events[open][1].end),\n            end: shallow(events[index][1].start)\n          }\n          group = {\n            type: use > 1 ? 'strong' : 'emphasis',\n            start: shallow(openingSequence.start),\n            end: shallow(closingSequence.end)\n          }\n          events[open][1].end = shallow(openingSequence.start)\n          events[index][1].start = shallow(closingSequence.end)\n          nextEvents = [] // If there are more markers in the opening, add them before.\n\n          if (events[open][1].end.offset - events[open][1].start.offset) {\n            nextEvents = chunkedPush(nextEvents, [\n              ['enter', events[open][1], context],\n              ['exit', events[open][1], context]\n            ])\n          } // Opening.\n\n          nextEvents = chunkedPush(nextEvents, [\n            ['enter', group, context],\n            ['enter', openingSequence, context],\n            ['exit', openingSequence, context],\n            ['enter', text, context]\n          ]) // Between.\n\n          nextEvents = chunkedPush(\n            nextEvents,\n            resolveAll(\n              context.parser.constructs.insideSpan.null,\n              events.slice(open + 1, index),\n              context\n            )\n          ) // Closing.\n\n          nextEvents = chunkedPush(nextEvents, [\n            ['exit', text, context],\n            ['enter', closingSequence, context],\n            ['exit', closingSequence, context],\n            ['exit', group, context]\n          ]) // If there are more markers in the closing, add them after.\n\n          if (events[index][1].end.offset - events[index][1].start.offset) {\n            offset = 2\n            nextEvents = chunkedPush(nextEvents, [\n              ['enter', events[index][1], context],\n              ['exit', events[index][1], context]\n            ])\n          } else {\n            offset = 0\n          }\n\n          chunkedSplice(events, open - 1, index - open + 3, nextEvents)\n          index = open + nextEvents.length - offset - 2\n          break\n        }\n      }\n    }\n  } // Remove remaining sequences.\n\n  index = -1\n\n  while (++index < events.length) {\n    if (events[index][1].type === 'attentionSequence') {\n      events[index][1].type = 'data'\n    }\n  }\n\n  return events\n}\n\nfunction tokenizeAttention(effects, ok) {\n  var before = classifyCharacter(this.previous)\n  var marker\n  return start\n\n  function start(code) {\n    effects.enter('attentionSequence')\n    marker = code\n    return sequence(code)\n  }\n\n  function sequence(code) {\n    var token\n    var after\n    var open\n    var close\n\n    if (code === marker) {\n      effects.consume(code)\n      return sequence\n    }\n\n    token = effects.exit('attentionSequence')\n    after = classifyCharacter(code)\n    open = !after || (after === 2 && before)\n    close = !before || (before === 2 && after)\n    token._open = marker === 42 ? open : open && (before || !close)\n    token._close = marker === 42 ? close : close && (after || !open)\n    return ok(code)\n  }\n}\n\nmodule.exports = attention\n"]},"metadata":{},"sourceType":"script"}