{"ast":null,"code":"'use strict';\n\nvar miniflat = require('./util/miniflat.js');\n\nvar content = require('./initialize/content.js');\n\nvar document = require('./initialize/document.js');\n\nvar flow = require('./initialize/flow.js');\n\nvar text = require('./initialize/text.js');\n\nvar combineExtensions = require('./util/combine-extensions.js');\n\nvar createTokenizer = require('./util/create-tokenizer.js');\n\nvar constructs = require('./constructs.js');\n\nfunction parse(options) {\n  var settings = options || {};\n  var parser = {\n    defined: [],\n    constructs: combineExtensions([constructs].concat(miniflat(settings.extensions))),\n    content: create(content),\n    document: create(document),\n    flow: create(flow),\n    string: create(text.string),\n    text: create(text.text)\n  };\n  return parser;\n\n  function create(initializer) {\n    return creator;\n\n    function creator(from) {\n      return createTokenizer(parser, initializer, from);\n    }\n  }\n}\n\nmodule.exports = parse;","map":{"version":3,"sources":["D:/github/jsonldresume/my-app/node_modules/micromark/dist/parse.js"],"names":["miniflat","require","content","document","flow","text","combineExtensions","createTokenizer","constructs","parse","options","settings","parser","defined","concat","extensions","create","string","initializer","creator","from","module","exports"],"mappings":"AAAA;;AAEA,IAAIA,QAAQ,GAAGC,OAAO,CAAC,oBAAD,CAAtB;;AACA,IAAIC,OAAO,GAAGD,OAAO,CAAC,yBAAD,CAArB;;AACA,IAAIE,QAAQ,GAAGF,OAAO,CAAC,0BAAD,CAAtB;;AACA,IAAIG,IAAI,GAAGH,OAAO,CAAC,sBAAD,CAAlB;;AACA,IAAII,IAAI,GAAGJ,OAAO,CAAC,sBAAD,CAAlB;;AACA,IAAIK,iBAAiB,GAAGL,OAAO,CAAC,8BAAD,CAA/B;;AACA,IAAIM,eAAe,GAAGN,OAAO,CAAC,4BAAD,CAA7B;;AACA,IAAIO,UAAU,GAAGP,OAAO,CAAC,iBAAD,CAAxB;;AAEA,SAASQ,KAAT,CAAeC,OAAf,EAAwB;AACtB,MAAIC,QAAQ,GAAGD,OAAO,IAAI,EAA1B;AACA,MAAIE,MAAM,GAAG;AACXC,IAAAA,OAAO,EAAE,EADE;AAEXL,IAAAA,UAAU,EAAEF,iBAAiB,CAC3B,CAACE,UAAD,EAAaM,MAAb,CAAoBd,QAAQ,CAACW,QAAQ,CAACI,UAAV,CAA5B,CAD2B,CAFlB;AAKXb,IAAAA,OAAO,EAAEc,MAAM,CAACd,OAAD,CALJ;AAMXC,IAAAA,QAAQ,EAAEa,MAAM,CAACb,QAAD,CANL;AAOXC,IAAAA,IAAI,EAAEY,MAAM,CAACZ,IAAD,CAPD;AAQXa,IAAAA,MAAM,EAAED,MAAM,CAACX,IAAI,CAACY,MAAN,CARH;AASXZ,IAAAA,IAAI,EAAEW,MAAM,CAACX,IAAI,CAACA,IAAN;AATD,GAAb;AAWA,SAAOO,MAAP;;AAEA,WAASI,MAAT,CAAgBE,WAAhB,EAA6B;AAC3B,WAAOC,OAAP;;AAEA,aAASA,OAAT,CAAiBC,IAAjB,EAAuB;AACrB,aAAOb,eAAe,CAACK,MAAD,EAASM,WAAT,EAAsBE,IAAtB,CAAtB;AACD;AACF;AACF;;AAEDC,MAAM,CAACC,OAAP,GAAiBb,KAAjB","sourcesContent":["'use strict'\n\nvar miniflat = require('./util/miniflat.js')\nvar content = require('./initialize/content.js')\nvar document = require('./initialize/document.js')\nvar flow = require('./initialize/flow.js')\nvar text = require('./initialize/text.js')\nvar combineExtensions = require('./util/combine-extensions.js')\nvar createTokenizer = require('./util/create-tokenizer.js')\nvar constructs = require('./constructs.js')\n\nfunction parse(options) {\n  var settings = options || {}\n  var parser = {\n    defined: [],\n    constructs: combineExtensions(\n      [constructs].concat(miniflat(settings.extensions))\n    ),\n    content: create(content),\n    document: create(document),\n    flow: create(flow),\n    string: create(text.string),\n    text: create(text.text)\n  }\n  return parser\n\n  function create(initializer) {\n    return creator\n\n    function creator(from) {\n      return createTokenizer(parser, initializer, from)\n    }\n  }\n}\n\nmodule.exports = parse\n"]},"metadata":{},"sourceType":"script"}