{"ast":null,"code":"var visitWithParents = require('unist-util-visit-parents');\n\nfunction addListMetadata() {\n  return function (ast) {\n    visitWithParents(ast, 'list', function (listNode, parents) {\n      var depth = 0,\n          i,\n          n;\n\n      for (i = 0, n = parents.length; i < n; i++) {\n        if (parents[i].type === 'list') depth += 1;\n      }\n\n      for (i = 0, n = listNode.children.length; i < n; i++) {\n        var child = listNode.children[i];\n        child.index = i;\n        child.ordered = listNode.ordered;\n      }\n\n      listNode.depth = depth;\n    });\n    return ast;\n  };\n}\n\nmodule.exports = addListMetadata;","map":{"version":3,"sources":["D:/github/jsonldresume/my-app/node_modules/mdast-add-list-metadata/index.js"],"names":["visitWithParents","require","addListMetadata","ast","listNode","parents","depth","i","n","length","type","children","child","index","ordered","module","exports"],"mappings":"AAAA,IAAIA,gBAAgB,GAAGC,OAAO,CAAC,0BAAD,CAA9B;;AAEA,SAASC,eAAT,GAA2B;AACzB,SAAO,UAAUC,GAAV,EAAe;AACpBH,IAAAA,gBAAgB,CAACG,GAAD,EAAM,MAAN,EAAc,UAAUC,QAAV,EAAoBC,OAApB,EAA6B;AACzD,UAAIC,KAAK,GAAG,CAAZ;AAAA,UAAeC,CAAf;AAAA,UAAkBC,CAAlB;;AACA,WAAKD,CAAC,GAAG,CAAJ,EAAOC,CAAC,GAAGH,OAAO,CAACI,MAAxB,EAAgCF,CAAC,GAAGC,CAApC,EAAuCD,CAAC,EAAxC,EAA4C;AAC1C,YAAIF,OAAO,CAACE,CAAD,CAAP,CAAWG,IAAX,KAAoB,MAAxB,EAAgCJ,KAAK,IAAI,CAAT;AACjC;;AACD,WAAKC,CAAC,GAAG,CAAJ,EAAOC,CAAC,GAAGJ,QAAQ,CAACO,QAAT,CAAkBF,MAAlC,EAA0CF,CAAC,GAAGC,CAA9C,EAAiDD,CAAC,EAAlD,EAAsD;AACpD,YAAIK,KAAK,GAAGR,QAAQ,CAACO,QAAT,CAAkBJ,CAAlB,CAAZ;AACAK,QAAAA,KAAK,CAACC,KAAN,GAAcN,CAAd;AACAK,QAAAA,KAAK,CAACE,OAAN,GAAgBV,QAAQ,CAACU,OAAzB;AACD;;AACDV,MAAAA,QAAQ,CAACE,KAAT,GAAiBA,KAAjB;AACD,KAXe,CAAhB;AAYA,WAAOH,GAAP;AACD,GAdD;AAeD;;AAEDY,MAAM,CAACC,OAAP,GAAiBd,eAAjB","sourcesContent":["var visitWithParents = require('unist-util-visit-parents');\n\nfunction addListMetadata() {\n  return function (ast) {\n    visitWithParents(ast, 'list', function (listNode, parents) {\n      var depth = 0, i, n;\n      for (i = 0, n = parents.length; i < n; i++) {\n        if (parents[i].type === 'list') depth += 1;\n      }\n      for (i = 0, n = listNode.children.length; i < n; i++) {\n        var child = listNode.children[i];\n        child.index = i;\n        child.ordered = listNode.ordered;\n      }\n      listNode.depth = depth;\n    });\n    return ast;\n  };\n}\n\nmodule.exports = addListMetadata;\n"]},"metadata":{},"sourceType":"script"}