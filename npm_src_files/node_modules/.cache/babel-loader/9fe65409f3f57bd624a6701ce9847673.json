{"ast":null,"code":"'use strict';\n\nvar p = require('./minpath');\n\nvar proc = require('./minproc');\n\nvar buffer = require('is-buffer');\n\nmodule.exports = VFile;\nvar own = {}.hasOwnProperty; // Order of setting (least specific to most), we need this because otherwise\n// `{stem: 'a', path: '~/b.js'}` would throw, as a path is needed before a\n// stem can be set.\n\nvar order = ['history', 'path', 'basename', 'stem', 'extname', 'dirname'];\nVFile.prototype.toString = toString; // Access full path (`~/index.min.js`).\n\nObject.defineProperty(VFile.prototype, 'path', {\n  get: getPath,\n  set: setPath\n}); // Access parent path (`~`).\n\nObject.defineProperty(VFile.prototype, 'dirname', {\n  get: getDirname,\n  set: setDirname\n}); // Access basename (`index.min.js`).\n\nObject.defineProperty(VFile.prototype, 'basename', {\n  get: getBasename,\n  set: setBasename\n}); // Access extname (`.js`).\n\nObject.defineProperty(VFile.prototype, 'extname', {\n  get: getExtname,\n  set: setExtname\n}); // Access stem (`index.min`).\n\nObject.defineProperty(VFile.prototype, 'stem', {\n  get: getStem,\n  set: setStem\n}); // Construct a new file.\n\nfunction VFile(options) {\n  var prop;\n  var index;\n\n  if (!options) {\n    options = {};\n  } else if (typeof options === 'string' || buffer(options)) {\n    options = {\n      contents: options\n    };\n  } else if ('message' in options && 'messages' in options) {\n    return options;\n  }\n\n  if (!(this instanceof VFile)) {\n    return new VFile(options);\n  }\n\n  this.data = {};\n  this.messages = [];\n  this.history = [];\n  this.cwd = proc.cwd(); // Set path related properties in the correct order.\n\n  index = -1;\n\n  while (++index < order.length) {\n    prop = order[index];\n\n    if (own.call(options, prop)) {\n      this[prop] = options[prop];\n    }\n  } // Set non-path related properties.\n\n\n  for (prop in options) {\n    if (order.indexOf(prop) < 0) {\n      this[prop] = options[prop];\n    }\n  }\n}\n\nfunction getPath() {\n  return this.history[this.history.length - 1];\n}\n\nfunction setPath(path) {\n  assertNonEmpty(path, 'path');\n\n  if (this.path !== path) {\n    this.history.push(path);\n  }\n}\n\nfunction getDirname() {\n  return typeof this.path === 'string' ? p.dirname(this.path) : undefined;\n}\n\nfunction setDirname(dirname) {\n  assertPath(this.path, 'dirname');\n  this.path = p.join(dirname || '', this.basename);\n}\n\nfunction getBasename() {\n  return typeof this.path === 'string' ? p.basename(this.path) : undefined;\n}\n\nfunction setBasename(basename) {\n  assertNonEmpty(basename, 'basename');\n  assertPart(basename, 'basename');\n  this.path = p.join(this.dirname || '', basename);\n}\n\nfunction getExtname() {\n  return typeof this.path === 'string' ? p.extname(this.path) : undefined;\n}\n\nfunction setExtname(extname) {\n  assertPart(extname, 'extname');\n  assertPath(this.path, 'extname');\n\n  if (extname) {\n    if (extname.charCodeAt(0) !== 46\n    /* `.` */\n    ) {\n        throw new Error('`extname` must start with `.`');\n      }\n\n    if (extname.indexOf('.', 1) > -1) {\n      throw new Error('`extname` cannot contain multiple dots');\n    }\n  }\n\n  this.path = p.join(this.dirname, this.stem + (extname || ''));\n}\n\nfunction getStem() {\n  return typeof this.path === 'string' ? p.basename(this.path, this.extname) : undefined;\n}\n\nfunction setStem(stem) {\n  assertNonEmpty(stem, 'stem');\n  assertPart(stem, 'stem');\n  this.path = p.join(this.dirname || '', stem + (this.extname || ''));\n} // Get the value of the file.\n\n\nfunction toString(encoding) {\n  return (this.contents || '').toString(encoding);\n} // Assert that `part` is not a path (i.e., does not contain `p.sep`).\n\n\nfunction assertPart(part, name) {\n  if (part && part.indexOf(p.sep) > -1) {\n    throw new Error('`' + name + '` cannot be a path: did not expect `' + p.sep + '`');\n  }\n} // Assert that `part` is not empty.\n\n\nfunction assertNonEmpty(part, name) {\n  if (!part) {\n    throw new Error('`' + name + '` cannot be empty');\n  }\n} // Assert `path` exists.\n\n\nfunction assertPath(path, name) {\n  if (!path) {\n    throw new Error('Setting `' + name + '` requires `path` to be set too');\n  }\n}","map":{"version":3,"sources":["D:/github/jsonldresume/my-app/node_modules/vfile/lib/core.js"],"names":["p","require","proc","buffer","module","exports","VFile","own","hasOwnProperty","order","prototype","toString","Object","defineProperty","get","getPath","set","setPath","getDirname","setDirname","getBasename","setBasename","getExtname","setExtname","getStem","setStem","options","prop","index","contents","data","messages","history","cwd","length","call","indexOf","path","assertNonEmpty","push","dirname","undefined","assertPath","join","basename","assertPart","extname","charCodeAt","Error","stem","encoding","part","name","sep"],"mappings":"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","sourcesContent":["'use strict'\n\nvar p = require('./minpath')\nvar proc = require('./minproc')\nvar buffer = require('is-buffer')\n\nmodule.exports = VFile\n\nvar own = {}.hasOwnProperty\n\n// Order of setting (least specific to most), we need this because otherwise\n// `{stem: 'a', path: '~/b.js'}` would throw, as a path is needed before a\n// stem can be set.\nvar order = ['history', 'path', 'basename', 'stem', 'extname', 'dirname']\n\nVFile.prototype.toString = toString\n\n// Access full path (`~/index.min.js`).\nObject.defineProperty(VFile.prototype, 'path', {get: getPath, set: setPath})\n\n// Access parent path (`~`).\nObject.defineProperty(VFile.prototype, 'dirname', {\n  get: getDirname,\n  set: setDirname\n})\n\n// Access basename (`index.min.js`).\nObject.defineProperty(VFile.prototype, 'basename', {\n  get: getBasename,\n  set: setBasename\n})\n\n// Access extname (`.js`).\nObject.defineProperty(VFile.prototype, 'extname', {\n  get: getExtname,\n  set: setExtname\n})\n\n// Access stem (`index.min`).\nObject.defineProperty(VFile.prototype, 'stem', {get: getStem, set: setStem})\n\n// Construct a new file.\nfunction VFile(options) {\n  var prop\n  var index\n\n  if (!options) {\n    options = {}\n  } else if (typeof options === 'string' || buffer(options)) {\n    options = {contents: options}\n  } else if ('message' in options && 'messages' in options) {\n    return options\n  }\n\n  if (!(this instanceof VFile)) {\n    return new VFile(options)\n  }\n\n  this.data = {}\n  this.messages = []\n  this.history = []\n  this.cwd = proc.cwd()\n\n  // Set path related properties in the correct order.\n  index = -1\n\n  while (++index < order.length) {\n    prop = order[index]\n\n    if (own.call(options, prop)) {\n      this[prop] = options[prop]\n    }\n  }\n\n  // Set non-path related properties.\n  for (prop in options) {\n    if (order.indexOf(prop) < 0) {\n      this[prop] = options[prop]\n    }\n  }\n}\n\nfunction getPath() {\n  return this.history[this.history.length - 1]\n}\n\nfunction setPath(path) {\n  assertNonEmpty(path, 'path')\n\n  if (this.path !== path) {\n    this.history.push(path)\n  }\n}\n\nfunction getDirname() {\n  return typeof this.path === 'string' ? p.dirname(this.path) : undefined\n}\n\nfunction setDirname(dirname) {\n  assertPath(this.path, 'dirname')\n  this.path = p.join(dirname || '', this.basename)\n}\n\nfunction getBasename() {\n  return typeof this.path === 'string' ? p.basename(this.path) : undefined\n}\n\nfunction setBasename(basename) {\n  assertNonEmpty(basename, 'basename')\n  assertPart(basename, 'basename')\n  this.path = p.join(this.dirname || '', basename)\n}\n\nfunction getExtname() {\n  return typeof this.path === 'string' ? p.extname(this.path) : undefined\n}\n\nfunction setExtname(extname) {\n  assertPart(extname, 'extname')\n  assertPath(this.path, 'extname')\n\n  if (extname) {\n    if (extname.charCodeAt(0) !== 46 /* `.` */) {\n      throw new Error('`extname` must start with `.`')\n    }\n\n    if (extname.indexOf('.', 1) > -1) {\n      throw new Error('`extname` cannot contain multiple dots')\n    }\n  }\n\n  this.path = p.join(this.dirname, this.stem + (extname || ''))\n}\n\nfunction getStem() {\n  return typeof this.path === 'string'\n    ? p.basename(this.path, this.extname)\n    : undefined\n}\n\nfunction setStem(stem) {\n  assertNonEmpty(stem, 'stem')\n  assertPart(stem, 'stem')\n  this.path = p.join(this.dirname || '', stem + (this.extname || ''))\n}\n\n// Get the value of the file.\nfunction toString(encoding) {\n  return (this.contents || '').toString(encoding)\n}\n\n// Assert that `part` is not a path (i.e., does not contain `p.sep`).\nfunction assertPart(part, name) {\n  if (part && part.indexOf(p.sep) > -1) {\n    throw new Error(\n      '`' + name + '` cannot be a path: did not expect `' + p.sep + '`'\n    )\n  }\n}\n\n// Assert that `part` is not empty.\nfunction assertNonEmpty(part, name) {\n  if (!part) {\n    throw new Error('`' + name + '` cannot be empty')\n  }\n}\n\n// Assert `path` exists.\nfunction assertPath(path, name) {\n  if (!path) {\n    throw new Error('Setting `' + name + '` requires `path` to be set too')\n  }\n}\n"]},"metadata":{},"sourceType":"script"}