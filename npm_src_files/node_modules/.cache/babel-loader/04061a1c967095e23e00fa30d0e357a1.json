{"ast":null,"code":"'use strict';\n\nvar markdownSpace = require('../character/markdown-space.js');\n\nfunction spaceFactory(effects, ok, type, max) {\n  var limit = max ? max - 1 : Infinity;\n  var size = 0;\n  return start;\n\n  function start(code) {\n    if (markdownSpace(code)) {\n      effects.enter(type);\n      return prefix(code);\n    }\n\n    return ok(code);\n  }\n\n  function prefix(code) {\n    if (markdownSpace(code) && size++ < limit) {\n      effects.consume(code);\n      return prefix;\n    }\n\n    effects.exit(type);\n    return ok(code);\n  }\n}\n\nmodule.exports = spaceFactory;","map":{"version":3,"sources":["D:/github/jsonldresume/resume/node_modules/micromark/dist/tokenize/factory-space.js"],"names":["markdownSpace","require","spaceFactory","effects","ok","type","max","limit","Infinity","size","start","code","enter","prefix","consume","exit","module","exports"],"mappings":"AAAA;;AAEA,IAAIA,aAAa,GAAGC,OAAO,CAAC,gCAAD,CAA3B;;AAEA,SAASC,YAAT,CAAsBC,OAAtB,EAA+BC,EAA/B,EAAmCC,IAAnC,EAAyCC,GAAzC,EAA8C;AAC5C,MAAIC,KAAK,GAAGD,GAAG,GAAGA,GAAG,GAAG,CAAT,GAAaE,QAA5B;AACA,MAAIC,IAAI,GAAG,CAAX;AACA,SAAOC,KAAP;;AAEA,WAASA,KAAT,CAAeC,IAAf,EAAqB;AACnB,QAAIX,aAAa,CAACW,IAAD,CAAjB,EAAyB;AACvBR,MAAAA,OAAO,CAACS,KAAR,CAAcP,IAAd;AACA,aAAOQ,MAAM,CAACF,IAAD,CAAb;AACD;;AAED,WAAOP,EAAE,CAACO,IAAD,CAAT;AACD;;AAED,WAASE,MAAT,CAAgBF,IAAhB,EAAsB;AACpB,QAAIX,aAAa,CAACW,IAAD,CAAb,IAAuBF,IAAI,KAAKF,KAApC,EAA2C;AACzCJ,MAAAA,OAAO,CAACW,OAAR,CAAgBH,IAAhB;AACA,aAAOE,MAAP;AACD;;AAEDV,IAAAA,OAAO,CAACY,IAAR,CAAaV,IAAb;AACA,WAAOD,EAAE,CAACO,IAAD,CAAT;AACD;AACF;;AAEDK,MAAM,CAACC,OAAP,GAAiBf,YAAjB","sourcesContent":["'use strict'\n\nvar markdownSpace = require('../character/markdown-space.js')\n\nfunction spaceFactory(effects, ok, type, max) {\n  var limit = max ? max - 1 : Infinity\n  var size = 0\n  return start\n\n  function start(code) {\n    if (markdownSpace(code)) {\n      effects.enter(type)\n      return prefix(code)\n    }\n\n    return ok(code)\n  }\n\n  function prefix(code) {\n    if (markdownSpace(code) && size++ < limit) {\n      effects.consume(code)\n      return prefix\n    }\n\n    effects.exit(type)\n    return ok(code)\n  }\n}\n\nmodule.exports = spaceFactory\n"]},"metadata":{},"sourceType":"script"}