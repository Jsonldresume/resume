{"ast":null,"code":"/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\nvar t = function (r, e) {\n  return (t = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (t, r) {\n    t.__proto__ = r;\n  } || function (t, r) {\n    for (var e in r) r.hasOwnProperty(e) && (t[e] = r[e]);\n  })(r, e);\n};\n\nfunction r(r, e) {\n  function i() {\n    this.constructor = r;\n  }\n\n  t(r, e), r.prototype = null === e ? Object.create(e) : (i.prototype = e.prototype, new i());\n}\n\nfunction e(t) {\n  var r = \"\";\n  Array.isArray(t) || (t = [t]);\n\n  for (var e = 0; e < t.length; e++) {\n    var i = t[e];\n    if (i.type === f.CLOSE_PATH) r += \"z\";else if (i.type === f.HORIZ_LINE_TO) r += (i.relative ? \"h\" : \"H\") + i.x;else if (i.type === f.VERT_LINE_TO) r += (i.relative ? \"v\" : \"V\") + i.y;else if (i.type === f.MOVE_TO) r += (i.relative ? \"m\" : \"M\") + i.x + \" \" + i.y;else if (i.type === f.LINE_TO) r += (i.relative ? \"l\" : \"L\") + i.x + \" \" + i.y;else if (i.type === f.CURVE_TO) r += (i.relative ? \"c\" : \"C\") + i.x1 + \" \" + i.y1 + \" \" + i.x2 + \" \" + i.y2 + \" \" + i.x + \" \" + i.y;else if (i.type === f.SMOOTH_CURVE_TO) r += (i.relative ? \"s\" : \"S\") + i.x2 + \" \" + i.y2 + \" \" + i.x + \" \" + i.y;else if (i.type === f.QUAD_TO) r += (i.relative ? \"q\" : \"Q\") + i.x1 + \" \" + i.y1 + \" \" + i.x + \" \" + i.y;else if (i.type === f.SMOOTH_QUAD_TO) r += (i.relative ? \"t\" : \"T\") + i.x + \" \" + i.y;else {\n      if (i.type !== f.ARC) throw new Error('Unexpected command type \"' + i.type + '\" at index ' + e + \".\");\n      r += (i.relative ? \"a\" : \"A\") + i.rX + \" \" + i.rY + \" \" + i.xRot + \" \" + +i.lArcFlag + \" \" + +i.sweepFlag + \" \" + i.x + \" \" + i.y;\n    }\n  }\n\n  return r;\n}\n\nfunction i(t, r) {\n  var e = t[0],\n      i = t[1];\n  return [e * Math.cos(r) - i * Math.sin(r), e * Math.sin(r) + i * Math.cos(r)];\n}\n\nfunction a() {\n  for (var t = [], r = 0; r < arguments.length; r++) t[r] = arguments[r];\n\n  for (var e = 0; e < t.length; e++) if (\"number\" != typeof t[e]) throw new Error(\"assertNumbers arguments[\" + e + \"] is not a number. \" + typeof t[e] + \" == typeof \" + t[e]);\n\n  return !0;\n}\n\nvar n = Math.PI;\n\nfunction o(t, r, e) {\n  t.lArcFlag = 0 === t.lArcFlag ? 0 : 1, t.sweepFlag = 0 === t.sweepFlag ? 0 : 1;\n  var a = t.rX,\n      o = t.rY,\n      s = t.x,\n      u = t.y;\n  a = Math.abs(t.rX), o = Math.abs(t.rY);\n  var h = i([(r - s) / 2, (e - u) / 2], -t.xRot / 180 * n),\n      c = h[0],\n      y = h[1],\n      p = Math.pow(c, 2) / Math.pow(a, 2) + Math.pow(y, 2) / Math.pow(o, 2);\n  1 < p && (a *= Math.sqrt(p), o *= Math.sqrt(p)), t.rX = a, t.rY = o;\n  var m = Math.pow(a, 2) * Math.pow(y, 2) + Math.pow(o, 2) * Math.pow(c, 2),\n      O = (t.lArcFlag !== t.sweepFlag ? 1 : -1) * Math.sqrt(Math.max(0, (Math.pow(a, 2) * Math.pow(o, 2) - m) / m)),\n      T = a * y / o * O,\n      v = -o * c / a * O,\n      l = i([T, v], t.xRot / 180 * n);\n  t.cX = l[0] + (r + s) / 2, t.cY = l[1] + (e + u) / 2, t.phi1 = Math.atan2((y - v) / o, (c - T) / a), t.phi2 = Math.atan2((-y - v) / o, (-c - T) / a), 0 === t.sweepFlag && t.phi2 > t.phi1 && (t.phi2 -= 2 * n), 1 === t.sweepFlag && t.phi2 < t.phi1 && (t.phi2 += 2 * n), t.phi1 *= 180 / n, t.phi2 *= 180 / n;\n}\n\nfunction s(t, r, e) {\n  a(t, r, e);\n  var i = t * t + r * r - e * e;\n  if (0 > i) return [];\n  if (0 === i) return [[t * e / (t * t + r * r), r * e / (t * t + r * r)]];\n  var n = Math.sqrt(i);\n  return [[(t * e + r * n) / (t * t + r * r), (r * e - t * n) / (t * t + r * r)], [(t * e - r * n) / (t * t + r * r), (r * e + t * n) / (t * t + r * r)]];\n}\n\nvar u,\n    h = Math.PI / 180;\n\nfunction c(t, r, e) {\n  return (1 - e) * t + e * r;\n}\n\nfunction y(t, r, e, i) {\n  return t + Math.cos(i / 180 * n) * r + Math.sin(i / 180 * n) * e;\n}\n\nfunction p(t, r, e, i) {\n  var a = r - t,\n      n = e - r,\n      o = 3 * a + 3 * (i - e) - 6 * n,\n      s = 6 * (n - a),\n      u = 3 * a;\n  return Math.abs(o) < 1e-6 ? [-u / s] : function (t, r, e) {\n    void 0 === e && (e = 1e-6);\n    var i = t * t / 4 - r;\n    if (i < -e) return [];\n    if (i <= e) return [-t / 2];\n    var a = Math.sqrt(i);\n    return [-t / 2 - a, -t / 2 + a];\n  }(s / o, u / o, 1e-6);\n}\n\nfunction m(t, r, e, i, a) {\n  var n = 1 - a;\n  return t * (n * n * n) + r * (3 * n * n * a) + e * (3 * n * a * a) + i * (a * a * a);\n}\n\n!function (t) {\n  function r() {\n    return u(function (t, r, e) {\n      return t.relative && (void 0 !== t.x1 && (t.x1 += r), void 0 !== t.y1 && (t.y1 += e), void 0 !== t.x2 && (t.x2 += r), void 0 !== t.y2 && (t.y2 += e), void 0 !== t.x && (t.x += r), void 0 !== t.y && (t.y += e), t.relative = !1), t;\n    });\n  }\n\n  function e() {\n    var t = NaN,\n        r = NaN,\n        e = NaN,\n        i = NaN;\n    return u(function (a, n, o) {\n      return a.type & f.SMOOTH_CURVE_TO && (a.type = f.CURVE_TO, t = isNaN(t) ? n : t, r = isNaN(r) ? o : r, a.x1 = a.relative ? n - t : 2 * n - t, a.y1 = a.relative ? o - r : 2 * o - r), a.type & f.CURVE_TO ? (t = a.relative ? n + a.x2 : a.x2, r = a.relative ? o + a.y2 : a.y2) : (t = NaN, r = NaN), a.type & f.SMOOTH_QUAD_TO && (a.type = f.QUAD_TO, e = isNaN(e) ? n : e, i = isNaN(i) ? o : i, a.x1 = a.relative ? n - e : 2 * n - e, a.y1 = a.relative ? o - i : 2 * o - i), a.type & f.QUAD_TO ? (e = a.relative ? n + a.x1 : a.x1, i = a.relative ? o + a.y1 : a.y1) : (e = NaN, i = NaN), a;\n    });\n  }\n\n  function n() {\n    var t = NaN,\n        r = NaN;\n    return u(function (e, i, a) {\n      if (e.type & f.SMOOTH_QUAD_TO && (e.type = f.QUAD_TO, t = isNaN(t) ? i : t, r = isNaN(r) ? a : r, e.x1 = e.relative ? i - t : 2 * i - t, e.y1 = e.relative ? a - r : 2 * a - r), e.type & f.QUAD_TO) {\n        t = e.relative ? i + e.x1 : e.x1, r = e.relative ? a + e.y1 : e.y1;\n        var n = e.x1,\n            o = e.y1;\n        e.type = f.CURVE_TO, e.x1 = ((e.relative ? 0 : i) + 2 * n) / 3, e.y1 = ((e.relative ? 0 : a) + 2 * o) / 3, e.x2 = (e.x + 2 * n) / 3, e.y2 = (e.y + 2 * o) / 3;\n      } else t = NaN, r = NaN;\n\n      return e;\n    });\n  }\n\n  function u(t) {\n    var r = 0,\n        e = 0,\n        i = NaN,\n        a = NaN;\n    return function (n) {\n      if (isNaN(i) && !(n.type & f.MOVE_TO)) throw new Error(\"path must start with moveto\");\n      var o = t(n, r, e, i, a);\n      return n.type & f.CLOSE_PATH && (r = i, e = a), void 0 !== n.x && (r = n.relative ? r + n.x : n.x), void 0 !== n.y && (e = n.relative ? e + n.y : n.y), n.type & f.MOVE_TO && (i = r, a = e), o;\n    };\n  }\n\n  function O(t, r, e, i, n, o) {\n    return a(t, r, e, i, n, o), u(function (a, s, u, h) {\n      var c = a.x1,\n          y = a.x2,\n          p = a.relative && !isNaN(h),\n          m = void 0 !== a.x ? a.x : p ? 0 : s,\n          O = void 0 !== a.y ? a.y : p ? 0 : u;\n\n      function T(t) {\n        return t * t;\n      }\n\n      a.type & f.HORIZ_LINE_TO && 0 !== r && (a.type = f.LINE_TO, a.y = a.relative ? 0 : u), a.type & f.VERT_LINE_TO && 0 !== e && (a.type = f.LINE_TO, a.x = a.relative ? 0 : s), void 0 !== a.x && (a.x = a.x * t + O * e + (p ? 0 : n)), void 0 !== a.y && (a.y = m * r + a.y * i + (p ? 0 : o)), void 0 !== a.x1 && (a.x1 = a.x1 * t + a.y1 * e + (p ? 0 : n)), void 0 !== a.y1 && (a.y1 = c * r + a.y1 * i + (p ? 0 : o)), void 0 !== a.x2 && (a.x2 = a.x2 * t + a.y2 * e + (p ? 0 : n)), void 0 !== a.y2 && (a.y2 = y * r + a.y2 * i + (p ? 0 : o));\n      var v = t * i - r * e;\n      if (void 0 !== a.xRot && (1 !== t || 0 !== r || 0 !== e || 1 !== i)) if (0 === v) delete a.rX, delete a.rY, delete a.xRot, delete a.lArcFlag, delete a.sweepFlag, a.type = f.LINE_TO;else {\n        var l = a.xRot * Math.PI / 180,\n            _ = Math.sin(l),\n            N = Math.cos(l),\n            x = 1 / T(a.rX),\n            d = 1 / T(a.rY),\n            A = T(N) * x + T(_) * d,\n            E = 2 * _ * N * (x - d),\n            C = T(_) * x + T(N) * d,\n            M = A * i * i - E * r * i + C * r * r,\n            R = E * (t * i + r * e) - 2 * (A * e * i + C * t * r),\n            g = A * e * e - E * t * e + C * t * t,\n            I = (Math.atan2(R, M - g) + Math.PI) % Math.PI / 2,\n            S = Math.sin(I),\n            L = Math.cos(I);\n\n        a.rX = Math.abs(v) / Math.sqrt(M * T(L) + R * S * L + g * T(S)), a.rY = Math.abs(v) / Math.sqrt(M * T(S) - R * S * L + g * T(L)), a.xRot = 180 * I / Math.PI;\n      }\n      return void 0 !== a.sweepFlag && 0 > v && (a.sweepFlag = +!a.sweepFlag), a;\n    });\n  }\n\n  function T() {\n    return function (t) {\n      var r = {};\n\n      for (var e in t) r[e] = t[e];\n\n      return r;\n    };\n  }\n\n  t.ROUND = function (t) {\n    function r(r) {\n      return Math.round(r * t) / t;\n    }\n\n    return void 0 === t && (t = 1e13), a(t), function (t) {\n      return void 0 !== t.x1 && (t.x1 = r(t.x1)), void 0 !== t.y1 && (t.y1 = r(t.y1)), void 0 !== t.x2 && (t.x2 = r(t.x2)), void 0 !== t.y2 && (t.y2 = r(t.y2)), void 0 !== t.x && (t.x = r(t.x)), void 0 !== t.y && (t.y = r(t.y)), void 0 !== t.rX && (t.rX = r(t.rX)), void 0 !== t.rY && (t.rY = r(t.rY)), t;\n    };\n  }, t.TO_ABS = r, t.TO_REL = function () {\n    return u(function (t, r, e) {\n      return t.relative || (void 0 !== t.x1 && (t.x1 -= r), void 0 !== t.y1 && (t.y1 -= e), void 0 !== t.x2 && (t.x2 -= r), void 0 !== t.y2 && (t.y2 -= e), void 0 !== t.x && (t.x -= r), void 0 !== t.y && (t.y -= e), t.relative = !0), t;\n    });\n  }, t.NORMALIZE_HVZ = function (t, r, e) {\n    return void 0 === t && (t = !0), void 0 === r && (r = !0), void 0 === e && (e = !0), u(function (i, a, n, o, s) {\n      if (isNaN(o) && !(i.type & f.MOVE_TO)) throw new Error(\"path must start with moveto\");\n      return r && i.type & f.HORIZ_LINE_TO && (i.type = f.LINE_TO, i.y = i.relative ? 0 : n), e && i.type & f.VERT_LINE_TO && (i.type = f.LINE_TO, i.x = i.relative ? 0 : a), t && i.type & f.CLOSE_PATH && (i.type = f.LINE_TO, i.x = i.relative ? o - a : o, i.y = i.relative ? s - n : s), i.type & f.ARC && (0 === i.rX || 0 === i.rY) && (i.type = f.LINE_TO, delete i.rX, delete i.rY, delete i.xRot, delete i.lArcFlag, delete i.sweepFlag), i;\n    });\n  }, t.NORMALIZE_ST = e, t.QT_TO_C = n, t.INFO = u, t.SANITIZE = function (t) {\n    void 0 === t && (t = 0), a(t);\n    var r = NaN,\n        e = NaN,\n        i = NaN,\n        n = NaN;\n    return u(function (a, o, s, u, h) {\n      var c = Math.abs,\n          y = !1,\n          p = 0,\n          m = 0;\n\n      if (a.type & f.SMOOTH_CURVE_TO && (p = isNaN(r) ? 0 : o - r, m = isNaN(e) ? 0 : s - e), a.type & (f.CURVE_TO | f.SMOOTH_CURVE_TO) ? (r = a.relative ? o + a.x2 : a.x2, e = a.relative ? s + a.y2 : a.y2) : (r = NaN, e = NaN), a.type & f.SMOOTH_QUAD_TO ? (i = isNaN(i) ? o : 2 * o - i, n = isNaN(n) ? s : 2 * s - n) : a.type & f.QUAD_TO ? (i = a.relative ? o + a.x1 : a.x1, n = a.relative ? s + a.y1 : a.y2) : (i = NaN, n = NaN), a.type & f.LINE_COMMANDS || a.type & f.ARC && (0 === a.rX || 0 === a.rY || !a.lArcFlag) || a.type & f.CURVE_TO || a.type & f.SMOOTH_CURVE_TO || a.type & f.QUAD_TO || a.type & f.SMOOTH_QUAD_TO) {\n        var O = void 0 === a.x ? 0 : a.relative ? a.x : a.x - o,\n            T = void 0 === a.y ? 0 : a.relative ? a.y : a.y - s;\n        p = isNaN(i) ? void 0 === a.x1 ? p : a.relative ? a.x : a.x1 - o : i - o, m = isNaN(n) ? void 0 === a.y1 ? m : a.relative ? a.y : a.y1 - s : n - s;\n        var v = void 0 === a.x2 ? 0 : a.relative ? a.x : a.x2 - o,\n            l = void 0 === a.y2 ? 0 : a.relative ? a.y : a.y2 - s;\n        c(O) <= t && c(T) <= t && c(p) <= t && c(m) <= t && c(v) <= t && c(l) <= t && (y = !0);\n      }\n\n      return a.type & f.CLOSE_PATH && c(o - u) <= t && c(s - h) <= t && (y = !0), y ? [] : a;\n    });\n  }, t.MATRIX = O, t.ROTATE = function (t, r, e) {\n    void 0 === r && (r = 0), void 0 === e && (e = 0), a(t, r, e);\n    var i = Math.sin(t),\n        n = Math.cos(t);\n    return O(n, i, -i, n, r - r * n + e * i, e - r * i - e * n);\n  }, t.TRANSLATE = function (t, r) {\n    return void 0 === r && (r = 0), a(t, r), O(1, 0, 0, 1, t, r);\n  }, t.SCALE = function (t, r) {\n    return void 0 === r && (r = t), a(t, r), O(t, 0, 0, r, 0, 0);\n  }, t.SKEW_X = function (t) {\n    return a(t), O(1, 0, Math.atan(t), 1, 0, 0);\n  }, t.SKEW_Y = function (t) {\n    return a(t), O(1, Math.atan(t), 0, 1, 0, 0);\n  }, t.X_AXIS_SYMMETRY = function (t) {\n    return void 0 === t && (t = 0), a(t), O(-1, 0, 0, 1, t, 0);\n  }, t.Y_AXIS_SYMMETRY = function (t) {\n    return void 0 === t && (t = 0), a(t), O(1, 0, 0, -1, 0, t);\n  }, t.A_TO_C = function () {\n    return u(function (t, r, e) {\n      return f.ARC === t.type ? function (t, r, e) {\n        var a, n, s, u;\n        t.cX || o(t, r, e);\n\n        for (var y = Math.min(t.phi1, t.phi2), p = Math.max(t.phi1, t.phi2) - y, m = Math.ceil(p / 90), O = new Array(m), T = r, v = e, l = 0; l < m; l++) {\n          var _ = c(t.phi1, t.phi2, l / m),\n              N = c(t.phi1, t.phi2, (l + 1) / m),\n              x = N - _,\n              d = 4 / 3 * Math.tan(x * h / 4),\n              A = [Math.cos(_ * h) - d * Math.sin(_ * h), Math.sin(_ * h) + d * Math.cos(_ * h)],\n              E = A[0],\n              C = A[1],\n              M = [Math.cos(N * h), Math.sin(N * h)],\n              R = M[0],\n              g = M[1],\n              I = [R + d * Math.sin(N * h), g - d * Math.cos(N * h)],\n              S = I[0],\n              L = I[1];\n\n          O[l] = {\n            relative: t.relative,\n            type: f.CURVE_TO\n          };\n\n          var H = function (r, e) {\n            var a = i([r * t.rX, e * t.rY], t.xRot),\n                n = a[0],\n                o = a[1];\n            return [t.cX + n, t.cY + o];\n          };\n\n          a = H(E, C), O[l].x1 = a[0], O[l].y1 = a[1], n = H(S, L), O[l].x2 = n[0], O[l].y2 = n[1], s = H(R, g), O[l].x = s[0], O[l].y = s[1], t.relative && (O[l].x1 -= T, O[l].y1 -= v, O[l].x2 -= T, O[l].y2 -= v, O[l].x -= T, O[l].y -= v), T = (u = [O[l].x, O[l].y])[0], v = u[1];\n        }\n\n        return O;\n      }(t, t.relative ? 0 : r, t.relative ? 0 : e) : t;\n    });\n  }, t.ANNOTATE_ARCS = function () {\n    return u(function (t, r, e) {\n      return t.relative && (r = 0, e = 0), f.ARC === t.type && o(t, r, e), t;\n    });\n  }, t.CLONE = T, t.CALCULATE_BOUNDS = function () {\n    var t = function (t) {\n      var r = {};\n\n      for (var e in t) r[e] = t[e];\n\n      return r;\n    },\n        i = r(),\n        a = n(),\n        h = e(),\n        c = u(function (r, e, n) {\n      var u = h(a(i(t(r))));\n\n      function O(t) {\n        t > c.maxX && (c.maxX = t), t < c.minX && (c.minX = t);\n      }\n\n      function T(t) {\n        t > c.maxY && (c.maxY = t), t < c.minY && (c.minY = t);\n      }\n\n      if (u.type & f.DRAWING_COMMANDS && (O(e), T(n)), u.type & f.HORIZ_LINE_TO && O(u.x), u.type & f.VERT_LINE_TO && T(u.y), u.type & f.LINE_TO && (O(u.x), T(u.y)), u.type & f.CURVE_TO) {\n        O(u.x), T(u.y);\n\n        for (var v = 0, l = p(e, u.x1, u.x2, u.x); v < l.length; v++) {\n          0 < (w = l[v]) && 1 > w && O(m(e, u.x1, u.x2, u.x, w));\n        }\n\n        for (var _ = 0, N = p(n, u.y1, u.y2, u.y); _ < N.length; _++) {\n          0 < (w = N[_]) && 1 > w && T(m(n, u.y1, u.y2, u.y, w));\n        }\n      }\n\n      if (u.type & f.ARC) {\n        O(u.x), T(u.y), o(u, e, n);\n\n        for (var x = u.xRot / 180 * Math.PI, d = Math.cos(x) * u.rX, A = Math.sin(x) * u.rX, E = -Math.sin(x) * u.rY, C = Math.cos(x) * u.rY, M = u.phi1 < u.phi2 ? [u.phi1, u.phi2] : -180 > u.phi2 ? [u.phi2 + 360, u.phi1 + 360] : [u.phi2, u.phi1], R = M[0], g = M[1], I = function (t) {\n          var r = t[0],\n              e = t[1],\n              i = 180 * Math.atan2(e, r) / Math.PI;\n          return i < R ? i + 360 : i;\n        }, S = 0, L = s(E, -d, 0).map(I); S < L.length; S++) {\n          (w = L[S]) > R && w < g && O(y(u.cX, d, E, w));\n        }\n\n        for (var H = 0, U = s(C, -A, 0).map(I); H < U.length; H++) {\n          var w;\n          (w = U[H]) > R && w < g && T(y(u.cY, A, C, w));\n        }\n      }\n\n      return r;\n    });\n\n    return c.minX = 1 / 0, c.maxX = -1 / 0, c.minY = 1 / 0, c.maxY = -1 / 0, c;\n  };\n}(u || (u = {}));\n\nvar O,\n    T = function () {\n  function t() {}\n\n  return t.prototype.round = function (t) {\n    return this.transform(u.ROUND(t));\n  }, t.prototype.toAbs = function () {\n    return this.transform(u.TO_ABS());\n  }, t.prototype.toRel = function () {\n    return this.transform(u.TO_REL());\n  }, t.prototype.normalizeHVZ = function (t, r, e) {\n    return this.transform(u.NORMALIZE_HVZ(t, r, e));\n  }, t.prototype.normalizeST = function () {\n    return this.transform(u.NORMALIZE_ST());\n  }, t.prototype.qtToC = function () {\n    return this.transform(u.QT_TO_C());\n  }, t.prototype.aToC = function () {\n    return this.transform(u.A_TO_C());\n  }, t.prototype.sanitize = function (t) {\n    return this.transform(u.SANITIZE(t));\n  }, t.prototype.translate = function (t, r) {\n    return this.transform(u.TRANSLATE(t, r));\n  }, t.prototype.scale = function (t, r) {\n    return this.transform(u.SCALE(t, r));\n  }, t.prototype.rotate = function (t, r, e) {\n    return this.transform(u.ROTATE(t, r, e));\n  }, t.prototype.matrix = function (t, r, e, i, a, n) {\n    return this.transform(u.MATRIX(t, r, e, i, a, n));\n  }, t.prototype.skewX = function (t) {\n    return this.transform(u.SKEW_X(t));\n  }, t.prototype.skewY = function (t) {\n    return this.transform(u.SKEW_Y(t));\n  }, t.prototype.xSymmetry = function (t) {\n    return this.transform(u.X_AXIS_SYMMETRY(t));\n  }, t.prototype.ySymmetry = function (t) {\n    return this.transform(u.Y_AXIS_SYMMETRY(t));\n  }, t.prototype.annotateArcs = function () {\n    return this.transform(u.ANNOTATE_ARCS());\n  }, t;\n}(),\n    v = function (t) {\n  return \" \" === t || \"\\t\" === t || \"\\r\" === t || \"\\n\" === t;\n},\n    l = function (t) {\n  return \"0\".charCodeAt(0) <= t.charCodeAt(0) && t.charCodeAt(0) <= \"9\".charCodeAt(0);\n},\n    _ = function (t) {\n  function e() {\n    var r = t.call(this) || this;\n    return r.curNumber = \"\", r.curCommandType = -1, r.curCommandRelative = !1, r.canParseCommandOrComma = !0, r.curNumberHasExp = !1, r.curNumberHasExpDigits = !1, r.curNumberHasDecimal = !1, r.curArgs = [], r;\n  }\n\n  return r(e, t), e.prototype.finish = function (t) {\n    if (void 0 === t && (t = []), this.parse(\" \", t), 0 !== this.curArgs.length || !this.canParseCommandOrComma) throw new SyntaxError(\"Unterminated command at the path end.\");\n    return t;\n  }, e.prototype.parse = function (t, r) {\n    var e = this;\n    void 0 === r && (r = []);\n\n    for (var i = function (t) {\n      r.push(t), e.curArgs.length = 0, e.canParseCommandOrComma = !0;\n    }, a = 0; a < t.length; a++) {\n      var n = t[a],\n          o = !(this.curCommandType !== f.ARC || 3 !== this.curArgs.length && 4 !== this.curArgs.length || 1 !== this.curNumber.length || \"0\" !== this.curNumber && \"1\" !== this.curNumber),\n          s = l(n) && (\"0\" === this.curNumber && \"0\" === n || o);\n      if (!l(n) || s) {\n        if (\"e\" !== n && \"E\" !== n) {\n          if (\"-\" !== n && \"+\" !== n || !this.curNumberHasExp || this.curNumberHasExpDigits) {\n            if (\".\" !== n || this.curNumberHasExp || this.curNumberHasDecimal || o) {\n              if (this.curNumber && -1 !== this.curCommandType) {\n                var u = Number(this.curNumber);\n                if (isNaN(u)) throw new SyntaxError(\"Invalid number ending at \" + a);\n                if (this.curCommandType === f.ARC) if (0 === this.curArgs.length || 1 === this.curArgs.length) {\n                  if (0 > u) throw new SyntaxError('Expected positive number, got \"' + u + '\" at index \"' + a + '\"');\n                } else if ((3 === this.curArgs.length || 4 === this.curArgs.length) && \"0\" !== this.curNumber && \"1\" !== this.curNumber) throw new SyntaxError('Expected a flag, got \"' + this.curNumber + '\" at index \"' + a + '\"');\n                this.curArgs.push(u), this.curArgs.length === N[this.curCommandType] && (f.HORIZ_LINE_TO === this.curCommandType ? i({\n                  type: f.HORIZ_LINE_TO,\n                  relative: this.curCommandRelative,\n                  x: u\n                }) : f.VERT_LINE_TO === this.curCommandType ? i({\n                  type: f.VERT_LINE_TO,\n                  relative: this.curCommandRelative,\n                  y: u\n                }) : this.curCommandType === f.MOVE_TO || this.curCommandType === f.LINE_TO || this.curCommandType === f.SMOOTH_QUAD_TO ? (i({\n                  type: this.curCommandType,\n                  relative: this.curCommandRelative,\n                  x: this.curArgs[0],\n                  y: this.curArgs[1]\n                }), f.MOVE_TO === this.curCommandType && (this.curCommandType = f.LINE_TO)) : this.curCommandType === f.CURVE_TO ? i({\n                  type: f.CURVE_TO,\n                  relative: this.curCommandRelative,\n                  x1: this.curArgs[0],\n                  y1: this.curArgs[1],\n                  x2: this.curArgs[2],\n                  y2: this.curArgs[3],\n                  x: this.curArgs[4],\n                  y: this.curArgs[5]\n                }) : this.curCommandType === f.SMOOTH_CURVE_TO ? i({\n                  type: f.SMOOTH_CURVE_TO,\n                  relative: this.curCommandRelative,\n                  x2: this.curArgs[0],\n                  y2: this.curArgs[1],\n                  x: this.curArgs[2],\n                  y: this.curArgs[3]\n                }) : this.curCommandType === f.QUAD_TO ? i({\n                  type: f.QUAD_TO,\n                  relative: this.curCommandRelative,\n                  x1: this.curArgs[0],\n                  y1: this.curArgs[1],\n                  x: this.curArgs[2],\n                  y: this.curArgs[3]\n                }) : this.curCommandType === f.ARC && i({\n                  type: f.ARC,\n                  relative: this.curCommandRelative,\n                  rX: this.curArgs[0],\n                  rY: this.curArgs[1],\n                  xRot: this.curArgs[2],\n                  lArcFlag: this.curArgs[3],\n                  sweepFlag: this.curArgs[4],\n                  x: this.curArgs[5],\n                  y: this.curArgs[6]\n                })), this.curNumber = \"\", this.curNumberHasExpDigits = !1, this.curNumberHasExp = !1, this.curNumberHasDecimal = !1, this.canParseCommandOrComma = !0;\n              }\n\n              if (!v(n)) if (\",\" === n && this.canParseCommandOrComma) this.canParseCommandOrComma = !1;else if (\"+\" !== n && \"-\" !== n && \".\" !== n) {\n                if (s) this.curNumber = n, this.curNumberHasDecimal = !1;else {\n                  if (0 !== this.curArgs.length) throw new SyntaxError(\"Unterminated command at index \" + a + \".\");\n                  if (!this.canParseCommandOrComma) throw new SyntaxError('Unexpected character \"' + n + '\" at index ' + a + \". Command cannot follow comma\");\n                  if (this.canParseCommandOrComma = !1, \"z\" !== n && \"Z\" !== n) {\n                    if (\"h\" === n || \"H\" === n) this.curCommandType = f.HORIZ_LINE_TO, this.curCommandRelative = \"h\" === n;else if (\"v\" === n || \"V\" === n) this.curCommandType = f.VERT_LINE_TO, this.curCommandRelative = \"v\" === n;else if (\"m\" === n || \"M\" === n) this.curCommandType = f.MOVE_TO, this.curCommandRelative = \"m\" === n;else if (\"l\" === n || \"L\" === n) this.curCommandType = f.LINE_TO, this.curCommandRelative = \"l\" === n;else if (\"c\" === n || \"C\" === n) this.curCommandType = f.CURVE_TO, this.curCommandRelative = \"c\" === n;else if (\"s\" === n || \"S\" === n) this.curCommandType = f.SMOOTH_CURVE_TO, this.curCommandRelative = \"s\" === n;else if (\"q\" === n || \"Q\" === n) this.curCommandType = f.QUAD_TO, this.curCommandRelative = \"q\" === n;else if (\"t\" === n || \"T\" === n) this.curCommandType = f.SMOOTH_QUAD_TO, this.curCommandRelative = \"t\" === n;else {\n                      if (\"a\" !== n && \"A\" !== n) throw new SyntaxError('Unexpected character \"' + n + '\" at index ' + a + \".\");\n                      this.curCommandType = f.ARC, this.curCommandRelative = \"a\" === n;\n                    }\n                  } else r.push({\n                    type: f.CLOSE_PATH\n                  }), this.canParseCommandOrComma = !0, this.curCommandType = -1;\n                }\n              } else this.curNumber = n, this.curNumberHasDecimal = \".\" === n;\n            } else this.curNumber += n, this.curNumberHasDecimal = !0;\n          } else this.curNumber += n;\n        } else this.curNumber += n, this.curNumberHasExp = !0;\n      } else this.curNumber += n, this.curNumberHasExpDigits = this.curNumberHasExp;\n    }\n\n    return r;\n  }, e.prototype.transform = function (t) {\n    return Object.create(this, {\n      parse: {\n        value: function (r, e) {\n          void 0 === e && (e = []);\n\n          for (var i = 0, a = Object.getPrototypeOf(this).parse.call(this, r); i < a.length; i++) {\n            var n = a[i],\n                o = t(n);\n            Array.isArray(o) ? e.push.apply(e, o) : e.push(o);\n          }\n\n          return e;\n        }\n      }\n    });\n  }, e;\n}(T),\n    f = function (t) {\n  function i(r) {\n    var e = t.call(this) || this;\n    return e.commands = \"string\" == typeof r ? i.parse(r) : r, e;\n  }\n\n  return r(i, t), i.prototype.encode = function () {\n    return i.encode(this.commands);\n  }, i.prototype.getBounds = function () {\n    var t = u.CALCULATE_BOUNDS();\n    return this.transform(t), t;\n  }, i.prototype.transform = function (t) {\n    for (var r = [], e = 0, i = this.commands; e < i.length; e++) {\n      var a = t(i[e]);\n      Array.isArray(a) ? r.push.apply(r, a) : r.push(a);\n    }\n\n    return this.commands = r, this;\n  }, i.encode = function (t) {\n    return e(t);\n  }, i.parse = function (t) {\n    var r = new _(),\n        e = [];\n    return r.parse(t, e), r.finish(e), e;\n  }, i.CLOSE_PATH = 1, i.MOVE_TO = 2, i.HORIZ_LINE_TO = 4, i.VERT_LINE_TO = 8, i.LINE_TO = 16, i.CURVE_TO = 32, i.SMOOTH_CURVE_TO = 64, i.QUAD_TO = 128, i.SMOOTH_QUAD_TO = 256, i.ARC = 512, i.LINE_COMMANDS = i.LINE_TO | i.HORIZ_LINE_TO | i.VERT_LINE_TO, i.DRAWING_COMMANDS = i.HORIZ_LINE_TO | i.VERT_LINE_TO | i.LINE_TO | i.CURVE_TO | i.SMOOTH_CURVE_TO | i.QUAD_TO | i.SMOOTH_QUAD_TO | i.ARC, i;\n}(T),\n    N = ((O = {})[f.MOVE_TO] = 2, O[f.LINE_TO] = 2, O[f.HORIZ_LINE_TO] = 1, O[f.VERT_LINE_TO] = 1, O[f.CLOSE_PATH] = 0, O[f.QUAD_TO] = 4, O[f.SMOOTH_QUAD_TO] = 2, O[f.CURVE_TO] = 6, O[f.SMOOTH_CURVE_TO] = 4, O[f.ARC] = 7, O);\n\nexport { N as COMMAND_ARG_COUNTS, f as SVGPathData, _ as SVGPathDataParser, u as SVGPathDataTransformer, e as encodeSVGPath };","map":{"version":3,"sources":["../src/SVGPathDataEncoder.ts","../src/mathUtils.ts","../src/SVGPathDataTransformer.ts","../src/TransformableSVG.ts","../src/SVGPathDataParser.ts","../src/SVGPathData.ts"],"names":["encodeSVGPath","commands","str","Array","isArray","i","length","command","type","SVGPathData","CLOSE_PATH","HORIZ_LINE_TO","relative","x","VERT_LINE_TO","y","MOVE_TO","LINE_TO","CURVE_TO","x1","y1","x2","y2","SMOOTH_CURVE_TO","QUAD_TO","SMOOTH_QUAD_TO","ARC","rX","rY","xRot","lArcFlag","sweepFlag","Error","rotate","_a","rad","Math","cos","sin","assertNumbers","numbers","PI","annotateArcCommand","c","abs","x1_","y1_","testValue","pow","sqrt","c_ScaleTemp","c_Scale","max","cx_","cy_","cRot","cX","cY","phi1","atan2","phi2","intersectionUnitCircleLine","a","b","termSqr","term","DEG","lerp","t","arcAt","phiDeg","bezierRoot","x0","x3","x01","x12","pqFormula","bezierAt","s","p","q","PRECISION","discriminantX4","root","arc","y0","phiMin","min","deltaPhi","partCount","ceil","result","prevX","prevY","phiStart","phiEnd","deltaPhi_1","f","tan","_e","_f","_g","transform","xTemp","yTemp","_b","_c","_d","SVGPathDataTransformer","roundVal","rf","val","round","TO_ABS","INFO","normalizeZ","normalizeH","normalizeV","pathStartX","pathStartY","isNaN","NORMALIZE_ST","prevCurveC2X","NaN","prevCurveC2Y","prevQuadCX","prevQuadCY","QT_TO_C","prevQuadX1","prevQuadY1","prevXAbs","prevYAbs","pathStartXAbs","pathStartYAbs","EPS","skip","x1Rel","y1Rel","LINE_COMMANDS","xRel","yRel","x2Rel","y2Rel","MATRIX","d","e","origX1","origX2","comRel","sqr","det","sinRot","cosRot","xCurve","yCurve","A","B","C","A1","B1","C1","newXRot","newSinRot","newCosRot","dX","dY","atan","xOffset","yOffset","a2c","CLONE","key","clone","toAbs","qtToC","normST","fixX","absX","maxX","minX","fixY","absY","maxY","minY","DRAWING_COMMANDS","derivRoot","xDerivRoots_1","yDerivRoots_1","xRotRad","x90","y90","phiMin_1","phiMax","normalizeXiEta","xi","eta","phi","map","xDerivRoots_2","yDerivRoots_2","Infinity","TransformableSVG","this","ROUND","TO_REL","NORMALIZE_HVZ","A_TO_C","eps","SANITIZE","TRANSLATE","SCALE","ROTATE","SKEW_X","SKEW_Y","X_AXIS_SYMMETRY","Y_AXIS_SYMMETRY","ANNOTATE_ARCS","isWhiteSpace","isDigit","charCodeAt","__extends","_this","_super","SVGPathDataParser","parse","curArgs","canParseCommandOrComma","SyntaxError","finishCommand","push","isAArcFlag","curCommandType","curNumber","isEndingDigit","curNumberHasExpDigits","curNumberHasExp","curNumberHasDecimal","Number","COMMAND_ARG_COUNTS","curCommandRelative","Object","create","value","chunk","getPrototypeOf","call","parsedCommands_1","cT","content","encode","boundsTransform","CALCULATE_BOUNDS","transformFunction","newCommands","transformedCommand","path","parser","finish"],"mappings":"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","sourcesContent":["import { SVGPathData } from \"./SVGPathData\";\nimport { SVGCommand } from \"./types\";\n\n// Encode SVG PathData\n// http://www.w3.org/TR/SVG/paths.html#PathDataBNF\n\n// Private consts : Char groups\nconst WSP = \" \";\n\nexport function encodeSVGPath(commands: SVGCommand | SVGCommand[]) {\n  let str = \"\";\n\n  if (!Array.isArray(commands)) {\n    commands = [commands];\n  }\n  for (let i = 0; i < commands.length; i++) {\n    const command = commands[i];\n    if (command.type === SVGPathData.CLOSE_PATH) {\n      str += \"z\";\n    } else if (command.type === SVGPathData.HORIZ_LINE_TO) {\n      str += (command.relative ? \"h\" : \"H\") +\n        command.x;\n    } else if (command.type === SVGPathData.VERT_LINE_TO) {\n      str += (command.relative ? \"v\" : \"V\") +\n        command.y;\n    } else if (command.type === SVGPathData.MOVE_TO) {\n      str += (command.relative ? \"m\" : \"M\") +\n        command.x + WSP + command.y;\n    } else if (command.type === SVGPathData.LINE_TO) {\n      str += (command.relative ? \"l\" : \"L\") +\n        command.x + WSP + command.y;\n    } else if (command.type === SVGPathData.CURVE_TO) {\n      str += (command.relative ? \"c\" : \"C\") +\n        command.x1 + WSP + command.y1 +\n        WSP + command.x2 + WSP + command.y2 +\n        WSP + command.x + WSP + command.y;\n    } else if (command.type === SVGPathData.SMOOTH_CURVE_TO) {\n      str += (command.relative ? \"s\" : \"S\") +\n        command.x2 + WSP + command.y2 +\n        WSP + command.x + WSP + command.y;\n    } else if (command.type === SVGPathData.QUAD_TO) {\n      str += (command.relative ? \"q\" : \"Q\") +\n        command.x1 + WSP + command.y1 +\n        WSP + command.x + WSP + command.y;\n    } else if (command.type === SVGPathData.SMOOTH_QUAD_TO) {\n      str += (command.relative ? \"t\" : \"T\") +\n        command.x + WSP + command.y;\n    } else if (command.type === SVGPathData.ARC) {\n      str += (command.relative ? \"a\" : \"A\") +\n        command.rX + WSP + command.rY +\n        WSP + command.xRot +\n        WSP + (+command.lArcFlag) + WSP + (+command.sweepFlag) +\n        WSP + command.x + WSP + command.y;\n    } else {\n      // Unknown command\n      throw new Error(\n        `Unexpected command type \"${ (command as any).type}\" at index ${i}.`);\n    }\n  }\n\n  return str;\n}\n","import { SVGPathData } from \"./SVGPathData\";\nimport { CommandA, CommandC } from \"./types\";\n\nexport function rotate([x, y]: [number, number], rad: number) {\n  return [\n    x * Math.cos(rad) - y * Math.sin(rad),\n    x * Math.sin(rad) + y * Math.cos(rad),\n  ];\n}\n\nconst DEBUG_CHECK_NUMBERS = true;\nexport function assertNumbers(...numbers: number[]) {\n  if (DEBUG_CHECK_NUMBERS) {\n    for (let i = 0; i < numbers.length; i++) {\n      if (\"number\" !== typeof numbers[i]) {\n        throw new Error(\n          `assertNumbers arguments[${i}] is not a number. ${typeof numbers[i]} == typeof ${numbers[i]}`);\n      }\n    }\n  }\n  return true;\n}\n\nconst PI = Math.PI;\n\n/**\n * https://www.w3.org/TR/SVG/implnote.html#ArcImplementationNotes\n * Fixes rX and rY.\n * Ensures lArcFlag and sweepFlag are 0 or 1\n * Adds center coordinates: command.cX, command.cY (relative or absolute, depending on command.relative)\n * Adds start and end arc parameters (in degrees): command.phi1, command.phi2; phi1 < phi2 iff. c.sweepFlag == true\n */\nexport function annotateArcCommand(c: CommandA, x1: number, y1: number) {\n  c.lArcFlag = (0 === c.lArcFlag) ? 0 : 1;\n  c.sweepFlag = (0 === c.sweepFlag) ? 0 : 1;\n  // tslint:disable-next-line\n  let {rX, rY, x, y} = c;\n\n  rX = Math.abs(c.rX);\n  rY = Math.abs(c.rY);\n  const [x1_, y1_] = rotate([(x1 - x) / 2, (y1 - y) / 2], -c.xRot / 180 * PI);\n  const testValue = Math.pow(x1_, 2) / Math.pow(rX, 2) + Math.pow(y1_, 2) / Math.pow(rY, 2);\n\n  if (1 < testValue) {\n    rX *= Math.sqrt(testValue);\n    rY *= Math.sqrt(testValue);\n  }\n  c.rX = rX;\n  c.rY = rY;\n  const c_ScaleTemp = (Math.pow(rX, 2) * Math.pow(y1_, 2) + Math.pow(rY, 2) * Math.pow(x1_, 2));\n  const c_Scale = (c.lArcFlag !== c.sweepFlag ? 1 : -1) *\n    Math.sqrt(Math.max(0, (Math.pow(rX, 2) * Math.pow(rY, 2) - c_ScaleTemp) / c_ScaleTemp));\n  const cx_ = rX * y1_ / rY * c_Scale;\n  const cy_ = -rY * x1_ / rX * c_Scale;\n  const cRot = rotate([cx_, cy_], c.xRot / 180 * PI);\n\n  c.cX = cRot[0] + (x1 + x) / 2;\n  c.cY = cRot[1] + (y1 + y) / 2;\n  c.phi1 = Math.atan2((y1_ - cy_) / rY, (x1_ - cx_) / rX);\n  c.phi2 = Math.atan2((-y1_ - cy_) / rY, (-x1_ - cx_) / rX);\n  if (0 === c.sweepFlag && c.phi2 > c.phi1) {\n    c.phi2 -= 2 * PI;\n  }\n  if (1 === c.sweepFlag && c.phi2 < c.phi1) {\n    c.phi2 += 2 * PI;\n  }\n  c.phi1 *= 180 / PI;\n  c.phi2 *= 180 / PI;\n}\n\n/**\n * Solves a quadratic system of equations of the form\n *      a * x + b * y = c\n *      x² + y² = 1\n * This can be understood as the intersection of the unit circle with a line.\n *      => y = (c - a x) / b\n *      => x² + (c - a x)² / b² = 1\n *      => x² b² + c² - 2 c a x + a² x² = b²\n *      => (a² + b²) x² - 2 a c x + (c² - b²) = 0\n */\nexport function intersectionUnitCircleLine(a: number, b: number, c: number): [number, number][] {\n  assertNumbers(a, b, c);\n  // cf. pqFormula\n  const termSqr = a * a + b * b - c * c;\n\n  if (0 > termSqr) {\n    return [];\n  } else if (0 === termSqr) {\n    return [\n      [\n        (a * c) / (a * a + b * b),\n        (b * c) / (a * a + b * b)]];\n  }\n  const term = Math.sqrt(termSqr);\n\n  return [\n    [\n      (a * c + b * term) / (a * a + b * b),\n      (b * c - a * term) / (a * a + b * b)],\n    [\n      (a * c - b * term) / (a * a + b * b),\n      (b * c + a * term) / (a * a + b * b)]];\n\n}\n\nexport const DEG = Math.PI / 180;\n\nexport function lerp(a: number, b: number, t: number) {\n  return (1 - t) * a + t * b;\n}\n\nexport function arcAt(c: number, x1: number, x2: number, phiDeg: number) {\n  return c + Math.cos(phiDeg / 180 * PI) * x1 + Math.sin(phiDeg / 180 * PI) * x2;\n}\n\nexport function bezierRoot(x0: number, x1: number, x2: number, x3: number) {\n  const EPS = 1e-6;\n  const x01 = x1 - x0;\n  const x12 = x2 - x1;\n  const x23 = x3 - x2;\n  const a = 3 * x01 + 3 * x23 - 6 * x12;\n  const b = (x12 - x01) * 6;\n  const c = 3 * x01;\n  // solve a * t² + b * t + c = 0\n\n  if (Math.abs(a) < EPS) {\n    // equivalent to b * t + c =>\n    return [-c / b];\n  }\n  return pqFormula(b / a, c / a, EPS);\n\n}\n\nexport function bezierAt(x0: number, x1: number, x2: number, x3: number, t: number) {\n  // console.log(x0, y0, x1, y1, x2, y2, x3, y3, t)\n  const s = 1 - t;\n  const c0 = s * s * s;\n  const c1 = 3 * s * s * t;\n  const c2 = 3 * s * t * t;\n  const c3 = t * t * t;\n\n  return x0 * c0 + x1 * c1 + x2 * c2 + x3 * c3;\n}\n\nfunction pqFormula(p: number, q: number, PRECISION = 1e-6) {\n  // 4 times the discriminant:in\n  const discriminantX4 = p * p / 4 - q;\n\n  if (discriminantX4 < -PRECISION) {\n    return [];\n  } else if (discriminantX4 <= PRECISION) {\n    return [-p / 2];\n  }\n  const root = Math.sqrt(discriminantX4);\n\n  return [-(p / 2) - root, -(p / 2) + root];\n\n}\n\nexport function a2c(arc: CommandA, x0: number, y0: number): CommandC[] {\n  if (!arc.cX) {\n    annotateArcCommand(arc, x0, y0);\n  }\n\n  const phiMin = Math.min(arc.phi1!, arc.phi2!), phiMax = Math.max(arc.phi1!, arc.phi2!), deltaPhi = phiMax - phiMin;\n  const partCount = Math.ceil(deltaPhi / 90 );\n\n  const result: CommandC[] = new Array(partCount);\n  let prevX = x0, prevY = y0;\n  for (let i = 0; i < partCount; i++) {\n    const phiStart = lerp(arc.phi1!, arc.phi2!, i / partCount);\n    const phiEnd = lerp(arc.phi1!, arc.phi2!, (i + 1) / partCount);\n    const deltaPhi = phiEnd - phiStart;\n    const f = 4 / 3 * Math.tan(deltaPhi * DEG / 4);\n    // x1/y1, x2/y2 and x/y coordinates on the unit circle for phiStart/phiEnd\n    const [x1, y1] = [\n      Math.cos(phiStart * DEG) - f * Math.sin(phiStart * DEG),\n      Math.sin(phiStart * DEG) + f * Math.cos(phiStart * DEG)];\n    const [x, y] = [Math.cos(phiEnd * DEG), Math.sin(phiEnd * DEG)];\n    const [x2, y2] = [x + f * Math.sin(phiEnd * DEG), y - f * Math.cos(phiEnd * DEG)];\n    result[i] = {relative: arc.relative, type: SVGPathData.CURVE_TO } as any;\n    const transform = (x: number, y: number) => {\n      const [xTemp, yTemp] = rotate([x * arc.rX, y * arc.rY], arc.xRot);\n      return [arc.cX! + xTemp, arc.cY! + yTemp];\n    };\n    [result[i].x1, result[i].y1] = transform(x1, y1);\n    [result[i].x2, result[i].y2] = transform(x2, y2);\n    [result[i].x, result[i].y] = transform(x, y);\n    if (arc.relative) {\n      result[i].x1 -= prevX;\n      result[i].y1 -= prevY;\n      result[i].x2 -= prevX;\n      result[i].y2 -= prevY;\n      result[i].x -= prevX;\n      result[i].y -= prevY;\n    }\n    [prevX, prevY] = [result[i].x, result[i].y];\n  }\n  return result;\n}\n","// Transform SVG PathData\n// http://www.w3.org/TR/SVG/paths.html#PathDataBNF\n\nimport { a2c, annotateArcCommand, arcAt, assertNumbers, bezierAt, bezierRoot,\n  intersectionUnitCircleLine } from \"./mathUtils\";\nimport { SVGPathData } from \"./SVGPathData\";\nimport { SVGCommand, TransformFunction } from \"./types\";\n\nexport namespace SVGPathDataTransformer {\n  // Predefined transforming functions\n  // Rounds commands values\n  export function ROUND(roundVal = 1e13) {\n    assertNumbers(roundVal);\n    function rf(val: number) { return Math.round(val * roundVal) / roundVal; }\n    return function round(command: any) {\n      if (\"undefined\" !== typeof command.x1) {\n        command.x1 = rf(command.x1);\n      }\n      if (\"undefined\" !== typeof command.y1) {\n        command.y1 = rf(command.y1);\n      }\n\n      if (\"undefined\" !== typeof command.x2) {\n        command.x2 = rf(command.x2);\n      }\n      if (\"undefined\" !== typeof command.y2) {\n        command.y2 = rf(command.y2);\n      }\n\n      if (\"undefined\" !== typeof command.x) {\n        command.x = rf(command.x);\n      }\n      if (\"undefined\" !== typeof command.y) {\n        command.y = rf(command.y);\n      }\n\n      if (\"undefined\" !== typeof command.rX) {\n        command.rX = rf(command.rX);\n      }\n      if (\"undefined\" !== typeof command.rY) {\n        command.rY = rf(command.rY);\n      }\n\n      return command;\n    };\n  }\n  // Relative to absolute commands\n  export function TO_ABS() {\n    return INFO((command, prevX, prevY) => {\n      if (command.relative) {\n        // x1/y1 values\n        if (\"undefined\" !== typeof command.x1) {\n          command.x1 += prevX;\n        }\n        if (\"undefined\" !== typeof command.y1) {\n          command.y1 += prevY;\n        }\n        // x2/y2 values\n        if (\"undefined\" !== typeof command.x2) {\n          command.x2 += prevX;\n        }\n        if (\"undefined\" !== typeof command.y2) {\n          command.y2 += prevY;\n        }\n        // Finally x/y values\n        if (\"undefined\" !== typeof command.x) {\n          command.x += prevX;\n        }\n        if (\"undefined\" !== typeof command.y) {\n          command.y += prevY;\n        }\n        command.relative = false;\n      }\n      return command;\n    });\n  }\n  // Absolute to relative commands\n  export function TO_REL() {\n    return INFO((command, prevX, prevY) => {\n      if (!command.relative) {\n        // x1/y1 values\n        if (\"undefined\" !== typeof command.x1) {\n          command.x1 -= prevX;\n        }\n        if (\"undefined\" !== typeof command.y1) {\n          command.y1 -= prevY;\n        }\n        // x2/y2 values\n        if (\"undefined\" !== typeof command.x2) {\n          command.x2 -= prevX;\n        }\n        if (\"undefined\" !== typeof command.y2) {\n          command.y2 -= prevY;\n        }\n        // Finally x/y values\n        if (\"undefined\" !== typeof command.x) {\n          command.x -= prevX;\n        }\n        if (\"undefined\" !== typeof command.y) {\n          command.y -= prevY;\n        }\n        command.relative = true;\n      }\n      return command;\n    });\n  }\n  // Convert H, V, Z and A with rX = 0 to L\n  export function NORMALIZE_HVZ(normalizeZ = true, normalizeH = true, normalizeV = true) {\n    return INFO((command, prevX, prevY, pathStartX, pathStartY) => {\n      if (isNaN(pathStartX) && !(command.type & SVGPathData.MOVE_TO)) {\n        throw new Error(\"path must start with moveto\");\n      }\n      if (normalizeH && command.type & SVGPathData.HORIZ_LINE_TO) {\n        command.type = SVGPathData.LINE_TO;\n        command.y = command.relative ? 0 : prevY;\n      }\n      if (normalizeV && command.type & SVGPathData.VERT_LINE_TO) {\n        command.type = SVGPathData.LINE_TO;\n        command.x = command.relative ? 0 : prevX;\n      }\n      if (normalizeZ && command.type & SVGPathData.CLOSE_PATH) {\n        command.type = SVGPathData.LINE_TO;\n        command.x = command.relative ? pathStartX - prevX : pathStartX;\n        command.y = command.relative ? pathStartY - prevY : pathStartY;\n      }\n      if (command.type & SVGPathData.ARC && (0 === command.rX || 0 === command.rY)) {\n        command.type = SVGPathData.LINE_TO;\n        delete command.rX;\n        delete command.rY;\n        delete command.xRot;\n        delete command.lArcFlag;\n        delete command.sweepFlag;\n      }\n      return command;\n    });\n  }\n  /*\n   * Transforms smooth curves and quads to normal curves and quads (SsTt to CcQq)\n   */\n  export function NORMALIZE_ST() {\n    let prevCurveC2X = NaN;\n    let prevCurveC2Y = NaN;\n    let prevQuadCX = NaN;\n    let prevQuadCY = NaN;\n\n    return INFO((command, prevX, prevY) => {\n      if (command.type & SVGPathData.SMOOTH_CURVE_TO) {\n        command.type = SVGPathData.CURVE_TO;\n        prevCurveC2X = isNaN(prevCurveC2X) ? prevX : prevCurveC2X;\n        prevCurveC2Y = isNaN(prevCurveC2Y) ? prevY : prevCurveC2Y;\n        command.x1 = command.relative ? prevX - prevCurveC2X : 2 * prevX - prevCurveC2X;\n        command.y1 = command.relative ? prevY - prevCurveC2Y : 2 * prevY - prevCurveC2Y;\n      }\n      if (command.type & SVGPathData.CURVE_TO) {\n        prevCurveC2X = command.relative ? prevX + command.x2 : command.x2;\n        prevCurveC2Y = command.relative ? prevY + command.y2 : command.y2;\n      } else {\n        prevCurveC2X = NaN;\n        prevCurveC2Y = NaN;\n      }\n      if (command.type & SVGPathData.SMOOTH_QUAD_TO) {\n        command.type = SVGPathData.QUAD_TO;\n        prevQuadCX = isNaN(prevQuadCX) ? prevX : prevQuadCX;\n        prevQuadCY = isNaN(prevQuadCY) ? prevY : prevQuadCY;\n        command.x1 = command.relative ? prevX - prevQuadCX : 2 * prevX - prevQuadCX;\n        command.y1 = command.relative ? prevY - prevQuadCY : 2 * prevY - prevQuadCY;\n      }\n      if (command.type & SVGPathData.QUAD_TO) {\n        prevQuadCX = command.relative ? prevX + command.x1 : command.x1;\n        prevQuadCY = command.relative ? prevY + command.y1 : command.y1;\n      } else {\n        prevQuadCX = NaN;\n        prevQuadCY = NaN;\n      }\n\n      return command;\n    });\n  }\n  /*\n   * A quadratic bézier curve can be represented by a cubic bézier curve which has\n   * the same end points as the quadratic and both control points in place of the\n   * quadratic\"s one.\n   *\n   * This transformer replaces QqTt commands with Cc commands respectively.\n   * This is useful for reading path data into a system which only has a\n   * representation for cubic curves.\n   */\n  export function QT_TO_C() {\n    let prevQuadX1 = NaN;\n    let prevQuadY1 = NaN;\n\n    return INFO((command, prevX, prevY) => {\n      if (command.type & SVGPathData.SMOOTH_QUAD_TO) {\n        command.type = SVGPathData.QUAD_TO;\n        prevQuadX1 = isNaN(prevQuadX1) ? prevX : prevQuadX1;\n        prevQuadY1 = isNaN(prevQuadY1) ? prevY : prevQuadY1;\n        command.x1 = command.relative ? prevX - prevQuadX1 : 2 * prevX - prevQuadX1;\n        command.y1 = command.relative ? prevY - prevQuadY1 : 2 * prevY - prevQuadY1;\n      }\n      if (command.type & SVGPathData.QUAD_TO) {\n        prevQuadX1 = command.relative ? prevX + command.x1 : command.x1;\n        prevQuadY1 = command.relative ? prevY + command.y1 : command.y1;\n        const x1 = command.x1;\n        const y1 = command.y1;\n\n        command.type = SVGPathData.CURVE_TO;\n        command.x1 = ((command.relative ? 0 : prevX) + x1 * 2) / 3;\n        command.y1 = ((command.relative ? 0 : prevY) + y1 * 2) / 3;\n        command.x2 = (command.x + x1 * 2) / 3;\n        command.y2 = (command.y + y1 * 2) / 3;\n      } else {\n        prevQuadX1 = NaN;\n        prevQuadY1 = NaN;\n      }\n\n      return command;\n    });\n  }\n  export function INFO(\n    f: (command: any, prevXAbs: number, prevYAbs: number,\n        pathStartXAbs: number, pathStartYAbs: number) => any | any[]) {\n    let prevXAbs = 0;\n    let prevYAbs = 0;\n    let pathStartXAbs = NaN;\n    let pathStartYAbs = NaN;\n\n    return function transform(command: any) {\n      if (isNaN(pathStartXAbs) && !(command.type & SVGPathData.MOVE_TO)) {\n        throw new Error(\"path must start with moveto\");\n      }\n\n      const result = f(command, prevXAbs, prevYAbs, pathStartXAbs, pathStartYAbs);\n\n      if (command.type & SVGPathData.CLOSE_PATH) {\n        prevXAbs = pathStartXAbs;\n        prevYAbs = pathStartYAbs;\n      }\n\n      if (\"undefined\" !== typeof command.x) {\n        prevXAbs = (command.relative ? prevXAbs + command.x : command.x);\n      }\n      if (\"undefined\" !== typeof command.y) {\n        prevYAbs = (command.relative ? prevYAbs + command.y : command.y);\n      }\n\n      if (command.type & SVGPathData.MOVE_TO) {\n        pathStartXAbs = prevXAbs;\n        pathStartYAbs = prevYAbs;\n      }\n\n      return result;\n    };\n  }\n  /*\n   * remove 0-length segments\n   */\n  export function SANITIZE(EPS = 0) {\n    assertNumbers(EPS);\n    let prevCurveC2X = NaN;\n    let prevCurveC2Y = NaN;\n    let prevQuadCX = NaN;\n    let prevQuadCY = NaN;\n\n    return INFO((command, prevX, prevY, pathStartX, pathStartY) => {\n      const abs = Math.abs;\n      let skip = false;\n      let x1Rel = 0;\n      let y1Rel = 0;\n\n      if (command.type & SVGPathData.SMOOTH_CURVE_TO) {\n        x1Rel = isNaN(prevCurveC2X) ? 0 : prevX - prevCurveC2X;\n        y1Rel = isNaN(prevCurveC2Y) ? 0 : prevY - prevCurveC2Y;\n      }\n      if (command.type & (SVGPathData.CURVE_TO | SVGPathData.SMOOTH_CURVE_TO)) {\n        prevCurveC2X = command.relative ? prevX + command.x2 : command.x2;\n        prevCurveC2Y = command.relative ? prevY + command.y2 : command.y2;\n      } else {\n        prevCurveC2X = NaN;\n        prevCurveC2Y = NaN;\n      }\n      if (command.type & SVGPathData.SMOOTH_QUAD_TO) {\n        prevQuadCX = isNaN(prevQuadCX) ? prevX : 2 * prevX - prevQuadCX;\n        prevQuadCY = isNaN(prevQuadCY) ? prevY : 2 * prevY - prevQuadCY;\n      } else if (command.type & SVGPathData.QUAD_TO) {\n        prevQuadCX = command.relative ? prevX + command.x1 : command.x1;\n        prevQuadCY = command.relative ? prevY + command.y1 : command.y2;\n      } else {\n        prevQuadCX = NaN;\n        prevQuadCY = NaN;\n      }\n\n      if (command.type & SVGPathData.LINE_COMMANDS ||\n        command.type & SVGPathData.ARC && (0 === command.rX || 0 === command.rY || !command.lArcFlag) ||\n        command.type & SVGPathData.CURVE_TO || command.type & SVGPathData.SMOOTH_CURVE_TO ||\n        command.type & SVGPathData.QUAD_TO || command.type & SVGPathData.SMOOTH_QUAD_TO) {\n        const xRel = \"undefined\" === typeof command.x ? 0 :\n          (command.relative ? command.x : command.x - prevX);\n        const yRel = \"undefined\" === typeof command.y ? 0 :\n          (command.relative ? command.y : command.y - prevY);\n\n        x1Rel = !isNaN(prevQuadCX) ? prevQuadCX - prevX :\n          \"undefined\" === typeof command.x1 ? x1Rel :\n            command.relative ? command.x :\n              command.x1 - prevX;\n        y1Rel = !isNaN(prevQuadCY) ? prevQuadCY - prevY :\n          \"undefined\" === typeof command.y1 ? y1Rel :\n            command.relative ? command.y :\n              command.y1 - prevY;\n\n        const x2Rel = \"undefined\" === typeof command.x2 ? 0 :\n          (command.relative ? command.x : command.x2 - prevX);\n        const y2Rel = \"undefined\" === typeof command.y2 ? 0 :\n          (command.relative ? command.y : command.y2 - prevY);\n\n        if (abs(xRel) <= EPS && abs(yRel) <= EPS &&\n          abs(x1Rel) <= EPS && abs(y1Rel) <= EPS &&\n          abs(x2Rel) <= EPS && abs(y2Rel) <= EPS) {\n          skip = true;\n        }\n      }\n\n      if (command.type & SVGPathData.CLOSE_PATH) {\n        if (abs(prevX - pathStartX) <= EPS && abs(prevY - pathStartY) <= EPS) {\n          skip = true;\n        }\n      }\n\n      return skip ? [] : command;\n    });\n  }\n  // SVG Transforms : http://www.w3.org/TR/SVGTiny12/coords.html#TransformList\n  // Matrix : http://apike.ca/prog_svg_transform.html\n  // a c e\n  // b d f\n  export function MATRIX(a: number, b: number, c: number, d: number, e: number, f: number) {\n    assertNumbers(a, b, c, d, e, f);\n\n    return INFO((command, prevX, prevY, pathStartX) => {\n      const origX1 = command.x1;\n      const origX2 = command.x2;\n      // if isNaN(pathStartX), then this is the first command, which is ALWAYS an\n      // absolute MOVE_TO, regardless what the relative flag says\n      const comRel = command.relative && !isNaN(pathStartX);\n      const x = \"undefined\" !== typeof command.x ? command.x : (comRel ? 0 : prevX);\n      const y = \"undefined\" !== typeof command.y ? command.y : (comRel ? 0 : prevY);\n\n      if (command.type & SVGPathData.HORIZ_LINE_TO && 0 !== b) {\n        command.type = SVGPathData.LINE_TO;\n        command.y = command.relative ? 0 : prevY;\n      }\n      if (command.type & SVGPathData.VERT_LINE_TO && 0 !== c) {\n        command.type = SVGPathData.LINE_TO;\n        command.x = command.relative ? 0 : prevX;\n      }\n\n      if (\"undefined\" !== typeof command.x) {\n        command.x = (command.x * a) + (y * c) + (comRel ? 0 : e);\n      }\n      if (\"undefined\" !== typeof command.y) {\n        command.y = (x * b) + command.y * d + (comRel ? 0 : f);\n      }\n      if (\"undefined\" !== typeof command.x1) {\n        command.x1 = command.x1 * a + command.y1 * c + (comRel ? 0 : e);\n      }\n      if (\"undefined\" !== typeof command.y1) {\n        command.y1 = origX1 * b + command.y1 * d + (comRel ? 0 : f);\n      }\n      if (\"undefined\" !== typeof command.x2) {\n        command.x2 = command.x2 * a + command.y2 * c + (comRel ? 0 : e);\n      }\n      if (\"undefined\" !== typeof command.y2) {\n        command.y2 = origX2 * b + command.y2 * d + (comRel ? 0 : f);\n      }\n      function sqr(x: number) { return x * x; }\n      const det = a * d - b * c;\n\n      if (\"undefined\" !== typeof command.xRot) {\n        // Skip if this is a pure translation\n        if (1 !== a || 0 !== b || 0 !== c || 1 !== d) {\n          // Special case for singular matrix\n          if (0 === det) {\n            // In the singular case, the arc is compressed to a line. The actual geometric image of the original\n            // curve under this transform possibly extends beyond the starting and/or ending points of the segment, but\n            // for simplicity we ignore this detail and just replace this command with a single line segment.\n            delete command.rX;\n            delete command.rY;\n            delete command.xRot;\n            delete command.lArcFlag;\n            delete command.sweepFlag;\n            command.type = SVGPathData.LINE_TO;\n          } else {\n            // Convert to radians\n            const xRot = command.xRot * Math.PI / 180;\n\n            // Convert rotated ellipse to general conic form\n            // x0^2/rX^2 + y0^2/rY^2 - 1 = 0\n            // x0 = x*cos(xRot) + y*sin(xRot)\n            // y0 = -x*sin(xRot) + y*cos(xRot)\n            // --> A*x^2 + B*x*y + C*y^2 - 1 = 0, where\n            const sinRot = Math.sin(xRot);\n            const cosRot = Math.cos(xRot);\n            const xCurve = 1 / sqr(command.rX);\n            const yCurve = 1 / sqr(command.rY);\n            const A = sqr(cosRot) * xCurve + sqr(sinRot) * yCurve;\n            const B = 2 * sinRot * cosRot * (xCurve - yCurve);\n            const C = sqr(sinRot) * xCurve + sqr(cosRot) * yCurve;\n\n            // Apply matrix to A*x^2 + B*x*y + C*y^2 - 1 = 0\n            // x1 = a*x + c*y\n            // y1 = b*x + d*y\n            //      (we can ignore e and f, since pure translations don\"t affect the shape of the ellipse)\n            // --> A1*x1^2 + B1*x1*y1 + C1*y1^2 - det^2 = 0, where\n            const A1 = A * d * d - B * b * d + C * b * b;\n            const B1 = B * (a * d + b * c) - 2 * (A * c * d + C * a * b);\n            const C1 = A * c * c - B * a * c + C * a * a;\n\n            // Unapply newXRot to get back to axis-aligned ellipse equation\n            // x1 = x2*cos(newXRot) - y2*sin(newXRot)\n            // y1 = x2*sin(newXRot) + y2*cos(newXRot)\n            // A1*x1^2 + B1*x1*y1 + C1*y1^2 - det^2 =\n            //   x2^2*(A1*cos(newXRot)^2 + B1*sin(newXRot)*cos(newXRot) + C1*sin(newXRot)^2)\n            //   + x2*y2*(2*(C1 - A1)*sin(newXRot)*cos(newXRot) + B1*(cos(newXRot)^2 - sin(newXRot)^2))\n            //   + y2^2*(A1*sin(newXRot)^2 - B1*sin(newXRot)*cos(newXRot) + C1*cos(newXRot)^2)\n            //   (which must have the same zeroes as)\n            // x2^2/newRX^2 + y2^2/newRY^2 - 1\n            //   (so we have)\n            // 2*(C1 - A1)*sin(newXRot)*cos(newXRot) + B1*(cos(newXRot)^2 - sin(newXRot)^2) = 0\n            // (A1 - C1)*sin(2*newXRot) = B1*cos(2*newXRot)\n            // 2*newXRot = atan2(B1, A1 - C1)\n            const newXRot = ((Math.atan2(B1, A1 - C1) + Math.PI) % Math.PI) / 2;\n            // For any integer n, (atan2(B1, A1 - C1) + n*pi)/2 is a solution to the above; incrementing n just swaps\n            // the x and y radii computed below (since that\"s what rotating an ellipse by pi/2 does).  Choosing the\n            // rotation between 0 and pi/2 eliminates the ambiguity and leads to more predictable output.\n\n            // Finally, we get newRX and newRY from the same-zeroes relationship that gave us newXRot\n            const newSinRot = Math.sin(newXRot);\n            const newCosRot = Math.cos(newXRot);\n\n            command.rX = Math.abs(det) /\n              Math.sqrt(A1 * sqr(newCosRot) + B1 * newSinRot * newCosRot + C1 * sqr(newSinRot));\n            command.rY = Math.abs(det) /\n              Math.sqrt(A1 * sqr(newSinRot) - B1 * newSinRot * newCosRot + C1 * sqr(newCosRot));\n            command.xRot = newXRot * 180 / Math.PI;\n          }\n        }\n      }\n      // sweepFlag needs to be inverted when mirroring shapes\n      // see http://www.itk.ilstu.edu/faculty/javila/SVG/SVG_drawing1/elliptical_curve.htm\n      // m 65,10 a 50,25 0 1 0 50,25\n      // M 65,60 A 50,25 0 1 1 115,35\n      if (\"undefined\" !== typeof command.sweepFlag && 0 > det) {\n        command.sweepFlag = +!command.sweepFlag;\n      }\n      return command;\n    });\n  }\n  export function ROTATE(a: number, x = 0, y = 0) {\n    assertNumbers(a, x, y);\n    const sin = Math.sin(a);\n    const cos = Math.cos(a);\n\n    return MATRIX(cos, sin, -sin, cos, x - x * cos + y * sin, y - x * sin - y * cos);\n  }\n  export function TRANSLATE(dX: number, dY = 0) {\n    assertNumbers(dX, dY);\n    return MATRIX(1, 0, 0, 1, dX, dY);\n  }\n  export function SCALE(dX: number, dY = dX) {\n    assertNumbers(dX, dY);\n    return MATRIX(dX, 0, 0, dY, 0, 0);\n  }\n  export function SKEW_X(a: number) {\n    assertNumbers(a);\n    return MATRIX(1, 0, Math.atan(a), 1, 0, 0);\n  }\n  export function SKEW_Y(a: number) {\n    assertNumbers(a);\n    return MATRIX(1, Math.atan(a), 0, 1, 0, 0);\n  }\n  export function X_AXIS_SYMMETRY(xOffset = 0) {\n    assertNumbers(xOffset);\n    return MATRIX(-1, 0, 0, 1, xOffset, 0);\n  }\n  export function Y_AXIS_SYMMETRY(yOffset = 0) {\n    assertNumbers(yOffset);\n    return MATRIX(1, 0, 0, -1, 0, yOffset);\n  }\n  // Convert arc commands to curve commands\n  export function A_TO_C() {\n    return INFO((command, prevX, prevY) => {\n      if (SVGPathData.ARC === command.type) {\n        return a2c(command, command.relative ? 0 : prevX, command.relative ? 0 : prevY);\n      }\n      return command;\n    });\n  }\n  // @see annotateArcCommand\n  export function ANNOTATE_ARCS() {\n    return INFO((c, x1, y1) => {\n      if (c.relative) {\n        x1 = 0;\n        y1 = 0;\n      }\n      if (SVGPathData.ARC === c.type) {\n        annotateArcCommand(c, x1, y1);\n      }\n      return c;\n    });\n  }\n  export function CLONE() {\n    return (c: SVGCommand) => {\n      const result = {} as SVGCommand;\n      // tslint:disable-next-line\n      for (const key in c) {\n        result[key as keyof SVGCommand] = c[key as keyof SVGCommand];\n      }\n      return result;\n    };\n  }\n  // @see annotateArcCommand\n  export function CALCULATE_BOUNDS() {\n    const clone = CLONE();\n    const toAbs = TO_ABS();\n    const qtToC = QT_TO_C();\n    const normST = NORMALIZE_ST();\n    const f: TransformFunction & {minX: number, maxX: number, minY: number, maxY: number} =\n        INFO((command, prevXAbs, prevYAbs) => {\n      const c = normST(qtToC(toAbs(clone(command))));\n      function fixX(absX: number) {\n        if (absX > f.maxX) { f.maxX = absX; }\n        if (absX < f.minX) { f.minX = absX; }\n      }\n      function fixY(absY: number) {\n        if (absY > f.maxY) { f.maxY = absY; }\n        if (absY < f.minY) { f.minY = absY; }\n      }\n      if (c.type & SVGPathData.DRAWING_COMMANDS) {\n        fixX(prevXAbs);\n        fixY(prevYAbs);\n      }\n      if (c.type & SVGPathData.HORIZ_LINE_TO) {\n        fixX(c.x);\n      }\n      if (c.type & SVGPathData.VERT_LINE_TO) {\n        fixY(c.y);\n      }\n      if (c.type & SVGPathData.LINE_TO) {\n        fixX(c.x);\n        fixY(c.y);\n      }\n      if (c.type & SVGPathData.CURVE_TO) {\n        // add start and end points\n        fixX(c.x);\n        fixY(c.y);\n        const xDerivRoots = bezierRoot(prevXAbs, c.x1, c.x2, c.x);\n\n        for (const derivRoot of xDerivRoots) {\n          if (0 < derivRoot && 1 > derivRoot) {\n            fixX(bezierAt(prevXAbs, c.x1, c.x2, c.x, derivRoot));\n          }\n        }\n        const yDerivRoots = bezierRoot(prevYAbs, c.y1, c.y2, c.y);\n\n        for (const derivRoot of yDerivRoots) {\n          if (0 < derivRoot && 1 > derivRoot) {\n            fixY(bezierAt(prevYAbs, c.y1, c.y2, c.y, derivRoot));\n          }\n        }\n      }\n      if (c.type & SVGPathData.ARC) {\n        // add start and end points\n        fixX(c.x);\n        fixY(c.y);\n        annotateArcCommand(c, prevXAbs, prevYAbs);\n        // p = cos(phi) * xv + sin(phi) * yv\n        // dp = -sin(phi) * xv + cos(phi) * yv = 0\n        const xRotRad = c.xRot / 180 * Math.PI;\n        // points on ellipse for phi = 0° and phi = 90°\n        const x0 = Math.cos(xRotRad) * c.rX;\n        const y0 = Math.sin(xRotRad) * c.rX;\n        const x90 = -Math.sin(xRotRad) * c.rY;\n        const y90 = Math.cos(xRotRad) * c.rY;\n\n        // annotateArcCommand returns phi1 and phi2 such that -180° < phi1 < 180° and phi2 is smaller or greater\n        // depending on the sweep flag. Calculate phiMin, phiMax such that -180° < phiMin < 180° and phiMin < phiMax\n        const [phiMin, phiMax] = c.phi1 < c.phi2 ?\n          [c.phi1, c.phi2] :\n          (-180 > c.phi2 ? [c.phi2 + 360, c.phi1 + 360] : [c.phi2, c.phi1]);\n        const normalizeXiEta = ([xi, eta]: [number, number]) => {\n          const phiRad = Math.atan2(eta, xi);\n          const phi = phiRad * 180 / Math.PI;\n\n          return phi < phiMin ? phi + 360 : phi;\n        };\n        // xi = cos(phi), eta = sin(phi)\n\n        const xDerivRoots = intersectionUnitCircleLine(x90, -x0, 0).map(normalizeXiEta);\n        for (const derivRoot of xDerivRoots) {\n          if (derivRoot > phiMin && derivRoot < phiMax) {\n            fixX(arcAt(c.cX, x0, x90, derivRoot));\n          }\n        }\n\n        const yDerivRoots = intersectionUnitCircleLine(y90, -y0, 0).map(normalizeXiEta);\n        for (const derivRoot of yDerivRoots) {\n          if (derivRoot > phiMin && derivRoot < phiMax) {\n            fixY(arcAt(c.cY, y0, y90, derivRoot));\n          }\n        }\n      }\n      return command;\n    }) as any;\n\n    f.minX = Infinity;\n    f.maxX = -Infinity;\n    f.minY = Infinity;\n    f.maxY = -Infinity;\n    return f;\n  }\n}\n","import { SVGPathDataTransformer } from \"./SVGPathDataTransformer\";\nimport { TransformFunction } from \"./types\";\n\nexport abstract class TransformableSVG {\n  round(x?: number) {\n    return this.transform(SVGPathDataTransformer.ROUND(x));\n  }\n\n  toAbs() {\n    return this.transform(SVGPathDataTransformer.TO_ABS());\n  }\n\n  toRel() {\n    return this.transform(SVGPathDataTransformer.TO_REL());\n  }\n\n  normalizeHVZ(a?: boolean, b?: boolean, c?: boolean) {\n    return this.transform(SVGPathDataTransformer.NORMALIZE_HVZ(a, b, c));\n  }\n\n  normalizeST() {\n    return this.transform(SVGPathDataTransformer.NORMALIZE_ST());\n  }\n\n  qtToC() {\n    return this.transform(SVGPathDataTransformer.QT_TO_C());\n  }\n\n  aToC() {\n    return this.transform(SVGPathDataTransformer.A_TO_C());\n  }\n\n  sanitize(eps?: number) {\n    return this.transform(SVGPathDataTransformer.SANITIZE(eps));\n  }\n\n  translate(x: number, y?: number) {\n    return this.transform(SVGPathDataTransformer.TRANSLATE(x, y));\n  }\n\n  scale(x: number, y?: number) {\n    return this.transform(SVGPathDataTransformer.SCALE(x, y));\n  }\n\n  rotate(a: number, x?: number, y?: number) {\n    return this.transform(SVGPathDataTransformer.ROTATE(a, x, y));\n  }\n\n  matrix(a: number, b: number, c: number, d: number, e: number, f: number) {\n    return this.transform(SVGPathDataTransformer.MATRIX(a, b, c, d, e, f));\n  }\n\n  skewX(a: number) {\n    return this.transform(SVGPathDataTransformer.SKEW_X(a));\n  }\n\n  skewY(a: number) {\n    return this.transform(SVGPathDataTransformer.SKEW_Y(a));\n  }\n\n  xSymmetry(xOffset?: number) {\n    return this.transform(SVGPathDataTransformer.X_AXIS_SYMMETRY(xOffset));\n  }\n\n  ySymmetry(yOffset?: number) {\n    return this.transform(SVGPathDataTransformer.Y_AXIS_SYMMETRY(yOffset));\n  }\n\n  annotateArcs() {\n    return this.transform(SVGPathDataTransformer.ANNOTATE_ARCS());\n  }\n\n  abstract transform(transformFunction: TransformFunction): this;\n}\n","// Parse SVG PathData\n// http://www.w3.org/TR/SVG/paths.html#PathDataBNF\nimport { COMMAND_ARG_COUNTS, SVGPathData } from \"./SVGPathData\";\nimport { TransformableSVG } from \"./TransformableSVG\";\nimport { SVGCommand, TransformFunction } from \"./types\";\n// Private consts : Char groups\nconst isWhiteSpace = (c: string) =>\n  \" \" === c || \"\\t\" === c || \"\\r\" === c || \"\\n\" === c;\nconst isDigit = (c: string) =>\n  \"0\".charCodeAt(0) <= c.charCodeAt(0) && c.charCodeAt(0) <= \"9\".charCodeAt(0);\nconst COMMANDS = \"mMzZlLhHvVcCsSqQtTaA\";\n\nexport class SVGPathDataParser extends TransformableSVG {\n  private curNumber: string = \"\";\n  private curCommandType: SVGCommand[\"type\"] | -1 = -1;\n  private curCommandRelative = false;\n  private canParseCommandOrComma = true;\n  private curNumberHasExp = false;\n  private curNumberHasExpDigits = false;\n  private curNumberHasDecimal = false;\n  private curArgs: number[] = [];\n\n  constructor() {\n    super();\n  }\n\n  finish(commands: SVGCommand[] = []) {\n    this.parse(\" \", commands);\n    // Adding residual command\n    if (0 !== this.curArgs.length || !this.canParseCommandOrComma) {\n      throw new SyntaxError(\"Unterminated command at the path end.\");\n    }\n    return commands;\n  }\n\n  parse(str: string, commands: SVGCommand[] = []) {\n    const finishCommand = (command: SVGCommand) => {\n      commands.push(command);\n      this.curArgs.length = 0;\n      this.canParseCommandOrComma = true;\n    };\n\n    for (let i = 0; i < str.length; i++) {\n      const c = str[i];\n      // White spaces parsing\n      const isAArcFlag = this.curCommandType === SVGPathData.ARC &&\n        (this.curArgs.length === 3 || this.curArgs.length === 4) &&\n        this.curNumber.length === 1 &&\n        (this.curNumber === \"0\" || this.curNumber === \"1\");\n      const isEndingDigit = isDigit(c) && (\n        (this.curNumber === \"0\" && c === \"0\") ||\n        isAArcFlag\n      );\n\n      if (\n        isDigit(c) &&\n        !isEndingDigit\n      ) {\n        this.curNumber += c;\n        this.curNumberHasExpDigits = this.curNumberHasExp;\n        continue;\n      }\n      if (\"e\" === c || \"E\" === c) {\n        this.curNumber += c;\n        this.curNumberHasExp = true;\n        continue;\n      }\n      if (\n        (\"-\" === c || \"+\" === c) &&\n        this.curNumberHasExp &&\n        !this.curNumberHasExpDigits\n      ) {\n        this.curNumber += c;\n        continue;\n      }\n      // if we already have a \".\", it means we are starting a new number\n      if (\".\" === c && !this.curNumberHasExp && !this.curNumberHasDecimal && !isAArcFlag) {\n        this.curNumber += c;\n        this.curNumberHasDecimal = true;\n        continue;\n      }\n\n      // New number\n      if (this.curNumber && -1 !== this.curCommandType) {\n        const val = Number(this.curNumber);\n        if (isNaN(val)) {\n          throw new SyntaxError(`Invalid number ending at ${i}`);\n        }\n        if (this.curCommandType === SVGPathData.ARC) {\n          if (0 === this.curArgs.length || 1 === this.curArgs.length) {\n            if (0 > val) {\n              throw new SyntaxError(\n                `Expected positive number, got \"${val}\" at index \"${i}\"`,\n              );\n            }\n          } else if (3 === this.curArgs.length || 4 === this.curArgs.length) {\n            if (\"0\" !== this.curNumber && \"1\" !== this.curNumber) {\n              throw new SyntaxError(\n                `Expected a flag, got \"${this.curNumber}\" at index \"${i}\"`,\n              );\n            }\n          }\n        }\n        this.curArgs.push(val);\n        if (this.curArgs.length === COMMAND_ARG_COUNTS[this.curCommandType]) {\n          if (SVGPathData.HORIZ_LINE_TO === this.curCommandType) {\n            finishCommand({\n              type: SVGPathData.HORIZ_LINE_TO,\n              relative: this.curCommandRelative,\n              x: val,\n            });\n          } else if (SVGPathData.VERT_LINE_TO === this.curCommandType) {\n            finishCommand({\n              type: SVGPathData.VERT_LINE_TO,\n              relative: this.curCommandRelative,\n              y: val,\n            });\n            // Move to / line to / smooth quadratic curve to commands (x, y)\n          } else if (\n            this.curCommandType === SVGPathData.MOVE_TO ||\n            this.curCommandType === SVGPathData.LINE_TO ||\n            this.curCommandType === SVGPathData.SMOOTH_QUAD_TO\n          ) {\n            finishCommand({\n              type: this.curCommandType,\n              relative: this.curCommandRelative,\n              x: this.curArgs[0],\n              y: this.curArgs[1],\n            } as SVGCommand);\n            // Switch to line to state\n            if (SVGPathData.MOVE_TO === this.curCommandType) {\n              this.curCommandType = SVGPathData.LINE_TO;\n            }\n          } else if (this.curCommandType === SVGPathData.CURVE_TO) {\n            finishCommand({\n              type: SVGPathData.CURVE_TO,\n              relative: this.curCommandRelative,\n              x1: this.curArgs[0],\n              y1: this.curArgs[1],\n              x2: this.curArgs[2],\n              y2: this.curArgs[3],\n              x: this.curArgs[4],\n              y: this.curArgs[5],\n            });\n          } else if (this.curCommandType === SVGPathData.SMOOTH_CURVE_TO) {\n            finishCommand({\n              type: SVGPathData.SMOOTH_CURVE_TO,\n              relative: this.curCommandRelative,\n              x2: this.curArgs[0],\n              y2: this.curArgs[1],\n              x: this.curArgs[2],\n              y: this.curArgs[3],\n            });\n          } else if (this.curCommandType === SVGPathData.QUAD_TO) {\n            finishCommand({\n              type: SVGPathData.QUAD_TO,\n              relative: this.curCommandRelative,\n              x1: this.curArgs[0],\n              y1: this.curArgs[1],\n              x: this.curArgs[2],\n              y: this.curArgs[3],\n            });\n          } else if (this.curCommandType === SVGPathData.ARC) {\n            finishCommand({\n              type: SVGPathData.ARC,\n              relative: this.curCommandRelative,\n              rX: this.curArgs[0],\n              rY: this.curArgs[1],\n              xRot: this.curArgs[2],\n              lArcFlag: this.curArgs[3] as 0 | 1,\n              sweepFlag: this.curArgs[4] as 0 | 1,\n              x: this.curArgs[5],\n              y: this.curArgs[6],\n            });\n          }\n        }\n        this.curNumber = \"\";\n        this.curNumberHasExpDigits = false;\n        this.curNumberHasExp = false;\n        this.curNumberHasDecimal = false;\n        this.canParseCommandOrComma = true;\n      }\n      // Continue if a white space or a comma was detected\n      if (isWhiteSpace(c)) {\n        continue;\n      }\n      if (\",\" === c && this.canParseCommandOrComma) {\n        // L 0,0, H is not valid:\n        this.canParseCommandOrComma = false;\n        continue;\n      }\n      // if a sign is detected, then parse the new number\n      if (\"+\" === c || \"-\" === c || \".\" === c) {\n        this.curNumber = c;\n        this.curNumberHasDecimal = \".\" === c;\n        continue;\n      }\n      // if a 0 is detected, then parse the new number\n      if (isEndingDigit) {\n        this.curNumber = c;\n        this.curNumberHasDecimal = false;\n        continue;\n      }\n\n      // Adding residual command\n      if (0 !== this.curArgs.length) {\n        throw new SyntaxError(`Unterminated command at index ${i}.`);\n      }\n      if (!this.canParseCommandOrComma) {\n        throw new SyntaxError(\n          `Unexpected character \"${c}\" at index ${i}. Command cannot follow comma`,\n        );\n      }\n      this.canParseCommandOrComma = false;\n      // Detecting the next command\n      if (\"z\" === c || \"Z\" === c) {\n        commands.push({\n          type: SVGPathData.CLOSE_PATH,\n        });\n        this.canParseCommandOrComma = true;\n        this.curCommandType = -1;\n        continue;\n        // Horizontal move to command\n      } else if (\"h\" === c || \"H\" === c) {\n        this.curCommandType = SVGPathData.HORIZ_LINE_TO;\n        this.curCommandRelative = \"h\" === c;\n        // Vertical move to command\n      } else if (\"v\" === c || \"V\" === c) {\n        this.curCommandType = SVGPathData.VERT_LINE_TO;\n        this.curCommandRelative = \"v\" === c;\n        // Move to command\n      } else if (\"m\" === c || \"M\" === c) {\n        this.curCommandType = SVGPathData.MOVE_TO;\n        this.curCommandRelative = \"m\" === c;\n        // Line to command\n      } else if (\"l\" === c || \"L\" === c) {\n        this.curCommandType = SVGPathData.LINE_TO;\n        this.curCommandRelative = \"l\" === c;\n        // Curve to command\n      } else if (\"c\" === c || \"C\" === c) {\n        this.curCommandType = SVGPathData.CURVE_TO;\n        this.curCommandRelative = \"c\" === c;\n        // Smooth curve to command\n      } else if (\"s\" === c || \"S\" === c) {\n        this.curCommandType = SVGPathData.SMOOTH_CURVE_TO;\n        this.curCommandRelative = \"s\" === c;\n        // Quadratic bezier curve to command\n      } else if (\"q\" === c || \"Q\" === c) {\n        this.curCommandType = SVGPathData.QUAD_TO;\n        this.curCommandRelative = \"q\" === c;\n        // Smooth quadratic bezier curve to command\n      } else if (\"t\" === c || \"T\" === c) {\n        this.curCommandType = SVGPathData.SMOOTH_QUAD_TO;\n        this.curCommandRelative = \"t\" === c;\n        // Elliptic arc command\n      } else if (\"a\" === c || \"A\" === c) {\n        this.curCommandType = SVGPathData.ARC;\n        this.curCommandRelative = \"a\" === c;\n      } else {\n        throw new SyntaxError(`Unexpected character \"${c}\" at index ${i}.`);\n      }\n    }\n    return commands;\n  }\n  /**\n   * Return a wrapper around this parser which applies the transformation on parsed commands.\n   */\n  transform(transform: TransformFunction) {\n    const result = Object.create(this, {\n      parse: {\n        value(chunk: string, commands: SVGCommand[] = []) {\n          const parsedCommands = Object.getPrototypeOf(this).parse.call(\n            this,\n            chunk,\n          );\n          for (const c of parsedCommands) {\n            const cT = transform(c);\n            if (Array.isArray(cT)) {\n              commands.push(...cT);\n            } else {\n              commands.push(cT);\n            }\n          }\n          return commands;\n        },\n      },\n    });\n    return result as this;\n  }\n}\n","import { encodeSVGPath } from \"./SVGPathDataEncoder\";\nimport { SVGPathDataParser } from \"./SVGPathDataParser\";\nimport { SVGPathDataTransformer } from \"./SVGPathDataTransformer\";\nimport { TransformableSVG } from \"./TransformableSVG\";\nimport { SVGCommand } from \"./types\";\n\nexport class SVGPathData extends TransformableSVG {\n  commands: SVGCommand[];\n  constructor(content: string | SVGCommand[]) {\n    super();\n    if (\"string\" === typeof content) {\n      this.commands = SVGPathData.parse(content);\n    } else {\n      this.commands = content;\n    }\n  }\n\n  encode() {\n    return SVGPathData.encode(this.commands);\n  }\n\n  getBounds() {\n    const boundsTransform = SVGPathDataTransformer.CALCULATE_BOUNDS();\n\n    this.transform(boundsTransform);\n    return boundsTransform;\n  }\n\n  transform(\n    transformFunction: (input: SVGCommand) => SVGCommand | SVGCommand[],\n  ) {\n    const newCommands = [];\n\n    for (const command of this.commands) {\n      const transformedCommand = transformFunction(command);\n\n      if (Array.isArray(transformedCommand)) {\n        newCommands.push(...transformedCommand);\n      } else {\n        newCommands.push(transformedCommand);\n      }\n    }\n    this.commands = newCommands;\n    return this;\n  }\n\n  static encode(commands: SVGCommand[]) {\n    return encodeSVGPath(commands);\n      }\n\n  static parse(path: string) {\n    const parser = new SVGPathDataParser();\n    const commands: SVGCommand[] = [];\n    parser.parse(path, commands);\n    parser.finish(commands);\n    return commands;\n  }\n\n  static readonly CLOSE_PATH: 1 = 1;\n  static readonly MOVE_TO: 2 = 2;\n  static readonly HORIZ_LINE_TO: 4 = 4;\n  static readonly VERT_LINE_TO: 8 = 8;\n  static readonly LINE_TO: 16 = 16;\n  static readonly CURVE_TO: 32 = 32;\n  static readonly SMOOTH_CURVE_TO: 64 = 64;\n  static readonly QUAD_TO: 128 = 128;\n  static readonly SMOOTH_QUAD_TO: 256 = 256;\n  static readonly ARC: 512 = 512;\n  static readonly LINE_COMMANDS = SVGPathData.LINE_TO | SVGPathData.HORIZ_LINE_TO | SVGPathData.VERT_LINE_TO;\n  static readonly DRAWING_COMMANDS = SVGPathData.HORIZ_LINE_TO | SVGPathData.VERT_LINE_TO | SVGPathData.LINE_TO |\n  SVGPathData.CURVE_TO | SVGPathData.SMOOTH_CURVE_TO | SVGPathData.QUAD_TO |\n  SVGPathData.SMOOTH_QUAD_TO | SVGPathData.ARC;\n}\n\nexport const COMMAND_ARG_COUNTS = {\n    [SVGPathData.MOVE_TO]: 2,\n    [SVGPathData.LINE_TO]: 2,\n    [SVGPathData.HORIZ_LINE_TO]: 1,\n    [SVGPathData.VERT_LINE_TO]: 1,\n    [SVGPathData.CLOSE_PATH]: 0,\n    [SVGPathData.QUAD_TO]: 4,\n    [SVGPathData.SMOOTH_QUAD_TO]: 2,\n    [SVGPathData.CURVE_TO]: 6,\n    [SVGPathData.SMOOTH_CURVE_TO]: 4,\n    [SVGPathData.ARC]: 7,\n};\n\nexport {encodeSVGPath} from \"./SVGPathDataEncoder\";\nexport {SVGPathDataParser} from \"./SVGPathDataParser\";\nexport {SVGPathDataTransformer} from \"./SVGPathDataTransformer\";\n"]},"metadata":{},"sourceType":"module"}